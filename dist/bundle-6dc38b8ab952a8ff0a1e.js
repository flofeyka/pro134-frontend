/*! For license information please see bundle-6dc38b8ab952a8ff0a1e.js.LICENSE.txt */
(()=>{var e,n,t={311:e=>{"use strict";e.exports=function(e,n,t,r,i,o,a,s){if(!e){var l;if(void 0===n)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[t,r,i,o,a,s],u=0;(l=new Error(n.replace(/%s/g,(function(){return c[u++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},694:(e,n,t)=>{"use strict";var r=t(925);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,n,t,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function n(){return e}e.isRequired=e;var t={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:o,resetWarningCache:i};return t.PropTypes=t,t}},556:(e,n,t)=>{e.exports=t(694)()},925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},551:(e,n,t)=>{"use strict";var r=t(540),i=t(982);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,n){c(e,n),c(e+"Capture",n)}function c(e,n){for(s[e]=n,e=0;e<n.length;e++)a.add(n[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},h={};function g(e,n,t,r,i,o,a){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=o,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];m[n]=new g(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var x=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function y(e,n,t,r){var i=m.hasOwnProperty(n)?m[n]:null;(null!==i?0!==i.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,i,r)&&(t=null),r||null===i?function(e){return!!d.call(h,e)||!d.call(f,e)&&(p.test(e)?h[e]=!0:(f[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):i.mustUseProperty?e[i.propertyName]=null===t?3!==i.type&&"":t:(n=i.attributeName,r=i.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(i=i.type)||4===i&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(x,v);m[n]=new g(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(x,v);m[n]=new g(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(x,v);m[n]=new g(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),k=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),j=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),_=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),z=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var N,R=Object.assign;function D(e){if(void 0===N)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);N=n&&n[1]||""}return"\n"+N+e}var B=!1;function I(e,n){if(!e||B)return"";B=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var i=n.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var l="\n"+i[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{B=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?D(e):""}function V(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case E:return"Profiler";case j:return"StrictMode";case F:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case O:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(n=e.displayName||null)?n:$(e.type)||"Memo";case z:n=e._payload,e=e._init;try{return $(e(n))}catch(e){}}return null}function U(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(n);case 8:return n===j?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function q(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function W(e){e._valueTracker||(e._valueTracker=function(e){var n=H(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var i=t.get,o=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function G(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Q(e,n){var t=n.checked;return R({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function X(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=q(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function K(e,n){null!=(n=n.checked)&&y(e,"checked",n,!1)}function J(e,n){K(e,n);var t=q(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,q(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function Z(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&Y(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var i=0;i<t.length;i++)n["$"+t[i]]=!0;for(t=0;t<e.length;t++)i=n.hasOwnProperty("$"+e[t].value),e[t].selected!==i&&(e[t].selected=i),i&&r&&(e[t].defaultSelected=!0)}else{for(t=""+q(t),n=null,i=0;i<e.length;i++){if(e[i].value===t)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==n||e[i].disabled||(n=e[i])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(o(91));return R({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(o(92));if(ne(t)){if(1<t.length)throw Error(o(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:q(t)}}function oe(e,n){var t=q(n.value),r=q(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ae(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?se(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,n)}))}:ue);function pe(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||fe.hasOwnProperty(e)&&fe[e]?(""+n).trim():n+"px"}function me(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),i=ge(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,i):e[t]=i}}Object.keys(fe).forEach((function(e){he.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),fe[n]=fe[e]}))}));var xe=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,n){if(n){if(xe[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(o(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(o(62))}}function ye(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Se=null,je=null;function Ee(e){if(e=yi(e)){if("function"!=typeof ke)throw Error(o(280));var n=e.stateNode;n&&(n=wi(n),ke(e.stateNode,e.type,n))}}function Ce(e){Se?je?je.push(e):je=[e]:Se=e}function _e(){if(Se){var e=Se,n=je;if(je=Se=null,Ee(e),n)for(e=0;e<n.length;e++)Ee(n[e])}}function Oe(e,n){return e(n)}function Fe(){}var Pe=!1;function Te(e,n,t){if(Pe)return e(n,t);Pe=!0;try{return Oe(e,n,t)}finally{Pe=!1,(null!==Se||null!==je)&&(Fe(),_e())}}function ze(e,n){var t=e.stateNode;if(null===t)return null;var r=wi(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var Ae=!1;if(u)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Ae=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ue){Ae=!1}function Me(e,n,t,r,i,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(e){this.onError(e)}}var Ne=!1,Re=null,De=!1,Be=null,Ie={onError:function(e){Ne=!0,Re=e}};function Ve(e,n,t,r,i,o,a,s,l){Ne=!1,Re=null,Me.apply(Ie,arguments)}function $e(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Ue(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function qe(e){if($e(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=$e(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var i=t.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){t=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===t)return qe(i),e;if(a===r)return qe(i),n;a=a.sibling}throw Error(o(188))}if(t.return!==r.return)t=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===t){s=!0,t=i,r=a;break}if(l===r){s=!0,r=i,t=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===t){s=!0,t=a,r=i;break}if(l===r){s=!0,r=a,t=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=We(e);if(null!==n)return n;e=e.sibling}return null}var Ge=i.unstable_scheduleCallback,Ye=i.unstable_cancelCallback,Qe=i.unstable_shouldYield,Xe=i.unstable_requestPaint,Ke=i.unstable_now,Je=i.unstable_getCurrentPriorityLevel,Ze=i.unstable_ImmediatePriority,en=i.unstable_UserBlockingPriority,nn=i.unstable_NormalPriority,tn=i.unstable_LowPriority,rn=i.unstable_IdlePriority,on=null,an=null,sn=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ln(e)/cn|0)|0},ln=Math.log,cn=Math.LN2,un=64,dn=4194304;function pn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function fn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&t;if(0!==a){var s=a&~i;0!==s?r=pn(s):0!=(o&=a)&&(r=pn(o))}else 0!=(a=t&~i)?r=pn(a):0!==o&&(r=pn(o));if(0===r)return 0;if(0!==n&&n!==r&&!(n&i)&&((i=r&-r)>=(o=n&-n)||16===i&&4194240&o))return n;if(4&r&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)i=1<<(t=31-sn(n)),r|=e[t],n&=~i;return r}function hn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function gn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mn(){var e=un;return!(4194240&(un<<=1))&&(un=64),e}function xn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function vn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-sn(n)]=t}function yn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-sn(t),i=1<<r;i&n|e[r]&n&&(e[r]|=n),t&=~i}}var bn=0;function wn(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var kn,Sn,jn,En,Cn,_n=!1,On=[],Fn=null,Pn=null,Tn=null,zn=new Map,An=new Map,Ln=[],Mn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nn(e,n){switch(e){case"focusin":case"focusout":Fn=null;break;case"dragenter":case"dragleave":Pn=null;break;case"mouseover":case"mouseout":Tn=null;break;case"pointerover":case"pointerout":zn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":An.delete(n.pointerId)}}function Rn(e,n,t,r,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==n&&null!==(n=yi(n))&&Sn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==i&&-1===n.indexOf(i)&&n.push(i),e)}function Dn(e){var n=vi(e.target);if(null!==n){var t=$e(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Ue(t)))return e.blockedOn=n,void Cn(e.priority,(function(){jn(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Bn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Xn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=yi(t))&&Sn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);be=r,t.target.dispatchEvent(r),be=null,n.shift()}return!0}function In(e,n,t){Bn(e)&&t.delete(n)}function Vn(){_n=!1,null!==Fn&&Bn(Fn)&&(Fn=null),null!==Pn&&Bn(Pn)&&(Pn=null),null!==Tn&&Bn(Tn)&&(Tn=null),zn.forEach(In),An.forEach(In)}function $n(e,n){e.blockedOn===n&&(e.blockedOn=null,_n||(_n=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Vn)))}function Un(e){function n(n){return $n(n,e)}if(0<On.length){$n(On[0],e);for(var t=1;t<On.length;t++){var r=On[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Fn&&$n(Fn,e),null!==Pn&&$n(Pn,e),null!==Tn&&$n(Tn,e),zn.forEach(n),An.forEach(n),t=0;t<Ln.length;t++)(r=Ln[t]).blockedOn===e&&(r.blockedOn=null);for(;0<Ln.length&&null===(t=Ln[0]).blockedOn;)Dn(t),null===t.blockedOn&&Ln.shift()}var qn=b.ReactCurrentBatchConfig,Hn=!0;function Wn(e,n,t,r){var i=bn,o=qn.transition;qn.transition=null;try{bn=1,Yn(e,n,t,r)}finally{bn=i,qn.transition=o}}function Gn(e,n,t,r){var i=bn,o=qn.transition;qn.transition=null;try{bn=4,Yn(e,n,t,r)}finally{bn=i,qn.transition=o}}function Yn(e,n,t,r){if(Hn){var i=Xn(e,n,t,r);if(null===i)qr(e,n,r,Qn,t),Nn(e,r);else if(function(e,n,t,r,i){switch(n){case"focusin":return Fn=Rn(Fn,e,n,t,r,i),!0;case"dragenter":return Pn=Rn(Pn,e,n,t,r,i),!0;case"mouseover":return Tn=Rn(Tn,e,n,t,r,i),!0;case"pointerover":var o=i.pointerId;return zn.set(o,Rn(zn.get(o)||null,e,n,t,r,i)),!0;case"gotpointercapture":return o=i.pointerId,An.set(o,Rn(An.get(o)||null,e,n,t,r,i)),!0}return!1}(i,e,n,t,r))r.stopPropagation();else if(Nn(e,r),4&n&&-1<Mn.indexOf(e)){for(;null!==i;){var o=yi(i);if(null!==o&&kn(o),null===(o=Xn(e,n,t,r))&&qr(e,n,r,Qn,t),o===i)break;i=o}null!==i&&r.stopPropagation()}else qr(e,n,r,null,t)}}var Qn=null;function Xn(e,n,t,r){if(Qn=null,null!==(e=vi(e=we(r))))if(null===(n=$e(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=Ue(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Qn=e,null}function Kn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Jn=null,Zn=null,et=null;function nt(){if(et)return et;var e,n,t=Zn,r=t.length,i="value"in Jn?Jn.value:Jn.textContent,o=i.length;for(e=0;e<r&&t[e]===i[e];e++);var a=r-e;for(n=1;n<=a&&t[r-n]===i[o-n];n++);return et=i.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function it(){return!1}function ot(e){function n(n,t,r,i,o){for(var a in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(n=e[a],this[a]=n?n(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?rt:it,this.isPropagationStopped=it,this}return R(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var at,st,lt,ct={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ut=ot(ct),dt=R({},ct,{view:0,detail:0}),pt=ot(dt),ft=R({},dt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Et,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lt&&(lt&&"mousemove"===e.type?(at=e.screenX-lt.screenX,st=e.screenY-lt.screenY):st=at=0,lt=e),at)},movementY:function(e){return"movementY"in e?e.movementY:st}}),ht=ot(ft),gt=ot(R({},ft,{dataTransfer:0})),mt=ot(R({},dt,{relatedTarget:0})),xt=ot(R({},ct,{animationName:0,elapsedTime:0,pseudoElement:0})),vt=R({},ct,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yt=ot(vt),bt=ot(R({},ct,{data:0})),wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},St={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function jt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=St[e])&&!!n[e]}function Et(){return jt}var Ct=R({},dt,{key:function(e){if(e.key){var n=wt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kt[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Et,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_t=ot(Ct),Ot=ot(R({},ft,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ft=ot(R({},dt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Et})),Pt=ot(R({},ct,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tt=R({},ft,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),zt=ot(Tt),At=[9,13,27,32],Lt=u&&"CompositionEvent"in window,Mt=null;u&&"documentMode"in document&&(Mt=document.documentMode);var Nt=u&&"TextEvent"in window&&!Mt,Rt=u&&(!Lt||Mt&&8<Mt&&11>=Mt),Dt=String.fromCharCode(32),Bt=!1;function It(e,n){switch(e){case"keyup":return-1!==At.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $t=!1,Ut={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Ut[e.type]:"textarea"===n}function Ht(e,n,t,r){Ce(r),0<(n=Wr(n,"onChange")).length&&(t=new ut("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Wt=null,Gt=null;function Yt(e){Dr(e,0)}function Qt(e){if(G(bi(e)))return e}function Xt(e,n){if("change"===e)return n}var Kt=!1;if(u){var Jt;if(u){var Zt="oninput"in document;if(!Zt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zt="function"==typeof er.oninput}Jt=Zt}else Jt=!1;Kt=Jt&&(!document.documentMode||9<document.documentMode)}function nr(){Wt&&(Wt.detachEvent("onpropertychange",tr),Gt=Wt=null)}function tr(e){if("value"===e.propertyName&&Qt(Gt)){var n=[];Ht(n,Gt,e,we(e)),Te(Yt,n)}}function rr(e,n,t){"focusin"===e?(nr(),Gt=t,(Wt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qt(Gt)}function or(e,n){if("click"===e)return Qt(n)}function ar(e,n){if("input"===e||"change"===e)return Qt(n)}var sr="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function lr(e,n){if(sr(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var i=t[r];if(!d.call(n,i)||!sr(e[i],n[i]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,n){var t,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?dr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function pr(){for(var e=window,n=Y();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=Y((e=n.contentWindow).document)}return n}function fr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function hr(e){var n=pr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&dr(t.ownerDocument.documentElement,t)){if(null!==r&&fr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var i=t.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=ur(t,o);var a=ur(t,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((n=n.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(n),e.extend(a.node,a.offset)):(n.setEnd(a.node,a.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=u&&"documentMode"in document&&11>=document.documentMode,mr=null,xr=null,vr=null,yr=!1;function br(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;yr||null==mr||mr!==Y(r)||(r="selectionStart"in(r=mr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Wr(xr,"onSelect")).length&&(n=new ut("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=mr)))}function wr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var kr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Sr={},jr={};function Er(e){if(Sr[e])return Sr[e];if(!kr[e])return e;var n,t=kr[e];for(n in t)if(t.hasOwnProperty(n)&&n in jr)return Sr[e]=t[n];return e}u&&(jr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Cr=Er("animationend"),_r=Er("animationiteration"),Or=Er("animationstart"),Fr=Er("transitionend"),Pr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function zr(e,n){Pr.set(e,n),l(n,[e])}for(var Ar=0;Ar<Tr.length;Ar++){var Lr=Tr[Ar];zr(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}zr(Cr,"onAnimationEnd"),zr(_r,"onAnimationIteration"),zr(Or,"onAnimationStart"),zr("dblclick","onDoubleClick"),zr("focusin","onFocus"),zr("focusout","onBlur"),zr(Fr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Nr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Rr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,i,a,s,l,c){if(Ve.apply(this,arguments),Ne){if(!Ne)throw Error(o(198));var u=Re;Ne=!1,Re=null,De||(De=!0,Be=u)}}(r,n,void 0,e),e.currentTarget=null}function Dr(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],i=r.event;r=r.listeners;e:{var o=void 0;if(n)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Rr(i,s,c),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Rr(i,s,c),o=l}}}if(De)throw e=Be,De=!1,Be=null,e}function Br(e,n){var t=n[gi];void 0===t&&(t=n[gi]=new Set);var r=e+"__bubble";t.has(r)||(Ur(n,e,2,!1),t.add(r))}function Ir(e,n,t){var r=0;n&&(r|=4),Ur(t,e,r,n)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Vr]){e[Vr]=!0,a.forEach((function(n){"selectionchange"!==n&&(Nr.has(n)||Ir(n,!1,e),Ir(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Vr]||(n[Vr]=!0,Ir("selectionchange",!1,n))}}function Ur(e,n,t,r){switch(Kn(n)){case 1:var i=Wn;break;case 4:i=Gn;break;default:i=Yn}t=i.bind(null,n,t,e),i=void 0,!Ae||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(i=!0),r?void 0!==i?e.addEventListener(n,t,{capture:!0,passive:i}):e.addEventListener(n,t,!0):void 0!==i?e.addEventListener(n,t,{passive:i}):e.addEventListener(n,t,!1)}function qr(e,n,t,r,i){var o=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=vi(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}Te((function(){var r=o,i=we(t),a=[];e:{var s=Pr.get(e);if(void 0!==s){var l=ut,c=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":l=_t;break;case"focusin":c="focus",l=mt;break;case"focusout":c="blur",l=mt;break;case"beforeblur":case"afterblur":l=mt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=ht;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Ft;break;case Cr:case _r:case Or:l=xt;break;case Fr:l=Pt;break;case"scroll":l=pt;break;case"wheel":l=zt;break;case"copy":case"cut":case"paste":l=yt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Ot}var u=!!(4&n),d=!u&&"scroll"===e,p=u?null!==s?s+"Capture":null:s;u=[];for(var f,h=r;null!==h;){var g=(f=h).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==p&&null!=(g=ze(h,p))&&u.push(Hr(h,g,f))),d)break;h=h.return}0<u.length&&(s=new l(s,c,null,t,i),a.push({event:s,listeners:u}))}}if(!(7&n)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||t===be||!(c=t.relatedTarget||t.fromElement)||!vi(c)&&!c[hi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=t.relatedTarget||t.toElement)?vi(c):null)&&(c!==(d=$e(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=ht,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=Ot,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==l?s:bi(l),f=null==c?s:bi(c),(s=new u(g,h+"leave",l,t,i)).target=d,s.relatedTarget=f,g=null,vi(i)===r&&((u=new u(p,h+"enter",c,t,i)).target=f,u.relatedTarget=d,g=u),d=g,l&&c)e:{for(p=c,h=0,f=u=l;f;f=Gr(f))h++;for(f=0,g=p;g;g=Gr(g))f++;for(;0<h-f;)u=Gr(u),h--;for(;0<f-h;)p=Gr(p),f--;for(;h--;){if(u===p||null!==p&&u===p.alternate)break e;u=Gr(u),p=Gr(p)}u=null}else u=null;null!==l&&Yr(a,s,l,u,!1),null!==c&&null!==d&&Yr(a,d,c,u,!0)}if("select"===(l=(s=r?bi(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Xt;else if(qt(s))if(Kt)m=ar;else{m=ir;var x=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=or);switch(m&&(m=m(e,r))?Ht(a,m,t,i):(x&&x(e,s,r),"focusout"===e&&(x=s._wrapperState)&&x.controlled&&"number"===s.type&&ee(s,"number",s.value)),x=r?bi(r):window,e){case"focusin":(qt(x)||"true"===x.contentEditable)&&(mr=x,xr=r,vr=null);break;case"focusout":vr=xr=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(a,t,i);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":br(a,t,i)}var v;if(Lt)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else $t?It(e,t)&&(y="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(y="onCompositionStart");y&&(Rt&&"ko"!==t.locale&&($t||"onCompositionStart"!==y?"onCompositionEnd"===y&&$t&&(v=nt()):(Zn="value"in(Jn=i)?Jn.value:Jn.textContent,$t=!0)),0<(x=Wr(r,y)).length&&(y=new bt(y,e,null,t,i),a.push({event:y,listeners:x}),(v||null!==(v=Vt(t)))&&(y.data=v))),(v=Nt?function(e,n){switch(e){case"compositionend":return Vt(n);case"keypress":return 32!==n.which?null:(Bt=!0,Dt);case"textInput":return(e=n.data)===Dt&&Bt?null:e;default:return null}}(e,t):function(e,n){if($t)return"compositionend"===e||!Lt&&It(e,n)?(e=nt(),et=Zn=Jn=null,$t=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Rt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Wr(r,"onBeforeInput")).length&&(i=new bt("onBeforeInput","beforeinput",null,t,i),a.push({event:i,listeners:r}),i.data=v)}Dr(a,n)}))}function Hr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Wr(e,n){for(var t=n+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=ze(e,t))&&r.unshift(Hr(e,o,i)),null!=(o=ze(e,n))&&r.push(Hr(e,o,i))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,n,t,r,i){for(var o=n._reactName,a=[];null!==t&&t!==r;){var s=t,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(l=ze(t,o))&&a.unshift(Hr(t,l,s)):i||null!=(l=ze(t,o))&&a.push(Hr(t,l,s))),t=t.return}0!==a.length&&e.push({event:n,listeners:a})}var Qr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Xr,"")}function Jr(e,n,t){if(n=Kr(n),Kr(e)!==n&&t)throw Error(o(425))}function Zr(){}var ei=null,ni=null;function ti(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function li(e,n){var t=n,r=0;do{var i=t.nextSibling;if(e.removeChild(t),i&&8===i.nodeType)if("/$"===(t=i.data)){if(0===r)return e.removeChild(i),void Un(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=i}while(t);Un(n)}function ci(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function ui(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var di=Math.random().toString(36).slice(2),pi="__reactFiber$"+di,fi="__reactProps$"+di,hi="__reactContainer$"+di,gi="__reactEvents$"+di,mi="__reactListeners$"+di,xi="__reactHandles$"+di;function vi(e){var n=e[pi];if(n)return n;for(var t=e.parentNode;t;){if(n=t[hi]||t[pi]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=ui(e);null!==e;){if(t=e[pi])return t;e=ui(e)}return n}t=(e=t).parentNode}return null}function yi(e){return!(e=e[pi]||e[hi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function bi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wi(e){return e[fi]||null}var ki=[],Si=-1;function ji(e){return{current:e}}function Ei(e){0>Si||(e.current=ki[Si],ki[Si]=null,Si--)}function Ci(e,n){Si++,ki[Si]=e.current,e.current=n}var _i={},Oi=ji(_i),Fi=ji(!1),Pi=_i;function Ti(e,n){var t=e.type.contextTypes;if(!t)return _i;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in t)o[i]=n[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=o),o}function zi(e){return null!=e.childContextTypes}function Ai(){Ei(Fi),Ei(Oi)}function Li(e,n,t){if(Oi.current!==_i)throw Error(o(168));Ci(Oi,n),Ci(Fi,t)}function Mi(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var i in r=r.getChildContext())if(!(i in n))throw Error(o(108,U(e)||"Unknown",i));return R({},t,r)}function Ni(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_i,Pi=Oi.current,Ci(Oi,e),Ci(Fi,Fi.current),!0}function Ri(e,n,t){var r=e.stateNode;if(!r)throw Error(o(169));t?(e=Mi(e,n,Pi),r.__reactInternalMemoizedMergedChildContext=e,Ei(Fi),Ei(Oi),Ci(Oi,e)):Ei(Fi),Ci(Fi,t)}var Di=null,Bi=!1,Ii=!1;function Vi(e){null===Di?Di=[e]:Di.push(e)}function $i(){if(!Ii&&null!==Di){Ii=!0;var e=0,n=bn;try{var t=Di;for(bn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Di=null,Bi=!1}catch(n){throw null!==Di&&(Di=Di.slice(e+1)),Ge(Ze,$i),n}finally{bn=n,Ii=!1}}return null}var Ui=[],qi=0,Hi=null,Wi=0,Gi=[],Yi=0,Qi=null,Xi=1,Ki="";function Ji(e,n){Ui[qi++]=Wi,Ui[qi++]=Hi,Hi=e,Wi=n}function Zi(e,n,t){Gi[Yi++]=Xi,Gi[Yi++]=Ki,Gi[Yi++]=Qi,Qi=e;var r=Xi;e=Ki;var i=32-sn(r)-1;r&=~(1<<i),t+=1;var o=32-sn(n)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Xi=1<<32-sn(n)+i|t<<i|r,Ki=o+e}else Xi=1<<o|t<<i|r,Ki=e}function eo(e){null!==e.return&&(Ji(e,1),Zi(e,1,0))}function no(e){for(;e===Hi;)Hi=Ui[--qi],Ui[qi]=null,Wi=Ui[--qi],Ui[qi]=null;for(;e===Qi;)Qi=Gi[--Yi],Gi[Yi]=null,Ki=Gi[--Yi],Gi[Yi]=null,Xi=Gi[--Yi],Gi[Yi]=null}var to=null,ro=null,io=!1,oo=null;function ao(e,n){var t=Tc(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function so(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,to=e,ro=ci(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,to=e,ro=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Qi?{id:Xi,overflow:Ki}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Tc(18,null,null,0)).stateNode=n,t.return=e,e.child=t,to=e,ro=null,!0);default:return!1}}function lo(e){return!(!(1&e.mode)||128&e.flags)}function co(e){if(io){var n=ro;if(n){var t=n;if(!so(e,n)){if(lo(e))throw Error(o(418));n=ci(t.nextSibling);var r=to;n&&so(e,n)?ao(r,t):(e.flags=-4097&e.flags|2,io=!1,to=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,to=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;to=e}function po(e){if(e!==to)return!1;if(!io)return uo(e),io=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ti(e.type,e.memoizedProps)),n&&(n=ro)){if(lo(e))throw fo(),Error(o(418));for(;n;)ao(e,n),n=ci(n.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ro=ci(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ro=null}}else ro=to?ci(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ci(e.nextSibling)}function ho(){ro=to=null,io=!1}function go(e){null===oo?oo=[e]:oo.push(e)}var mo=b.ReactCurrentBatchConfig;function xo(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var r=t.stateNode}if(!r)throw Error(o(147,e));var i=r,a=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===a?n.ref:(n=function(e){var n=i.refs;null===e?delete n[a]:n[a]=e},n._stringRef=a,n)}if("string"!=typeof e)throw Error(o(284));if(!t._owner)throw Error(o(290,e))}return e}function vo(e,n){throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function yo(e){return(0,e._init)(e._payload)}function bo(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function i(e,n){return(e=Ac(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function s(n){return e&&null===n.alternate&&(n.flags|=2),n}function l(e,n,t,r){return null===n||6!==n.tag?((n=Rc(t,e.mode,r)).return=e,n):((n=i(n,t)).return=e,n)}function c(e,n,t,r){var o=t.type;return o===S?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===z&&yo(o)===n.type)?((r=i(n,t.props)).ref=xo(e,n,t),r.return=e,r):((r=Lc(t.type,t.key,t.props,null,e.mode,r)).ref=xo(e,n,t),r.return=e,r)}function u(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Dc(t,e.mode,r)).return=e,n):((n=i(n,t.children||[])).return=e,n)}function d(e,n,t,r,o){return null===n||7!==n.tag?((n=Mc(t,e.mode,r,o)).return=e,n):((n=i(n,t)).return=e,n)}function p(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Rc(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return(t=Lc(n.type,n.key,n.props,null,e.mode,t)).ref=xo(e,null,n),t.return=e,t;case k:return(n=Dc(n,e.mode,t)).return=e,n;case z:return p(e,(0,n._init)(n._payload),t)}if(ne(n)||M(n))return(n=Mc(n,e.mode,t,null)).return=e,n;vo(e,n)}return null}function f(e,n,t,r){var i=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==i?null:l(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return t.key===i?c(e,n,t,r):null;case k:return t.key===i?u(e,n,t,r):null;case z:return f(e,n,(i=t._init)(t._payload),r)}if(ne(t)||M(t))return null!==i?null:d(e,n,t,r,null);vo(e,t)}return null}function h(e,n,t,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(n,e=e.get(t)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(n,e=e.get(null===r.key?t:r.key)||null,r,i);case k:return u(n,e=e.get(null===r.key?t:r.key)||null,r,i);case z:return h(e,n,t,(0,r._init)(r._payload),i)}if(ne(r)||M(r))return d(n,e=e.get(t)||null,r,i,null);vo(n,r)}return null}function g(i,o,s,l){for(var c=null,u=null,d=o,g=o=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var x=f(i,d,s[g],l);if(null===x){null===d&&(d=m);break}e&&d&&null===x.alternate&&n(i,d),o=a(x,o,g),null===u?c=x:u.sibling=x,u=x,d=m}if(g===s.length)return t(i,d),io&&Ji(i,g),c;if(null===d){for(;g<s.length;g++)null!==(d=p(i,s[g],l))&&(o=a(d,o,g),null===u?c=d:u.sibling=d,u=d);return io&&Ji(i,g),c}for(d=r(i,d);g<s.length;g++)null!==(m=h(d,i,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),o=a(m,o,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return n(i,e)})),io&&Ji(i,g),c}function m(i,s,l,c){var u=M(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var d=u=null,g=s,m=s=0,x=null,v=l.next();null!==g&&!v.done;m++,v=l.next()){g.index>m?(x=g,g=null):x=g.sibling;var y=f(i,g,v.value,c);if(null===y){null===g&&(g=x);break}e&&g&&null===y.alternate&&n(i,g),s=a(y,s,m),null===d?u=y:d.sibling=y,d=y,g=x}if(v.done)return t(i,g),io&&Ji(i,m),u;if(null===g){for(;!v.done;m++,v=l.next())null!==(v=p(i,v.value,c))&&(s=a(v,s,m),null===d?u=v:d.sibling=v,d=v);return io&&Ji(i,m),u}for(g=r(i,g);!v.done;m++,v=l.next())null!==(v=h(g,i,m,v.value,c))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=a(v,s,m),null===d?u=v:d.sibling=v,d=v);return e&&g.forEach((function(e){return n(i,e)})),io&&Ji(i,m),u}return function e(r,o,a,l){if("object"==typeof a&&null!==a&&a.type===S&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case w:e:{for(var c=a.key,u=o;null!==u;){if(u.key===c){if((c=a.type)===S){if(7===u.tag){t(r,u.sibling),(o=i(u,a.props.children)).return=r,r=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===z&&yo(c)===u.type){t(r,u.sibling),(o=i(u,a.props)).ref=xo(r,u,a),o.return=r,r=o;break e}t(r,u);break}n(r,u),u=u.sibling}a.type===S?((o=Mc(a.props.children,r.mode,l,a.key)).return=r,r=o):((l=Lc(a.type,a.key,a.props,null,r.mode,l)).ref=xo(r,o,a),l.return=r,r=l)}return s(r);case k:e:{for(u=a.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){t(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break e}t(r,o);break}n(r,o),o=o.sibling}(o=Dc(a,r.mode,l)).return=r,r=o}return s(r);case z:return e(r,o,(u=a._init)(a._payload),l)}if(ne(a))return g(r,o,a,l);if(M(a))return m(r,o,a,l);vo(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(t(r,o.sibling),(o=i(o,a)).return=r,r=o):(t(r,o),(o=Rc(a,r.mode,l)).return=r,r=o),s(r)):t(r,o)}}var wo=bo(!0),ko=bo(!1),So=ji(null),jo=null,Eo=null,Co=null;function _o(){Co=Eo=jo=null}function Oo(e){var n=So.current;Ei(So),e._currentValue=n}function Fo(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Po(e,n){jo=e,Co=Eo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&n)&&(ys=!0),e.firstContext=null)}function To(e){var n=e._currentValue;if(Co!==e)if(e={context:e,memoizedValue:n,next:null},null===Eo){if(null===jo)throw Error(o(308));Eo=e,jo.dependencies={lanes:0,firstContext:e}}else Eo=Eo.next=e;return n}var zo=null;function Ao(e){null===zo?zo=[e]:zo.push(e)}function Lo(e,n,t,r){var i=n.interleaved;return null===i?(t.next=t,Ao(n)):(t.next=i.next,i.next=t),n.interleaved=t,Mo(e,r)}function Mo(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var No=!1;function Ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Do(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Bo(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Io(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Ol){var i=r.pending;return null===i?n.next=n:(n.next=i.next,i.next=n),r.pending=n,Mo(e,t)}return null===(i=r.interleaved)?(n.next=n,Ao(r)):(n.next=i.next,i.next=n),r.interleaved=n,Mo(e,t)}function Vo(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}function $o(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var i=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var a={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?i=o=a:o=o.next=a,t=t.next}while(null!==t);null===o?i=o=n:o=o.next=n}else i=o=n;return t={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Uo(e,n,t,r){var i=e.updateQueue;No=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,c=l.next;l.next=null,null===a?o=c:a.next=c,a=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==o){var d=i.baseState;for(a=0,u=c=l=null,s=o;;){var p=s.lane,f=s.eventTime;if((r&p)===p){null!==u&&(u=u.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,g=s;switch(p=n,f=t,g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(f,d,p);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(f,d,p):h))break e;d=R({},d,p);break e;case 2:No=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(p=i.effects)?i.effects=[s]:p.push(s))}else f={eventTime:f,lane:p,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=f,l=d):u=u.next=f,a|=p;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(p=s).next,p.next=null,i.lastBaseUpdate=p,i.shared.pending=null}}if(null===u&&(l=d),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=u,null!==(n=i.shared.interleaved)){i=n;do{a|=i.lane,i=i.next}while(i!==n)}else null===o&&(i.shared.lanes=0);Nl|=a,e.lanes=a,e.memoizedState=d}}function qo(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],i=r.callback;if(null!==i){if(r.callback=null,r=t,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var Ho={},Wo=ji(Ho),Go=ji(Ho),Yo=ji(Ho);function Qo(e){if(e===Ho)throw Error(o(174));return e}function Xo(e,n){switch(Ci(Yo,n),Ci(Go,e),Ci(Wo,Ho),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:le(null,"");break;default:n=le(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Ei(Wo),Ci(Wo,n)}function Ko(){Ei(Wo),Ei(Go),Ei(Yo)}function Jo(e){Qo(Yo.current);var n=Qo(Wo.current),t=le(n,e.type);n!==t&&(Ci(Go,e),Ci(Wo,t))}function Zo(e){Go.current===e&&(Ei(Wo),Ei(Go))}var ea=ji(0);function na(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ta=[];function ra(){for(var e=0;e<ta.length;e++)ta[e]._workInProgressVersionPrimary=null;ta.length=0}var ia=b.ReactCurrentDispatcher,oa=b.ReactCurrentBatchConfig,aa=0,sa=null,la=null,ca=null,ua=!1,da=!1,pa=0,fa=0;function ha(){throw Error(o(321))}function ga(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!sr(e[t],n[t]))return!1;return!0}function ma(e,n,t,r,i,a){if(aa=a,sa=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,ia.current=null===e||null===e.memoizedState?Za:es,e=t(r,i),da){a=0;do{if(da=!1,pa=0,25<=a)throw Error(o(301));a+=1,ca=la=null,n.updateQueue=null,ia.current=ns,e=t(r,i)}while(da)}if(ia.current=Ja,n=null!==la&&null!==la.next,aa=0,ca=la=sa=null,ua=!1,n)throw Error(o(300));return e}function xa(){var e=0!==pa;return pa=0,e}function va(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ca?sa.memoizedState=ca=e:ca=ca.next=e,ca}function ya(){if(null===la){var e=sa.alternate;e=null!==e?e.memoizedState:null}else e=la.next;var n=null===ca?sa.memoizedState:ca.next;if(null!==n)ca=n,la=e;else{if(null===e)throw Error(o(310));e={memoizedState:(la=e).memoizedState,baseState:la.baseState,baseQueue:la.baseQueue,queue:la.queue,next:null},null===ca?sa.memoizedState=ca=e:ca=ca.next=e}return ca}function ba(e,n){return"function"==typeof n?n(e):n}function wa(e){var n=ya(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=la,i=r.baseQueue,a=t.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,t.pending=null}if(null!==i){a=i.next,r=r.baseState;var l=s=null,c=null,u=a;do{var d=u.lane;if((aa&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var p={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=p,s=r):c=c.next=p,sa.lanes|=d,Nl|=d}u=u.next}while(null!==u&&u!==a);null===c?s=r:c.next=l,sr(r,n.memoizedState)||(ys=!0),n.memoizedState=r,n.baseState=s,n.baseQueue=c,t.lastRenderedState=r}if(null!==(e=t.interleaved)){i=e;do{a=i.lane,sa.lanes|=a,Nl|=a,i=i.next}while(i!==e)}else null===i&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function ka(e){var n=ya(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,i=t.pending,a=n.memoizedState;if(null!==i){t.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);sr(a,n.memoizedState)||(ys=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function Sa(){}function ja(e,n){var t=sa,r=ya(),i=n(),a=!sr(r.memoizedState,i);if(a&&(r.memoizedState=i,ys=!0),r=r.queue,Na(_a.bind(null,t,r,e),[e]),r.getSnapshot!==n||a||null!==ca&&1&ca.memoizedState.tag){if(t.flags|=2048,Ta(9,Ca.bind(null,t,r,i,n),void 0,null),null===Fl)throw Error(o(349));30&aa||Ea(t,n,i)}return i}function Ea(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=sa.updateQueue)?(n={lastEffect:null,stores:null},sa.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Ca(e,n,t,r){n.value=t,n.getSnapshot=r,Oa(n)&&Fa(e)}function _a(e,n,t){return t((function(){Oa(n)&&Fa(e)}))}function Oa(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!sr(e,t)}catch(e){return!0}}function Fa(e){var n=Mo(e,1);null!==n&&tc(n,e,1,-1)}function Pa(e){var n=va();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ba,lastRenderedState:e},n.queue=e,e=e.dispatch=Ya.bind(null,sa,e),[n.memoizedState,e]}function Ta(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=sa.updateQueue)?(n={lastEffect:null,stores:null},sa.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function za(){return ya().memoizedState}function Aa(e,n,t,r){var i=va();sa.flags|=e,i.memoizedState=Ta(1|n,t,void 0,void 0===r?null:r)}function La(e,n,t,r){var i=ya();r=void 0===r?null:r;var o=void 0;if(null!==la){var a=la.memoizedState;if(o=a.destroy,null!==r&&ga(r,a.deps))return void(i.memoizedState=Ta(n,t,o,r))}sa.flags|=e,i.memoizedState=Ta(1|n,t,o,r)}function Ma(e,n){return Aa(8390656,8,e,n)}function Na(e,n){return La(2048,8,e,n)}function Ra(e,n){return La(4,2,e,n)}function Da(e,n){return La(4,4,e,n)}function Ba(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Ia(e,n,t){return t=null!=t?t.concat([e]):null,La(4,4,Ba.bind(null,n,e),t)}function Va(){}function $a(e,n){var t=ya();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ga(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Ua(e,n){var t=ya();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ga(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function qa(e,n,t){return 21&aa?(sr(t,n)||(t=mn(),sa.lanes|=t,Nl|=t,e.baseState=!0),n):(e.baseState&&(e.baseState=!1,ys=!0),e.memoizedState=t)}function Ha(e,n){var t=bn;bn=0!==t&&4>t?t:4,e(!0);var r=oa.transition;oa.transition={};try{e(!1),n()}finally{bn=t,oa.transition=r}}function Wa(){return ya().memoizedState}function Ga(e,n,t){var r=nc(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},Qa(e)?Xa(n,t):null!==(t=Lo(e,n,t,r))&&(tc(t,e,r,ec()),Ka(t,n,r))}function Ya(e,n,t){var r=nc(e),i={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(Qa(e))Xa(n,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=n.lastRenderedReducer))try{var a=n.lastRenderedState,s=o(a,t);if(i.hasEagerState=!0,i.eagerState=s,sr(s,a)){var l=n.interleaved;return null===l?(i.next=i,Ao(n)):(i.next=l.next,l.next=i),void(n.interleaved=i)}}catch(e){}null!==(t=Lo(e,n,i,r))&&(tc(t,e,r,i=ec()),Ka(t,n,r))}}function Qa(e){var n=e.alternate;return e===sa||null!==n&&n===sa}function Xa(e,n){da=ua=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function Ka(e,n,t){if(4194240&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}var Ja={readContext:To,useCallback:ha,useContext:ha,useEffect:ha,useImperativeHandle:ha,useInsertionEffect:ha,useLayoutEffect:ha,useMemo:ha,useReducer:ha,useRef:ha,useState:ha,useDebugValue:ha,useDeferredValue:ha,useTransition:ha,useMutableSource:ha,useSyncExternalStore:ha,useId:ha,unstable_isNewReconciler:!1},Za={readContext:To,useCallback:function(e,n){return va().memoizedState=[e,void 0===n?null:n],e},useContext:To,useEffect:Ma,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,Aa(4194308,4,Ba.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Aa(4194308,4,e,n)},useInsertionEffect:function(e,n){return Aa(4,2,e,n)},useMemo:function(e,n){var t=va();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=va();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=Ga.bind(null,sa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},va().memoizedState=e},useState:Pa,useDebugValue:Va,useDeferredValue:function(e){return va().memoizedState=e},useTransition:function(){var e=Pa(!1),n=e[0];return e=Ha.bind(null,e[1]),va().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=sa,i=va();if(io){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===Fl)throw Error(o(349));30&aa||Ea(r,n,t)}i.memoizedState=t;var a={value:t,getSnapshot:n};return i.queue=a,Ma(_a.bind(null,r,a,e),[e]),r.flags|=2048,Ta(9,Ca.bind(null,r,a,t,n),void 0,null),t},useId:function(){var e=va(),n=Fl.identifierPrefix;if(io){var t=Ki;n=":"+n+"R"+(t=(Xi&~(1<<32-sn(Xi)-1)).toString(32)+t),0<(t=pa++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=fa++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},es={readContext:To,useCallback:$a,useContext:To,useEffect:Na,useImperativeHandle:Ia,useInsertionEffect:Ra,useLayoutEffect:Da,useMemo:Ua,useReducer:wa,useRef:za,useState:function(){return wa(ba)},useDebugValue:Va,useDeferredValue:function(e){return qa(ya(),la.memoizedState,e)},useTransition:function(){return[wa(ba)[0],ya().memoizedState]},useMutableSource:Sa,useSyncExternalStore:ja,useId:Wa,unstable_isNewReconciler:!1},ns={readContext:To,useCallback:$a,useContext:To,useEffect:Na,useImperativeHandle:Ia,useInsertionEffect:Ra,useLayoutEffect:Da,useMemo:Ua,useReducer:ka,useRef:za,useState:function(){return ka(ba)},useDebugValue:Va,useDeferredValue:function(e){var n=ya();return null===la?n.memoizedState=e:qa(n,la.memoizedState,e)},useTransition:function(){return[ka(ba)[0],ya().memoizedState]},useMutableSource:Sa,useSyncExternalStore:ja,useId:Wa,unstable_isNewReconciler:!1};function ts(e,n){if(e&&e.defaultProps){for(var t in n=R({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}function rs(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:R({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var is={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ec(),i=nc(e),o=Bo(r,i);o.payload=n,null!=t&&(o.callback=t),null!==(n=Io(e,o,i))&&(tc(n,e,i,r),Vo(n,e,i))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ec(),i=nc(e),o=Bo(r,i);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=Io(e,o,i))&&(tc(n,e,i,r),Vo(n,e,i))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ec(),r=nc(e),i=Bo(t,r);i.tag=2,null!=n&&(i.callback=n),null!==(n=Io(e,i,r))&&(tc(n,e,r,t),Vo(n,e,r))}};function os(e,n,t,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(n.prototype&&n.prototype.isPureReactComponent&&lr(t,r)&&lr(i,o))}function as(e,n,t){var r=!1,i=_i,o=n.contextType;return"object"==typeof o&&null!==o?o=To(o):(i=zi(n)?Pi:Oi.current,o=(r=null!=(r=n.contextTypes))?Ti(e,i):_i),n=new n(t,o),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=is,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),n}function ss(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&is.enqueueReplaceState(n,n.state,null)}function ls(e,n,t,r){var i=e.stateNode;i.props=t,i.state=e.memoizedState,i.refs={},Ro(e);var o=n.contextType;"object"==typeof o&&null!==o?i.context=To(o):(o=zi(n)?Pi:Oi.current,i.context=Ti(e,o)),i.state=e.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(rs(e,n,o,t),i.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(n=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),n!==i.state&&is.enqueueReplaceState(i,i.state,null),Uo(e,t,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function cs(e,n){try{var t="",r=n;do{t+=V(r),r=r.return}while(r);var i=t}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:i,digest:null}}function us(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function ds(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function fs(e,n,t){(t=Bo(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){ql||(ql=!0,Hl=r),ds(0,n)},t}function hs(e,n,t){(t=Bo(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=n.value;t.payload=function(){return r(i)},t.callback=function(){ds(0,n)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){ds(0,n),"function"!=typeof r&&(null===Wl?Wl=new Set([this]):Wl.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function gs(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new ps;var i=new Set;r.set(n,i)}else void 0===(i=r.get(n))&&(i=new Set,r.set(n,i));i.has(t)||(i.add(t),e=Ec.bind(null,e,n,t),n.then(e,e))}function ms(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function xs(e,n,t,r,i){return 1&e.mode?(e.flags|=65536,e.lanes=i,e):(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Bo(-1,1)).tag=2,Io(t,n,1))),t.lanes|=1),e)}var vs=b.ReactCurrentOwner,ys=!1;function bs(e,n,t,r){n.child=null===e?ko(n,null,t,r):wo(n,e.child,t,r)}function ws(e,n,t,r,i){t=t.render;var o=n.ref;return Po(n,i),r=ma(e,n,t,r,o,i),t=xa(),null===e||ys?(io&&t&&eo(n),n.flags|=1,bs(e,n,r,i),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~i,qs(e,n,i))}function ks(e,n,t,r,i){if(null===e){var o=t.type;return"function"!=typeof o||zc(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Lc(t.type,null,r,n,n.mode,i)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=o,Ss(e,n,o,r,i))}if(o=e.child,!(e.lanes&i)){var a=o.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(a,r)&&e.ref===n.ref)return qs(e,n,i)}return n.flags|=1,(e=Ac(o,r)).ref=n.ref,e.return=n,n.child=e}function Ss(e,n,t,r,i){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===n.ref){if(ys=!1,n.pendingProps=r=o,!(e.lanes&i))return n.lanes=e.lanes,qs(e,n,i);131072&e.flags&&(ys=!0)}}return Cs(e,n,t,r,i)}function js(e,n,t){var r=n.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&n.mode){if(!(1073741824&t))return e=null!==o?o.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,Ci(Al,zl),zl|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:t,Ci(Al,zl),zl|=r}else n.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ci(Al,zl),zl|=t;else null!==o?(r=o.baseLanes|t,n.memoizedState=null):r=t,Ci(Al,zl),zl|=r;return bs(e,n,i,t),n.child}function Es(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Cs(e,n,t,r,i){var o=zi(t)?Pi:Oi.current;return o=Ti(n,o),Po(n,i),t=ma(e,n,t,r,o,i),r=xa(),null===e||ys?(io&&r&&eo(n),n.flags|=1,bs(e,n,t,i),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~i,qs(e,n,i))}function _s(e,n,t,r,i){if(zi(t)){var o=!0;Ni(n)}else o=!1;if(Po(n,i),null===n.stateNode)Us(e,n),as(n,t,r),ls(n,t,r,i),r=!0;else if(null===e){var a=n.stateNode,s=n.memoizedProps;a.props=s;var l=a.context,c=t.contextType;c="object"==typeof c&&null!==c?To(c):Ti(n,c=zi(t)?Pi:Oi.current);var u=t.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&ss(n,a,r,c),No=!1;var p=n.memoizedState;a.state=p,Uo(n,r,a,i),l=n.memoizedState,s!==r||p!==l||Fi.current||No?("function"==typeof u&&(rs(n,t,u,r),l=n.memoizedState),(s=No||os(n,t,s,r,p,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(n.flags|=4194308)):("function"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,Do(e,n),s=n.memoizedProps,c=n.type===n.elementType?s:ts(n.type,s),a.props=c,d=n.pendingProps,p=a.context,l="object"==typeof(l=t.contextType)&&null!==l?To(l):Ti(n,l=zi(t)?Pi:Oi.current);var f=t.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||p!==l)&&ss(n,a,r,l),No=!1,p=n.memoizedState,a.state=p,Uo(n,r,a,i);var h=n.memoizedState;s!==d||p!==h||Fi.current||No?("function"==typeof f&&(rs(n,t,f,r),h=n.memoizedState),(c=No||os(n,t,c,r,p,h,l)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(n.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=h),a.props=r,a.state=h,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=1024),r=!1)}return Os(e,n,t,r,o,i)}function Os(e,n,t,r,i,o){Es(e,n);var a=!!(128&n.flags);if(!r&&!a)return i&&Ri(n,t,!1),qs(e,n,o);r=n.stateNode,vs.current=n;var s=a&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&a?(n.child=wo(n,e.child,null,o),n.child=wo(n,null,s,o)):bs(e,n,s,o),n.memoizedState=r.state,i&&Ri(n,t,!0),n.child}function Fs(e){var n=e.stateNode;n.pendingContext?Li(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Li(0,n.context,!1),Xo(e,n.containerInfo)}function Ps(e,n,t,r,i){return ho(),go(i),n.flags|=256,bs(e,n,t,r),n.child}var Ts,zs,As,Ls,Ms={dehydrated:null,treeContext:null,retryLane:0};function Ns(e){return{baseLanes:e,cachePool:null,transitions:null}}function Rs(e,n,t){var r,i=n.pendingProps,a=ea.current,s=!1,l=!!(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&a)),r?(s=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Ci(ea,1&a),null===e)return co(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(1&n.mode?"$!"===e.data?n.lanes=8:n.lanes=1073741824:n.lanes=1,null):(l=i.children,e=i.fallback,s?(i=n.mode,s=n.child,l={mode:"hidden",children:l},1&i||null===s?s=Nc(l,i,0,null):(s.childLanes=0,s.pendingProps=l),e=Mc(e,i,t,null),s.return=n,e.return=n,s.sibling=e,n.child=s,n.child.memoizedState=Ns(t),n.memoizedState=Ms,e):Ds(n,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,n,t,r,i,a,s){if(t)return 256&n.flags?(n.flags&=-257,Bs(e,n,s,r=us(Error(o(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(a=r.fallback,i=n.mode,r=Nc({mode:"visible",children:r.children},i,0,null),(a=Mc(a,i,s,null)).flags|=2,r.return=n,a.return=n,r.sibling=a,n.child=r,1&n.mode&&wo(n,e.child,null,s),n.child.memoizedState=Ns(s),n.memoizedState=Ms,a);if(!(1&n.mode))return Bs(e,n,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Bs(e,n,s,r=us(a=Error(o(419)),r,void 0))}if(l=!!(s&e.childLanes),ys||l){if(null!==(r=Fl)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=i&(r.suspendedLanes|s)?0:i)&&i!==a.retryLane&&(a.retryLane=i,Mo(e,i),tc(r,e,i,-1))}return gc(),Bs(e,n,s,r=us(Error(o(421))))}return"$?"===i.data?(n.flags|=128,n.child=e.child,n=_c.bind(null,e),i._reactRetry=n,null):(e=a.treeContext,ro=ci(i.nextSibling),to=n,io=!0,oo=null,null!==e&&(Gi[Yi++]=Xi,Gi[Yi++]=Ki,Gi[Yi++]=Qi,Xi=e.id,Ki=e.overflow,Qi=n),(n=Ds(n,r.children)).flags|=4096,n)}(e,n,l,i,r,a,t);if(s){s=i.fallback,l=n.mode,r=(a=e.child).sibling;var c={mode:"hidden",children:i.children};return 1&l||n.child===a?(i=Ac(a,c)).subtreeFlags=14680064&a.subtreeFlags:((i=n.child).childLanes=0,i.pendingProps=c,n.deletions=null),null!==r?s=Ac(r,s):(s=Mc(s,l,t,null)).flags|=2,s.return=n,i.return=n,i.sibling=s,n.child=i,i=s,s=n.child,l=null===(l=e.child.memoizedState)?Ns(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~t,n.memoizedState=Ms,i}return e=(s=e.child).sibling,i=Ac(s,{mode:"visible",children:i.children}),!(1&n.mode)&&(i.lanes=t),i.return=n,i.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=i,n.memoizedState=null,i}function Ds(e,n){return(n=Nc({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Bs(e,n,t,r){return null!==r&&go(r),wo(n,e.child,null,t),(e=Ds(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Is(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Fo(e.return,n,t)}function Vs(e,n,t,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:i}:(o.isBackwards=n,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=t,o.tailMode=i)}function $s(e,n,t){var r=n.pendingProps,i=r.revealOrder,o=r.tail;if(bs(e,n,r.children,t),2&(r=ea.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Is(e,t,n);else if(19===e.tag)Is(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ci(ea,r),1&n.mode)switch(i){case"forwards":for(t=n.child,i=null;null!==t;)null!==(e=t.alternate)&&null===na(e)&&(i=t),t=t.sibling;null===(t=i)?(i=n.child,n.child=null):(i=t.sibling,t.sibling=null),Vs(n,!1,i,t,o);break;case"backwards":for(t=null,i=n.child,n.child=null;null!==i;){if(null!==(e=i.alternate)&&null===na(e)){n.child=i;break}e=i.sibling,i.sibling=t,t=i,i=e}Vs(n,!0,t,null,o);break;case"together":Vs(n,!1,null,null,void 0);break;default:n.memoizedState=null}else n.memoizedState=null;return n.child}function Us(e,n){!(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function qs(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Nl|=n.lanes,!(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=Ac(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Ac(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Hs(e,n){if(!io)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ws(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var i=e.child;null!==i;)t|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)t|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Gs(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ws(n),null;case 1:case 17:return zi(n.type)&&Ai(),Ws(n),null;case 3:return r=n.stateNode,Ko(),Ei(Fi),Ei(Oi),ra(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(po(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,null!==oo&&(ac(oo),oo=null))),zs(e,n),Ws(n),null;case 5:Zo(n);var i=Qo(Yo.current);if(t=n.type,null!==e&&null!=n.stateNode)As(e,n,t,r,i),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Ws(n),null}if(e=Qo(Wo.current),po(n)){r=n.stateNode,t=n.type;var a=n.memoizedProps;switch(r[pi]=n,r[fi]=a,e=!!(1&n.mode),t){case"dialog":Br("cancel",r),Br("close",r);break;case"iframe":case"object":case"embed":Br("load",r);break;case"video":case"audio":for(i=0;i<Mr.length;i++)Br(Mr[i],r);break;case"source":Br("error",r);break;case"img":case"image":case"link":Br("error",r),Br("load",r);break;case"details":Br("toggle",r);break;case"input":X(r,a),Br("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Br("invalid",r);break;case"textarea":ie(r,a),Br("invalid",r)}for(var l in ve(t,a),i=null,a)if(a.hasOwnProperty(l)){var c=a[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),i=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),i=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Br("scroll",r)}switch(t){case"input":W(r),Z(r,a,!0);break;case"textarea":W(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=i,n.updateQueue=r,null!==r&&(n.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(t,{is:r.is}):(e=l.createElement(t),"select"===t&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,t),e[pi]=n,e[fi]=r,Ts(e,n,!1,!1),n.stateNode=e;e:{switch(l=ye(t,r),t){case"dialog":Br("cancel",e),Br("close",e),i=r;break;case"iframe":case"object":case"embed":Br("load",e),i=r;break;case"video":case"audio":for(i=0;i<Mr.length;i++)Br(Mr[i],e);i=r;break;case"source":Br("error",e),i=r;break;case"img":case"image":case"link":Br("error",e),Br("load",e),i=r;break;case"details":Br("toggle",e),i=r;break;case"input":X(e,r),i=Q(e,r),Br("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=R({},r,{value:void 0}),Br("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Br("invalid",e)}for(a in ve(t,i),c=i)if(c.hasOwnProperty(a)){var u=c[a];"style"===a?me(e,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===a?"string"==typeof u?("textarea"!==t||""!==u)&&pe(e,u):"number"==typeof u&&pe(e,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Br("scroll",e):null!=u&&y(e,a,u,l))}switch(t){case"input":W(e),Z(e,r,!1);break;case"textarea":W(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?te(e,!!r.multiple,a,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Zr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Ws(n),null;case 6:if(e&&null!=n.stateNode)Ls(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(t=Qo(Yo.current),Qo(Wo.current),po(n)){if(r=n.stateNode,t=n.memoizedProps,r[pi]=n,(a=r.nodeValue!==t)&&null!==(e=to))switch(e.tag){case 3:Jr(r.nodeValue,t,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,t,!!(1&e.mode))}a&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[pi]=n,n.stateNode=r}return Ws(n),null;case 13:if(Ei(ea),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==ro&&1&n.mode&&!(128&n.flags))fo(),ho(),n.flags|=98560,a=!1;else if(a=po(n),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=n.memoizedState)?a.dehydrated:null))throw Error(o(317));a[pi]=n}else ho(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Ws(n),a=!1}else null!==oo&&(ac(oo),oo=null),a=!0;if(!a)return 65536&n.flags?n:null}return 128&n.flags?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,1&n.mode&&(null===e||1&ea.current?0===Ll&&(Ll=3):gc())),null!==n.updateQueue&&(n.flags|=4),Ws(n),null);case 4:return Ko(),zs(e,n),null===e&&$r(n.stateNode.containerInfo),Ws(n),null;case 10:return Oo(n.type._context),Ws(n),null;case 19:if(Ei(ea),null===(a=n.memoizedState))return Ws(n),null;if(r=!!(128&n.flags),null===(l=a.rendering))if(r)Hs(a,!1);else{if(0!==Ll||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(l=na(e))){for(n.flags|=128,Hs(a,!1),null!==(r=l.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(a=t).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return Ci(ea,1&ea.current|2),n.child}e=e.sibling}null!==a.tail&&Ke()>$l&&(n.flags|=128,r=!0,Hs(a,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=na(l))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Hs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!io)return Ws(n),null}else 2*Ke()-a.renderingStartTime>$l&&1073741824!==t&&(n.flags|=128,r=!0,Hs(a,!1),n.lanes=4194304);a.isBackwards?(l.sibling=n.child,n.child=l):(null!==(t=a.last)?t.sibling=l:n.child=l,a.last=l)}return null!==a.tail?(n=a.tail,a.rendering=n,a.tail=n.sibling,a.renderingStartTime=Ke(),n.sibling=null,t=ea.current,Ci(ea,r?1&t|2:1&t),n):(Ws(n),null);case 22:case 23:return dc(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&1&n.mode?!!(1073741824&zl)&&(Ws(n),6&n.subtreeFlags&&(n.flags|=8192)):Ws(n),null;case 24:case 25:return null}throw Error(o(156,n.tag))}function Ys(e,n){switch(no(n),n.tag){case 1:return zi(n.type)&&Ai(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return Ko(),Ei(Fi),Ei(Oi),ra(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 5:return Zo(n),null;case 13:if(Ei(ea),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));ho()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Ei(ea),null;case 4:return Ko(),null;case 10:return Oo(n.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ts=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},zs=function(){},As=function(e,n,t,r){var i=e.memoizedProps;if(i!==r){e=n.stateNode,Qo(Wo.current);var o,a=null;switch(t){case"input":i=Q(e,i),r=Q(e,r),a=[];break;case"select":i=R({},i,{value:void 0}),r=R({},r,{value:void 0}),a=[];break;case"textarea":i=re(e,i),r=re(e,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(u in ve(t,r),t=null,i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u){var l=i[u];for(o in l)l.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=i?i[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(t||(t={}),t[o]=c[o])}else t||(a||(a=[]),a.push(u,t)),t=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(a=a||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Br("scroll",e),a||l===c||(a=[])):(a=a||[]).push(u,c))}t&&(a=a||[]).push("style",t);var u=a;(n.updateQueue=u)&&(n.flags|=4)}},Ls=function(e,n,t,r){t!==r&&(n.flags|=4)};var Qs=!1,Xs=!1,Ks="function"==typeof WeakSet?WeakSet:Set,Js=null;function Zs(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){jc(e,n,t)}else t.current=null}function el(e,n,t){try{t()}catch(t){jc(e,n,t)}}var nl=!1;function tl(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&el(n,t,o)}i=i.next}while(i!==r)}}function rl(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function il(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function ol(e){var n=e.alternate;null!==n&&(e.alternate=null,ol(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[pi],delete n[fi],delete n[gi],delete n[mi],delete n[xi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ll(e,n,t),e=e.sibling;null!==e;)ll(e,n,t),e=e.sibling}function cl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,n,t),e=e.sibling;null!==e;)cl(e,n,t),e=e.sibling}var ul=null,dl=!1;function pl(e,n,t){for(t=t.child;null!==t;)fl(e,n,t),t=t.sibling}function fl(e,n,t){if(an&&"function"==typeof an.onCommitFiberUnmount)try{an.onCommitFiberUnmount(on,t)}catch(e){}switch(t.tag){case 5:Xs||Zs(t,n);case 6:var r=ul,i=dl;ul=null,pl(e,n,t),dl=i,null!==(ul=r)&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?li(e.parentNode,t):1===e.nodeType&&li(e,t),Un(e)):li(ul,t.stateNode));break;case 4:r=ul,i=dl,ul=t.stateNode.containerInfo,dl=!0,pl(e,n,t),ul=r,dl=i;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(2&o||4&o)&&el(t,n,a),i=i.next}while(i!==r)}pl(e,n,t);break;case 1:if(!Xs&&(Zs(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){jc(t,n,e)}pl(e,n,t);break;case 21:pl(e,n,t);break;case 22:1&t.mode?(Xs=(r=Xs)||null!==t.memoizedState,pl(e,n,t),Xs=r):pl(e,n,t);break;default:pl(e,n,t)}}function hl(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Ks),n.forEach((function(n){var r=Oc.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function gl(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var i=t[r];try{var a=e,s=n,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===ul)throw Error(o(160));fl(a,s,i),ul=null,dl=!1;var c=i.alternate;null!==c&&(c.return=null),i.return=null}catch(e){jc(i,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)ml(n,e),n=n.sibling}function ml(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(n,e),xl(e),4&r){try{tl(3,e,e.return),rl(3,e)}catch(n){jc(e,e.return,n)}try{tl(5,e,e.return)}catch(n){jc(e,e.return,n)}}break;case 1:gl(n,e),xl(e),512&r&&null!==t&&Zs(t,t.return);break;case 5:if(gl(n,e),xl(e),512&r&&null!==t&&Zs(t,t.return),32&e.flags){var i=e.stateNode;try{pe(i,"")}catch(n){jc(e,e.return,n)}}if(4&r&&null!=(i=e.stateNode)){var a=e.memoizedProps,s=null!==t?t.memoizedProps:a,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===a.type&&null!=a.name&&K(i,a),ye(l,s);var u=ye(l,a);for(s=0;s<c.length;s+=2){var d=c[s],p=c[s+1];"style"===d?me(i,p):"dangerouslySetInnerHTML"===d?de(i,p):"children"===d?pe(i,p):y(i,d,p,u)}switch(l){case"input":J(i,a);break;case"textarea":oe(i,a);break;case"select":var f=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?te(i,!!a.multiple,h,!1):f!==!!a.multiple&&(null!=a.defaultValue?te(i,!!a.multiple,a.defaultValue,!0):te(i,!!a.multiple,a.multiple?[]:"",!1))}i[fi]=a}catch(n){jc(e,e.return,n)}}break;case 6:if(gl(n,e),xl(e),4&r){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(n){jc(e,e.return,n)}}break;case 3:if(gl(n,e),xl(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Un(n.containerInfo)}catch(n){jc(e,e.return,n)}break;case 4:default:gl(n,e),xl(e);break;case 13:gl(n,e),xl(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(Vl=Ke())),4&r&&hl(e);break;case 22:if(d=null!==t&&null!==t.memoizedState,1&e.mode?(Xs=(u=Xs)||d,gl(n,e),Xs=u):gl(n,e),xl(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&1&e.mode)for(Js=e,d=e.child;null!==d;){for(p=Js=d;null!==Js;){switch(h=(f=Js).child,f.tag){case 0:case 11:case 14:case 15:tl(4,f,f.return);break;case 1:Zs(f,f.return);var g=f.stateNode;if("function"==typeof g.componentWillUnmount){r=f,t=f.return;try{n=r,g.props=n.memoizedProps,g.state=n.memoizedState,g.componentWillUnmount()}catch(e){jc(r,t,e)}}break;case 5:Zs(f,f.return);break;case 22:if(null!==f.memoizedState){wl(p);continue}}null!==h?(h.return=f,Js=h):wl(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{i=p.stateNode,u?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=p.stateNode,s=null!=(c=p.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=ge("display",s))}catch(n){jc(e,e.return,n)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=u?"":p.memoizedProps}catch(n){jc(e,e.return,n)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:gl(n,e),xl(e),4&r&&hl(e);case 21:}}function xl(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(al(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(pe(i,""),r.flags&=-33),cl(e,sl(e),i);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(o(161))}}catch(n){jc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function vl(e,n,t){Js=e,yl(e,n,t)}function yl(e,n,t){for(var r=!!(1&e.mode);null!==Js;){var i=Js,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Qs;if(!a){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Xs;s=Qs;var c=Xs;if(Qs=a,(Xs=l)&&!c)for(Js=i;null!==Js;)l=(a=Js).child,22===a.tag&&null!==a.memoizedState?kl(i):null!==l?(l.return=a,Js=l):kl(i);for(;null!==o;)Js=o,yl(o,n,t),o=o.sibling;Js=i,Qs=s,Xs=c}bl(e)}else 8772&i.subtreeFlags&&null!==o?(o.return=i,Js=o):bl(e)}}function bl(e){for(;null!==Js;){var n=Js;if(8772&n.flags){var t=n.alternate;try{if(8772&n.flags)switch(n.tag){case 0:case 11:case 15:Xs||rl(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Xs)if(null===t)r.componentDidMount();else{var i=n.elementType===n.type?t.memoizedProps:ts(n.type,t.memoizedProps);r.componentDidUpdate(i,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=n.updateQueue;null!==a&&qo(n,a,r);break;case 3:var s=n.updateQueue;if(null!==s){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}qo(n,s,t)}break;case 5:var l=n.stateNode;if(null===t&&4&n.flags){t=l;var c=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&t.focus();break;case"img":c.src&&(t.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var u=n.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&Un(p)}}}break;default:throw Error(o(163))}Xs||512&n.flags&&il(n)}catch(e){jc(n,n.return,e)}}if(n===e){Js=null;break}if(null!==(t=n.sibling)){t.return=n.return,Js=t;break}Js=n.return}}function wl(e){for(;null!==Js;){var n=Js;if(n===e){Js=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Js=t;break}Js=n.return}}function kl(e){for(;null!==Js;){var n=Js;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{rl(4,n)}catch(e){jc(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var i=n.return;try{r.componentDidMount()}catch(e){jc(n,i,e)}}var o=n.return;try{il(n)}catch(e){jc(n,o,e)}break;case 5:var a=n.return;try{il(n)}catch(e){jc(n,a,e)}}}catch(e){jc(n,n.return,e)}if(n===e){Js=null;break}var s=n.sibling;if(null!==s){s.return=n.return,Js=s;break}Js=n.return}}var Sl,jl=Math.ceil,El=b.ReactCurrentDispatcher,Cl=b.ReactCurrentOwner,_l=b.ReactCurrentBatchConfig,Ol=0,Fl=null,Pl=null,Tl=0,zl=0,Al=ji(0),Ll=0,Ml=null,Nl=0,Rl=0,Dl=0,Bl=null,Il=null,Vl=0,$l=1/0,Ul=null,ql=!1,Hl=null,Wl=null,Gl=!1,Yl=null,Ql=0,Xl=0,Kl=null,Jl=-1,Zl=0;function ec(){return 6&Ol?Ke():-1!==Jl?Jl:Jl=Ke()}function nc(e){return 1&e.mode?2&Ol&&0!==Tl?Tl&-Tl:null!==mo.transition?(0===Zl&&(Zl=mn()),Zl):0!==(e=bn)?e:e=void 0===(e=window.event)?16:Kn(e.type):1}function tc(e,n,t,r){if(50<Xl)throw Xl=0,Kl=null,Error(o(185));vn(e,t,r),2&Ol&&e===Fl||(e===Fl&&(!(2&Ol)&&(Rl|=t),4===Ll&&sc(e,Tl)),rc(e,r),1===t&&0===Ol&&!(1&n.mode)&&($l=Ke()+500,Bi&&$i()))}function rc(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-sn(o),s=1<<a,l=i[a];-1===l?s&t&&!(s&r)||(i[a]=hn(s,n)):l<=n&&(e.expiredLanes|=s),o&=~s}}(e,n);var r=fn(e,e===Fl?Tl:0);if(0===r)null!==t&&Ye(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ye(t),1===n)0===e.tag?function(e){Bi=!0,Vi(e)}(lc.bind(null,e)):Vi(lc.bind(null,e)),ai((function(){!(6&Ol)&&$i()})),t=null;else{switch(wn(r)){case 1:t=Ze;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Fc(t,ic.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ic(e,n){if(Jl=-1,Zl=0,6&Ol)throw Error(o(327));var t=e.callbackNode;if(kc()&&e.callbackNode!==t)return null;var r=fn(e,e===Fl?Tl:0);if(0===r)return null;if(30&r||r&e.expiredLanes||n)n=mc(e,r);else{n=r;var i=Ol;Ol|=2;var a=hc();for(Fl===e&&Tl===n||(Ul=null,$l=Ke()+500,pc(e,n));;)try{vc();break}catch(n){fc(e,n)}_o(),El.current=a,Ol=i,null!==Pl?n=0:(Fl=null,Tl=0,n=Ll)}if(0!==n){if(2===n&&0!==(i=gn(e))&&(r=i,n=oc(e,i)),1===n)throw t=Ml,pc(e,0),sc(e,r),rc(e,Ke()),t;if(6===n)sc(e,r);else{if(i=e.current.alternate,!(30&r||function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var i=t[r],o=i.getSnapshot;i=i.value;try{if(!sr(o(),i))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(i)||(n=mc(e,r),2===n&&(a=gn(e),0!==a&&(r=a,n=oc(e,a))),1!==n)))throw t=Ml,pc(e,0),sc(e,r),rc(e,Ke()),t;switch(e.finishedWork=i,e.finishedLanes=r,n){case 0:case 1:throw Error(o(345));case 2:case 5:wc(e,Il,Ul);break;case 3:if(sc(e,r),(130023424&r)===r&&10<(n=Vl+500-Ke())){if(0!==fn(e,0))break;if(((i=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(wc.bind(null,e,Il,Ul),n);break}wc(e,Il,Ul);break;case 4:if(sc(e,r),(4194240&r)===r)break;for(n=e.eventTimes,i=-1;0<r;){var s=31-sn(r);a=1<<s,(s=n[s])>i&&(i=s),r&=~a}if(r=i,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*jl(r/1960))-r)){e.timeoutHandle=ri(wc.bind(null,e,Il,Ul),r);break}wc(e,Il,Ul);break;default:throw Error(o(329))}}}return rc(e,Ke()),e.callbackNode===t?ic.bind(null,e):null}function oc(e,n){var t=Bl;return e.current.memoizedState.isDehydrated&&(pc(e,n).flags|=256),2!==(e=mc(e,n))&&(n=Il,Il=t,null!==n&&ac(n)),e}function ac(e){null===Il?Il=e:Il.push.apply(Il,e)}function sc(e,n){for(n&=~Dl,n&=~Rl,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-sn(n),r=1<<t;e[t]=-1,n&=~r}}function lc(e){if(6&Ol)throw Error(o(327));kc();var n=fn(e,0);if(!(1&n))return rc(e,Ke()),null;var t=mc(e,n);if(0!==e.tag&&2===t){var r=gn(e);0!==r&&(n=r,t=oc(e,r))}if(1===t)throw t=Ml,pc(e,0),sc(e,n),rc(e,Ke()),t;if(6===t)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,wc(e,Il,Ul),rc(e,Ke()),null}function cc(e,n){var t=Ol;Ol|=1;try{return e(n)}finally{0===(Ol=t)&&($l=Ke()+500,Bi&&$i())}}function uc(e){null!==Yl&&0===Yl.tag&&!(6&Ol)&&kc();var n=Ol;Ol|=1;var t=_l.transition,r=bn;try{if(_l.transition=null,bn=1,e)return e()}finally{bn=r,_l.transition=t,!(6&(Ol=n))&&$i()}}function dc(){zl=Al.current,Ei(Al)}function pc(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,ii(t)),null!==Pl)for(t=Pl.return;null!==t;){var r=t;switch(no(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ai();break;case 3:Ko(),Ei(Fi),Ei(Oi),ra();break;case 5:Zo(r);break;case 4:Ko();break;case 13:case 19:Ei(ea);break;case 10:Oo(r.type._context);break;case 22:case 23:dc()}t=t.return}if(Fl=e,Pl=e=Ac(e.current,null),Tl=zl=n,Ll=0,Ml=null,Dl=Rl=Nl=0,Il=Bl=null,null!==zo){for(n=0;n<zo.length;n++)if(null!==(r=(t=zo[n]).interleaved)){t.interleaved=null;var i=r.next,o=t.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}t.pending=r}zo=null}return e}function fc(e,n){for(;;){var t=Pl;try{if(_o(),ia.current=Ja,ua){for(var r=sa.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}ua=!1}if(aa=0,ca=la=sa=null,da=!1,pa=0,Cl.current=null,null===t||null===t.return){Ll=1,Ml=n,Pl=null;break}e:{var a=e,s=t.return,l=t,c=n;if(n=Tl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,p=d.tag;if(!(1&d.mode||0!==p&&11!==p&&15!==p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=ms(s);if(null!==h){h.flags&=-257,xs(h,s,l,0,n),1&h.mode&&gs(a,u,n),c=u;var g=(n=h).updateQueue;if(null===g){var m=new Set;m.add(c),n.updateQueue=m}else g.add(c);break e}if(!(1&n)){gs(a,u,n),gc();break e}c=Error(o(426))}else if(io&&1&l.mode){var x=ms(s);if(null!==x){!(65536&x.flags)&&(x.flags|=256),xs(x,s,l,0,n),go(cs(c,l));break e}}a=c=cs(c,l),4!==Ll&&(Ll=2),null===Bl?Bl=[a]:Bl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,n&=-n,a.lanes|=n,$o(a,fs(0,c,n));break e;case 1:l=c;var v=a.type,y=a.stateNode;if(!(128&a.flags||"function"!=typeof v.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Wl&&Wl.has(y)))){a.flags|=65536,n&=-n,a.lanes|=n,$o(a,hs(a,l,n));break e}}a=a.return}while(null!==a)}bc(t)}catch(e){n=e,Pl===t&&null!==t&&(Pl=t=t.return);continue}break}}function hc(){var e=El.current;return El.current=Ja,null===e?Ja:e}function gc(){0!==Ll&&3!==Ll&&2!==Ll||(Ll=4),null===Fl||!(268435455&Nl)&&!(268435455&Rl)||sc(Fl,Tl)}function mc(e,n){var t=Ol;Ol|=2;var r=hc();for(Fl===e&&Tl===n||(Ul=null,pc(e,n));;)try{xc();break}catch(n){fc(e,n)}if(_o(),Ol=t,El.current=r,null!==Pl)throw Error(o(261));return Fl=null,Tl=0,Ll}function xc(){for(;null!==Pl;)yc(Pl)}function vc(){for(;null!==Pl&&!Qe();)yc(Pl)}function yc(e){var n=Sl(e.alternate,e,zl);e.memoizedProps=e.pendingProps,null===n?bc(e):Pl=n,Cl.current=null}function bc(e){var n=e;do{var t=n.alternate;if(e=n.return,32768&n.flags){if(null!==(t=Ys(t,n)))return t.flags&=32767,void(Pl=t);if(null===e)return Ll=6,void(Pl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(t=Gs(t,n,zl)))return void(Pl=t);if(null!==(n=n.sibling))return void(Pl=n);Pl=n=e}while(null!==n);0===Ll&&(Ll=5)}function wc(e,n,t){var r=bn,i=_l.transition;try{_l.transition=null,bn=1,function(e,n,t,r){do{kc()}while(null!==Yl);if(6&Ol)throw Error(o(327));t=e.finishedWork;var i=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var i=31-sn(t),o=1<<i;n[i]=0,r[i]=-1,e[i]=-1,t&=~o}}(e,a),e===Fl&&(Pl=Fl=null,Tl=0),!(2064&t.subtreeFlags)&&!(2064&t.flags)||Gl||(Gl=!0,Fc(nn,(function(){return kc(),null}))),a=!!(15990&t.flags),15990&t.subtreeFlags||a){a=_l.transition,_l.transition=null;var s=bn;bn=1;var l=Ol;Ol|=4,Cl.current=null,function(e,n){if(ei=Hn,fr(e=pr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var s=0,l=-1,c=-1,u=0,d=0,p=e,f=null;n:for(;;){for(var h;p!==t||0!==i&&3!==p.nodeType||(l=s+i),p!==a||0!==r&&3!==p.nodeType||(c=s+r),3===p.nodeType&&(s+=p.nodeValue.length),null!==(h=p.firstChild);)f=p,p=h;for(;;){if(p===e)break n;if(f===t&&++u===i&&(l=s),f===a&&++d===r&&(c=s),null!==(h=p.nextSibling))break;f=(p=f).parentNode}p=h}t=-1===l||-1===c?null:{start:l,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(ni={focusedElem:e,selectionRange:t},Hn=!1,Js=n;null!==Js;)if(e=(n=Js).child,1028&n.subtreeFlags&&null!==e)e.return=n,Js=e;else for(;null!==Js;){n=Js;try{var g=n.alternate;if(1024&n.flags)switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,x=g.memoizedState,v=n.stateNode,y=v.getSnapshotBeforeUpdate(n.elementType===n.type?m:ts(n.type,m),x);v.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var b=n.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(o(163))}}catch(e){jc(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Js=e;break}Js=n.return}g=nl,nl=!1}(e,t),ml(t,e),hr(ni),Hn=!!ei,ni=ei=null,e.current=t,vl(t,e,i),Xe(),Ol=l,bn=s,_l.transition=a}else e.current=t;if(Gl&&(Gl=!1,Yl=e,Ql=i),0===(a=e.pendingLanes)&&(Wl=null),function(e){if(an&&"function"==typeof an.onCommitFiberRoot)try{an.onCommitFiberRoot(on,e,void 0,!(128&~e.current.flags))}catch(e){}}(t.stateNode),rc(e,Ke()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((i=n[t]).value,{componentStack:i.stack,digest:i.digest});if(ql)throw ql=!1,e=Hl,Hl=null,e;!!(1&Ql)&&0!==e.tag&&kc(),1&(a=e.pendingLanes)?e===Kl?Xl++:(Xl=0,Kl=e):Xl=0,$i()}(e,n,t,r)}finally{_l.transition=i,bn=r}return null}function kc(){if(null!==Yl){var e=wn(Ql),n=_l.transition,t=bn;try{if(_l.transition=null,bn=16>e?16:e,null===Yl)var r=!1;else{if(e=Yl,Yl=null,Ql=0,6&Ol)throw Error(o(331));var i=Ol;for(Ol|=4,Js=e.current;null!==Js;){var a=Js,s=a.child;if(16&Js.flags){var l=a.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Js=u;null!==Js;){var d=Js;switch(d.tag){case 0:case 11:case 15:tl(8,d,a)}var p=d.child;if(null!==p)p.return=d,Js=p;else for(;null!==Js;){var f=(d=Js).sibling,h=d.return;if(ol(d),d===u){Js=null;break}if(null!==f){f.return=h,Js=f;break}Js=h}}}var g=a.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var x=m.sibling;m.sibling=null,m=x}while(null!==m)}}Js=a}}if(2064&a.subtreeFlags&&null!==s)s.return=a,Js=s;else e:for(;null!==Js;){if(2048&(a=Js).flags)switch(a.tag){case 0:case 11:case 15:tl(9,a,a.return)}var v=a.sibling;if(null!==v){v.return=a.return,Js=v;break e}Js=a.return}}var y=e.current;for(Js=y;null!==Js;){var b=(s=Js).child;if(2064&s.subtreeFlags&&null!==b)b.return=s,Js=b;else e:for(s=y;null!==Js;){if(2048&(l=Js).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){jc(l,l.return,e)}if(l===s){Js=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Js=w;break e}Js=l.return}}if(Ol=i,$i(),an&&"function"==typeof an.onPostCommitFiberRoot)try{an.onPostCommitFiberRoot(on,e)}catch(e){}r=!0}return r}finally{bn=t,_l.transition=n}}return!1}function Sc(e,n,t){e=Io(e,n=fs(0,n=cs(t,n),1),1),n=ec(),null!==e&&(vn(e,1,n),rc(e,n))}function jc(e,n,t){if(3===e.tag)Sc(e,e,t);else for(;null!==n;){if(3===n.tag){Sc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r))){n=Io(n,e=hs(n,e=cs(t,e),1),1),e=ec(),null!==n&&(vn(n,1,e),rc(n,e));break}}n=n.return}}function Ec(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ec(),e.pingedLanes|=e.suspendedLanes&t,Fl===e&&(Tl&t)===t&&(4===Ll||3===Ll&&(130023424&Tl)===Tl&&500>Ke()-Vl?pc(e,0):Dl|=t),rc(e,n)}function Cc(e,n){0===n&&(1&e.mode?(n=dn,!(130023424&(dn<<=1))&&(dn=4194304)):n=1);var t=ec();null!==(e=Mo(e,n))&&(vn(e,n,t),rc(e,t))}function _c(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Cc(e,t)}function Oc(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(t=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(n),Cc(e,t)}function Fc(e,n){return Ge(e,n)}function Pc(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tc(e,n,t,r){return new Pc(e,n,t,r)}function zc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ac(e,n){var t=e.alternate;return null===t?((t=Tc(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Lc(e,n,t,r,i,a){var s=2;if(r=e,"function"==typeof e)zc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Mc(t.children,i,a,n);case j:s=8,i|=8;break;case E:return(e=Tc(12,t,n,2|i)).elementType=E,e.lanes=a,e;case F:return(e=Tc(13,t,n,i)).elementType=F,e.lanes=a,e;case P:return(e=Tc(19,t,n,i)).elementType=P,e.lanes=a,e;case A:return Nc(t,i,a,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case _:s=9;break e;case O:s=11;break e;case T:s=14;break e;case z:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(n=Tc(s,t,n,i)).elementType=e,n.type=r,n.lanes=a,n}function Mc(e,n,t,r){return(e=Tc(7,e,r,n)).lanes=t,e}function Nc(e,n,t,r){return(e=Tc(22,e,r,n)).elementType=A,e.lanes=t,e.stateNode={isHidden:!1},e}function Rc(e,n,t){return(e=Tc(6,e,null,n)).lanes=t,e}function Dc(e,n,t){return(n=Tc(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Bc(e,n,t,r,i){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=xn(0),this.expirationTimes=xn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=xn(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Ic(e,n,t,r,i,o,a,s,l){return e=new Bc(e,n,t,s,l),1===n?(n=1,!0===o&&(n|=8)):n=0,o=Tc(3,null,null,n),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ro(o),e}function Vc(e){if(!e)return _i;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(zi(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(o(171))}if(1===e.tag){var t=e.type;if(zi(t))return Mi(e,t,n)}return n}function $c(e,n,t,r,i,o,a,s,l){return(e=Ic(t,r,!0,e,0,o,0,s,l)).context=Vc(null),t=e.current,(o=Bo(r=ec(),i=nc(t))).callback=null!=n?n:null,Io(t,o,i),e.current.lanes=i,vn(e,i,r),rc(e,r),e}function Uc(e,n,t,r){var i=n.current,o=ec(),a=nc(i);return t=Vc(t),null===n.context?n.context=t:n.pendingContext=t,(n=Bo(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Io(i,n,a))&&(tc(e,i,a,o),Vo(e,i,a)),a}function qc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hc(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Wc(e,n){Hc(e,n),(e=e.alternate)&&Hc(e,n)}Sl=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Fi.current)ys=!0;else{if(!(e.lanes&t||128&n.flags))return ys=!1,function(e,n,t){switch(n.tag){case 3:Fs(n),ho();break;case 5:Jo(n);break;case 1:zi(n.type)&&Ni(n);break;case 4:Xo(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,i=n.memoizedProps.value;Ci(So,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(Ci(ea,1&ea.current),n.flags|=128,null):t&n.child.childLanes?Rs(e,n,t):(Ci(ea,1&ea.current),null!==(e=qs(e,n,t))?e.sibling:null);Ci(ea,1&ea.current);break;case 19:if(r=!!(t&n.childLanes),128&e.flags){if(r)return $s(e,n,t);n.flags|=128}if(null!==(i=n.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Ci(ea,ea.current),r)break;return null;case 22:case 23:return n.lanes=0,js(e,n,t)}return qs(e,n,t)}(e,n,t);ys=!!(131072&e.flags)}else ys=!1,io&&1048576&n.flags&&Zi(n,Wi,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Us(e,n),e=n.pendingProps;var i=Ti(n,Oi.current);Po(n,t),i=ma(null,n,r,e,i,t);var a=xa();return n.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,zi(r)?(a=!0,Ni(n)):a=!1,n.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Ro(n),i.updater=is,n.stateNode=i,i._reactInternals=n,ls(n,r,e,t),n=Os(null,n,r,!0,a,t)):(n.tag=0,io&&a&&eo(n),bs(null,n,i,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Us(e,n),e=n.pendingProps,r=(i=r._init)(r._payload),n.type=r,i=n.tag=function(e){if("function"==typeof e)return zc(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===T)return 14}return 2}(r),e=ts(r,e),i){case 0:n=Cs(null,n,r,e,t);break e;case 1:n=_s(null,n,r,e,t);break e;case 11:n=ws(null,n,r,e,t);break e;case 14:n=ks(null,n,r,ts(r.type,e),t);break e}throw Error(o(306,r,""))}return n;case 0:return r=n.type,i=n.pendingProps,Cs(e,n,r,i=n.elementType===r?i:ts(r,i),t);case 1:return r=n.type,i=n.pendingProps,_s(e,n,r,i=n.elementType===r?i:ts(r,i),t);case 3:e:{if(Fs(n),null===e)throw Error(o(387));r=n.pendingProps,i=(a=n.memoizedState).element,Do(e,n),Uo(n,r,null,t);var s=n.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){n=Ps(e,n,r,t,i=cs(Error(o(423)),n));break e}if(r!==i){n=Ps(e,n,r,t,i=cs(Error(o(424)),n));break e}for(ro=ci(n.stateNode.containerInfo.firstChild),to=n,io=!0,oo=null,t=ko(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(ho(),r===i){n=qs(e,n,t);break e}bs(e,n,r,t)}n=n.child}return n;case 5:return Jo(n),null===e&&co(n),r=n.type,i=n.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,ti(r,i)?s=null:null!==a&&ti(r,a)&&(n.flags|=32),Es(e,n),bs(e,n,s,t),n.child;case 6:return null===e&&co(n),null;case 13:return Rs(e,n,t);case 4:return Xo(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=wo(n,null,r,t):bs(e,n,r,t),n.child;case 11:return r=n.type,i=n.pendingProps,ws(e,n,r,i=n.elementType===r?i:ts(r,i),t);case 7:return bs(e,n,n.pendingProps,t),n.child;case 8:case 12:return bs(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,i=n.pendingProps,a=n.memoizedProps,s=i.value,Ci(So,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===i.children&&!Fi.current){n=qs(e,n,t);break e}}else for(null!==(a=n.child)&&(a.return=n);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=Bo(-1,t&-t)).tag=2;var u=a.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}a.lanes|=t,null!==(c=a.alternate)&&(c.lanes|=t),Fo(a.return,t,n),l.lanes|=t;break}c=c.next}}else if(10===a.tag)s=a.type===n.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=t,null!==(l=s.alternate)&&(l.lanes|=t),Fo(s,t,n),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===n){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}bs(e,n,i.children,t),n=n.child}return n;case 9:return i=n.type,r=n.pendingProps.children,Po(n,t),r=r(i=To(i)),n.flags|=1,bs(e,n,r,t),n.child;case 14:return i=ts(r=n.type,n.pendingProps),ks(e,n,r,i=ts(r.type,i),t);case 15:return Ss(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,i=n.pendingProps,i=n.elementType===r?i:ts(r,i),Us(e,n),n.tag=1,zi(r)?(e=!0,Ni(n)):e=!1,Po(n,t),as(n,r,i),ls(n,r,i,t),Os(null,n,r,!0,e,t);case 19:return $s(e,n,t);case 22:return js(e,n,t)}throw Error(o(156,n.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function Zc(e,n,t,r,i){var o=t._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var e=qc(a);s.call(e)}}Uc(n,a,e,i)}else a=function(e,n,t,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var e=qc(a);o.call(e)}}var a=$c(n,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=a,e[hi]=a.current,$r(8===e.nodeType?e.parentNode:e),uc(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=qc(l);s.call(e)}}var l=Ic(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=l,e[hi]=l.current,$r(8===e.nodeType?e.parentNode:e),uc((function(){Uc(n,l,t,r)})),l}(t,n,e,i,r);return qc(a)}Qc.prototype.render=Yc.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));Uc(e,n,null,null)},Qc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;uc((function(){Uc(null,e,null,null)})),n[hi]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var n=En();e={blockedOn:null,target:e,priority:n};for(var t=0;t<Ln.length&&0!==n&&n<Ln[t].priority;t++);Ln.splice(t,0,e),0===t&&Dn(e)}},kn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=pn(n.pendingLanes);0!==t&&(yn(n,1|t),rc(n,Ke()),!(6&Ol)&&($l=Ke()+500,$i()))}break;case 13:uc((function(){var n=Mo(e,1);if(null!==n){var t=ec();tc(n,e,1,t)}})),Wc(e,1)}},Sn=function(e){if(13===e.tag){var n=Mo(e,134217728);null!==n&&tc(n,e,134217728,ec()),Wc(e,134217728)}},jn=function(e){if(13===e.tag){var n=nc(e),t=Mo(e,n);null!==t&&tc(t,e,n,ec()),Wc(e,n)}},En=function(){return bn},Cn=function(e,n){var t=bn;try{return bn=e,n()}finally{bn=t}},ke=function(e,n,t){switch(n){case"input":if(J(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var i=wi(r);if(!i)throw Error(o(90));G(r),J(r,i)}}}break;case"textarea":oe(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Oe=cc,Fe=uc;var eu={usingClientEntryPoint:!1,Events:[yi,bi,wi,Ce,_e,cc]},nu={findFiberByHostInstance:vi,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},tu={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{on=ru.inject(tu),an=ru}catch(ue){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(n))throw Error(o(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Xc(e))throw Error(o(299));var t=!1,r="",i=Gc;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),n=Ic(e,1,!1,null,0,t,0,r,i),e[hi]=n.current,$r(8===e.nodeType?e.parentNode:e),new Yc(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(n))?null:e.stateNode},n.flushSync=function(e){return uc(e)},n.hydrate=function(e,n,t){if(!Kc(n))throw Error(o(200));return Zc(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Xc(e))throw Error(o(405));var r=null!=t&&t.hydratedSources||null,i=!1,a="",s=Gc;if(null!=t&&(!0===t.unstable_strictMode&&(i=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(s=t.onRecoverableError)),n=$c(n,null,e,1,null!=t?t:null,i,0,a,s),e[hi]=n.current,$r(e),r)for(e=0;e<r.length;e++)i=(i=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i);return new Qc(n)},n.render=function(e,n,t){if(!Kc(n))throw Error(o(200));return Zc(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Kc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc((function(){Zc(null,null,e,!1,(function(){e._reactRootContainer=null,e[hi]=null}))})),!0)},n.unstable_batchedUpdates=cc,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Kc(t))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zc(e,n,t,!1,r)},n.version="18.3.1-next-f1338f8080-20240426"},338:(e,n,t)=>{"use strict";var r=t(961);n.H=r.createRoot,r.hydrateRoot},961:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(551)},844:(e,n,t)=>{e.exports=t(200)},200:(e,n,t)=>{"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var i=t(540),o=r(i),a=t(961);t(556);var s=r(t(311));function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}function u(e){return requestAnimationFrame(e)}function d(e){cancelAnimationFrame(e)}function p(e){var n=e.ownerDocument;return n.hasFocus()&&n.activeElement===e}function f(e){return null==e?void 0:e.ownerDocument}function h(e){return i.useCallback((function(){var n=e.current,t="undefined"!=typeof window&&function(e){var n=function(e){var n;return null==(n=f(e))?void 0:n.defaultView}(e);return!!n&&e instanceof n.HTMLElement}(n);if(!n||!t)return null;if("INPUT"!==n.nodeName&&(n=n.querySelector("input")),!n)throw new Error("react-input-mask: inputComponent doesn't contain input node");return n}),[e])}function g(e,n){var t,r,o,a,s=i.useRef({start:null,end:null}),l=h(e),c=i.useCallback((function(){return function(e){var n=e.selectionStart,t=e.selectionEnd;return{start:n,end:t,length:t-n}}(l())}),[l]),f=i.useCallback((function(){return s.current}),[]),g=i.useCallback((function(e){var n=l();n&&p(n)&&(function(e,n,t){void 0===t&&(t=n),e.setSelectionRange(n,t)}(n,e.start,e.end),s.current=c())}),[l,c]),m=i.useCallback((function(){s.current=c()}),[c]),x=(t=m,r=i.useRef(null),o=i.useCallback((function(){null===r.current&&function e(){t(),r.current=u(e)}()}),[t]),a=i.useCallback((function(){d(r.current),r.current=null}),[]),i.useEffect((function(){r.current&&(a(),o())}),[o,a]),i.useEffect(d,[]),[o,a]),v=x[0],y=x[1];return i.useLayoutEffect((function(){if(n){var e=l();return e.addEventListener("focus",v),e.addEventListener("blur",y),p(e)&&v(),function(){e.removeEventListener("focus",v),e.removeEventListener("blur",y),y()}}})),{getSelection:c,getLastSelection:f,setSelection:g}}function m(e,n){var t=i.useRef(),r=g(t,n),o=r.getSelection,a=r.getLastSelection,s=r.setSelection,l=function(e,n){var t=h(e),r=i.useRef(n);return{getValue:i.useCallback((function(){return t().value}),[t]),getLastValue:i.useCallback((function(){return r.current}),[]),setValue:i.useCallback((function(e){r.current=e;var n=t();n&&(n.value=e)}),[t])}}(t,e),c=l.getValue,u=l.getLastValue,d=l.setValue;return{inputRef:t,getInputState:function(){return{value:c(),selection:o()}},getLastInputState:function(){return{value:u(),selection:a()}},setInputState:function(e){var n=e.value,t=e.selection;d(n),s(t)}}}t(771);var x=["disabled","onBlur","onChange","onFocus","onMouseDown","readOnly","value"],v={9:/[0-9]/,a:/[A-Za-z]/,"*":/[A-Za-z0-9]/},y=function(e){var n=this;this.isCharacterAllowedAtPosition=function(e,t){var r=n.maskOptions.maskPlaceholder;return!!n.isCharacterFillingPosition(e,t)||!!r&&r[t]===e},this.isCharacterFillingPosition=function(e,t){var r=n.maskOptions.mask;if(!e||t>=r.length)return!1;if(!n.isPositionEditable(t))return r[t]===e;var i=r[t];return new RegExp(i).test(e)},this.isPositionEditable=function(e){var t=n.maskOptions,r=t.mask,i=t.permanents;return e<r.length&&-1===i.indexOf(e)},this.isValueEmpty=function(e){return e.split("").every((function(e,t){return!n.isPositionEditable(t)||!n.isCharacterFillingPosition(e,t)}))},this.isValueFilled=function(e){return n.getFilledLength(e)===n.maskOptions.lastEditablePosition+1},this.getDefaultSelectionForValue=function(e){var t=n.getFilledLength(e),r=n.getRightEditablePosition(t);return{start:r,end:r}},this.getFilledLength=function(e){return function(e,n){for(var t=e.length-1;t>=0;t--)if(n(e[t],t))return t;return-1}(e.split(""),(function(e,t){return n.isPositionEditable(t)&&n.isCharacterFillingPosition(e,t)}))+1},this.getStringFillingLengthAtPosition=function(e,t){return e.split("").reduce((function(e,t){return n.insertCharacterAtPosition(e,t,e.length)}),function(e,n){void 0===n&&(n=1);for(var t="",r=0;r<n;r++)t+=" ";return t}(0,t)).length-t},this.getLeftEditablePosition=function(e){for(var t=e;t>=0;t--)if(n.isPositionEditable(t))return t;return null},this.getRightEditablePosition=function(e){for(var t=n.maskOptions.mask,r=e;r<t.length;r++)if(n.isPositionEditable(r))return r;return null},this.formatValue=function(e){var t=n.maskOptions,r=t.maskPlaceholder,i=t.mask;if(!r){for(e=n.insertStringAtPosition("",e,0);e.length<i.length&&!n.isPositionEditable(e.length);)e+=i[e.length];return e}return n.insertStringAtPosition(r,e,0)},this.clearRange=function(e,t,r){if(!r)return e;var i=t+r,o=n.maskOptions,a=o.maskPlaceholder,s=o.mask,l=e.split("").map((function(e,r){var o=n.isPositionEditable(r);return!a&&r>=i&&!o?"":r<t||r>=i?e:o?a?a[r]:"":s[r]})).join("");return n.formatValue(l)},this.insertCharacterAtPosition=function(e,t,r){var i=n.maskOptions,o=i.mask,a=i.maskPlaceholder;if(r>=o.length)return e;var s=n.isCharacterAllowedAtPosition(t,r),l=n.isPositionEditable(r),c=n.getRightEditablePosition(r),u=a&&c?t===a[c]:null,d=e.slice(0,r);return!s&&l||(e=d+(s?t:o[r])),s||l||u||(e=n.insertCharacterAtPosition(e,t,r+1)),e},this.insertStringAtPosition=function(e,t,r){var i=n.maskOptions,o=i.mask,a=i.maskPlaceholder;if(!t||r>=o.length)return e;var s=t.split(""),l=n.isValueFilled(e)||!!a,c=e.slice(r);return e=s.reduce((function(e,t){return n.insertCharacterAtPosition(e,t,e.length)}),e.slice(0,r)),l?e+=c.slice(e.length-r):n.isValueFilled(e)?e+=o.slice(e.length).join(""):e=c.split("").filter((function(e,t){return n.isPositionEditable(r+t)})).reduce((function(e,t){var r=n.getRightEditablePosition(e.length);return null===r?e:(n.isPositionEditable(e.length)||(e+=o.slice(e.length,r).join("")),n.insertCharacterAtPosition(e,t,e.length))}),e),e},this.processChange=function(e,t){var r=n.maskOptions,i=r.mask,o=r.prefix,a=r.lastEditablePosition,s=e.value,l=e.selection,c=t.value,u=t.selection,d=s,p="",f=0,h=0,g=Math.min(u.start,l.start);return l.end>u.start?(p=d.slice(u.start,l.end),h=(f=n.getStringFillingLengthAtPosition(p,g))?u.length:0):d.length<c.length&&(h=c.length-d.length),d=c,h&&(1!==h||u.length||(g=u.start===l.start?n.getRightEditablePosition(l.start):n.getLeftEditablePosition(l.start)),d=n.clearRange(d,g,h)),d=n.insertStringAtPosition(d,p,g),(g+=f)>=i.length?g=i.length:g<o.length&&!f?g=o.length:g>=o.length&&g<a&&f&&(g=n.getRightEditablePosition(g)),{value:d=n.formatValue(d),enteredString:p,selection:{start:g,end:g}}},this.maskOptions=function(e){var n=e.mask,t=e.maskPlaceholder,r=[];if(!n)return{maskPlaceholder:null,mask:null,prefix:null,lastEditablePosition:null,permanents:[]};if("string"==typeof n){var i=!1,o="";n.split("").forEach((function(e){i||"\\"!==e?(!i&&v[e]||r.push(o.length),o+=e,i=!1):i=!0})),n=o.split("").map((function(e,n){return-1===r.indexOf(n)?v[e]:e}))}else n.forEach((function(e,n){"string"==typeof e&&r.push(n)}));t&&(t=1===t.length?n.map((function(e,n){return-1!==r.indexOf(n)?e:t})):t.split(""),r.forEach((function(e){t[e]=n[e]})),t=t.join(""));for(var a=r.filter((function(e,n){return e===n})).map((function(e){return n[e]})).join(""),s=n.length-1;-1!==r.indexOf(s);)s--;return{maskPlaceholder:t,prefix:a,mask:n,lastEditablePosition:s,permanents:r}}(e)},b=function(e){function n(){return e.apply(this,arguments)||this}return function(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,function(e,n){for(var t=Object.getOwnPropertyNames(n),r=0;r<t.length;r++){var i=t[r],o=Object.getOwnPropertyDescriptor(n,i);o&&o.configurable&&void 0===e[i]&&Object.defineProperty(e,i,o)}}(e,n)}(n,e),n.prototype.render=function(){var e=this.props,n=e.children,t=c(e,["children"]);return o.cloneElement(n,t)},n}(o.Component),w=i.forwardRef((function(e,n){var t=e.alwaysShowMask,r=e.children,d=e.mask,g=e.maskPlaceholder,v=e.beforeMaskedStateChange,w=c(e,["alwaysShowMask","children","mask","maskPlaceholder","beforeMaskedStateChange"]);!function(e){var n=e.mask,t=e.maskPlaceholder;n&&t&&1!==t.length&&t.length!==n.length&&s(!1)}(e);var k,S,j=new y({mask:d,maskPlaceholder:g}),E=!!d,C=!w.disabled&&!w.readOnly,_=null!==e.value&&void 0!==e.value,O=(k=E,S=i.useRef(),i.useEffect((function(){S.current=k})),S.current),F=m(function(e){return""+e}((_?e.value:e.defaultValue)||""),E),P=F.inputRef,T=F.getInputState,z=F.setInputState,A=F.getLastInputState,L=h(P);if(E&&_){var M=L(),N=M&&p(M)||t||e.value?j.formatValue(e.value):e.value;v&&(N=v({nextState:{value:N,selection:{start:null,end:null}}}).value),z(l({},A(),{value:N}))}var R=A(),D=R.selection,B=R.value;i.useLayoutEffect((function(){if(E){var e=p(L()),n=D,r=T(),i=l({},r);if(!_){var o=r.value,a=j.formatValue(o),s=j.isValueEmpty(a);!s||e||t?i.value=a:s&&!e&&(i.value="")}e&&!O?i.selection=j.getDefaultSelectionForValue(i.value):_&&e&&n&&null!==n.start&&null!==n.end&&(i.selection=n),v&&(i=v({currentState:r,nextState:i})),z(i)}}));var I=l({},w,{onFocus:function(n){P.current=n.target;var t=T().value;if(E&&!j.isValueFilled(t)){var r=j.formatValue(t),i=j.getDefaultSelectionForValue(r),o={value:r,selection:i};v&&(r=(o=v({currentState:T(),nextState:o})).value,i=o.selection),z(o),r!==t&&e.onChange&&e.onChange(n),u((function(){z(A())}))}e.onFocus&&e.onFocus(n)},onBlur:function(n){var r=T().value,i=A().value;if(E&&!t&&j.isValueEmpty(i)){var o="",a={value:o,selection:{start:null,end:null}};v&&(o=(a=v({currentState:T(),nextState:a})).value),z(a),o!==r&&e.onChange&&e.onChange(n)}e.onBlur&&e.onBlur(n)},onChange:E&&C?function(n){var t=T(),r=A(),i=j.processChange(t,r);v&&(i=v({currentState:t,previousState:r,nextState:i})),z(i),e.onChange&&e.onChange(n)}:e.onChange,onMouseDown:E&&C?function(n){var t=L(),r=T().value,i=f(t);if(!p(t)&&!j.isValueFilled(r)){var o=n.clientX,a=n.clientY,s=(new Date).getTime();i.addEventListener("mouseup",(function e(n){if(i.removeEventListener("mouseup",e),p(t)){var r=Math.abs(n.clientX-o),c=Math.abs(n.clientY-a),u=Math.max(r,c),d=(new Date).getTime()-s;if(u<=10&&d<=200||u<=5&&d<=300){var f=A(),h=l({},f,{selection:j.getDefaultSelectionForValue(f.value)});z(h)}}}))}e.onMouseDown&&e.onMouseDown(n)}:e.onMouseDown,ref:function(e){P.current=a.findDOMNode(e),function(e){return"function"==typeof e}(n)?n(e):null!==n&&"object"==typeof n&&(n.current=e)},value:E&&_?B:e.value});return r?(function(e,n){x.filter((function(t){return null!=n.props[t]&&n.props[t]!==e[t]})).length&&s(!1)}(e,r),o.createElement(b,I,r)):o.createElement("input",I)}));w.displayName="InputMask",w.defaultProps={alwaysShowMask:!1,maskPlaceholder:"_"},e.exports=w},20:(e,n,t)=>{"use strict";var r=t(540),i=Symbol.for("react.element"),o=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var r,o={},c=null,u=null;for(r in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(u=n.ref),n)a.call(n,r)&&!l.hasOwnProperty(r)&&(o[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===o[r]&&(o[r]=n[r]);return{$$typeof:i,type:e,key:c,ref:u,props:o,_owner:s.current}}n.Fragment=o,n.jsx=c,n.jsxs=c},668:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function x(e,n,t){this.props=e,this.context=n,this.refs=m,this.updater=t||h}function v(){}function y(e,n,t){this.props=e,this.context=n,this.refs=m,this.updater=t||h}x.prototype.isReactComponent={},x.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=x.prototype;var b=y.prototype=new v;b.constructor=y,g(b,x.prototype),b.isPureReactComponent=!0;var w=Array.isArray,k=Object.prototype.hasOwnProperty,S={current:null},j={key:!0,ref:!0,__self:!0,__source:!0};function E(e,n,r){var i,o={},a=null,s=null;if(null!=n)for(i in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(a=""+n.key),n)k.call(n,i)&&!j.hasOwnProperty(i)&&(o[i]=n[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:t,type:e,key:a,ref:s,props:o,_owner:S.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var _=/\/+/g;function O(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function F(e,n,i,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return a=a(l=e),e=""===o?"."+O(l,0):o,w(a)?(i="",null!=e&&(i=e.replace(_,"$&/")+"/"),F(a,n,i,"",(function(e){return e}))):null!=a&&(C(a)&&(a=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(_,"$&/")+"/")+e)),n.push(a)),1;if(l=0,o=""===o?".":o+":",w(e))for(var c=0;c<e.length;c++){var u=o+O(s=e[c],c);l+=F(s,n,i,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=F(s=s.value,n,i,u=o+O(s,c++),a);else if("object"===s)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function P(e,n,t){if(null==e)return e;var r=[],i=0;return F(e,r,"","",(function(e){return n.call(t,e,i++)})),r}function T(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var z={current:null},A={transition:null},L={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:A,ReactCurrentOwner:S};function M(){throw Error("act(...) is not supported in production builds of React.")}n.Children={map:P,forEach:function(e,n,t){P(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return P(e,(function(){n++})),n},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=x,n.Fragment=i,n.Profiler=a,n.PureComponent=y,n.StrictMode=o,n.Suspense=u,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,n.act=M,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=g({},e.props),o=e.key,a=e.ref,s=e._owner;if(null!=n){if(void 0!==n.ref&&(a=n.ref,s=S.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in n)k.call(n,c)&&!j.hasOwnProperty(c)&&(i[c]=void 0===n[c]&&void 0!==l?l[c]:n[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}return{$$typeof:t,type:e.type,key:o,ref:a,props:i,_owner:s}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},n.createElement=E,n.createFactory=function(e){var n=E.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=C,n.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:T}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=A.transition;A.transition={};try{e()}finally{A.transition=n}},n.unstable_act=M,n.useCallback=function(e,n){return z.current.useCallback(e,n)},n.useContext=function(e){return z.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return z.current.useDeferredValue(e)},n.useEffect=function(e,n){return z.current.useEffect(e,n)},n.useId=function(){return z.current.useId()},n.useImperativeHandle=function(e,n,t){return z.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return z.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return z.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return z.current.useMemo(e,n)},n.useReducer=function(e,n,t){return z.current.useReducer(e,n,t)},n.useRef=function(e){return z.current.useRef(e)},n.useState=function(e){return z.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return z.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return z.current.useTransition()},n.version="18.3.1"},540:(e,n,t)=>{"use strict";e.exports=t(668)},848:(e,n,t)=>{"use strict";e.exports=t(20)},463:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,i=e[r];if(!(0<o(i,n)))break e;e[r]=n,e[t]=i,t=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,i=e.length,a=i>>>1;r<a;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>o(l,t))c<i&&0>o(u,l)?(e[r]=u,e[c]=t,r=c):(e[r]=l,e[s]=t,r=s);else{if(!(c<i&&0>o(u,t)))break e;e[r]=u,e[c]=t,r=c}}}return n}function o(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;n.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();n.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,p=null,f=3,h=!1,g=!1,m=!1,x="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var n=r(u);null!==n;){if(null===n.callback)i(u);else{if(!(n.startTime<=e))break;i(u),n.sortIndex=n.expirationTime,t(c,n)}n=r(u)}}function w(e){if(m=!1,b(e),!g)if(null!==r(c))g=!0,A(k);else{var n=r(u);null!==n&&L(w,n.startTime-e)}}function k(e,t){g=!1,m&&(m=!1,v(C),C=-1),h=!0;var o=f;try{for(b(t),p=r(c);null!==p&&(!(p.expirationTime>t)||e&&!F());){var a=p.callback;if("function"==typeof a){p.callback=null,f=p.priorityLevel;var s=a(p.expirationTime<=t);t=n.unstable_now(),"function"==typeof s?p.callback=s:p===r(c)&&i(c),b(t)}else i(c);p=r(c)}if(null!==p)var l=!0;else{var d=r(u);null!==d&&L(w,d.startTime-t),l=!1}return l}finally{p=null,f=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,j=!1,E=null,C=-1,_=5,O=-1;function F(){return!(n.unstable_now()-O<_)}function P(){if(null!==E){var e=n.unstable_now();O=e;var t=!0;try{t=E(!0,e)}finally{t?S():(j=!1,E=null)}}else j=!1}if("function"==typeof y)S=function(){y(P)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,z=T.port2;T.port1.onmessage=P,S=function(){z.postMessage(null)}}else S=function(){x(P,0)};function A(e){E=e,j||(j=!0,S())}function L(e,t){C=x((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){g||h||(g=!0,A(k))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return f},n.unstable_getFirstCallbackNode=function(){return r(c)},n.unstable_next=function(e){switch(f){case 1:case 2:case 3:var n=3;break;default:n=f}var t=f;f=n;try{return e()}finally{f=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=f;f=e;try{return n()}finally{f=t}},n.unstable_scheduleCallback=function(e,i,o){var a=n.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(e.sortIndex=o,t(u,e),null===r(c)&&e===r(u)&&(m?(v(C),C=-1):m=!0,L(w,o-a))):(e.sortIndex=s,t(c,e),g||h||(g=!0,A(k))),e},n.unstable_shouldYield=F,n.unstable_wrapCallback=function(e){var n=f;return function(){var t=f;f=n;try{return e.apply(this,arguments)}finally{f=t}}}},982:(e,n,t)=>{"use strict";e.exports=t(463)},833:e=>{e.exports=function(e,n,t,r){var i=t?t.call(r,e,n):void 0;if(void 0!==i)return!!i;if(e===n)return!0;if("object"!=typeof e||!e||"object"!=typeof n||!n)return!1;var o=Object.keys(e),a=Object.keys(n);if(o.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(n),l=0;l<o.length;l++){var c=o[l];if(!s(c))return!1;var u=e[c],d=n[c];if(!1===(i=t?t.call(r,u,d,c):void 0)||void 0===i&&u!==d)return!1}return!0}},771:e=>{"use strict";e.exports=function(){}}},r={};function i(e){var n=r[e];if(void 0!==n)return n.exports;var o=r[e]={exports:{}};return t[e](o,o.exports,i),o.exports}i.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return i.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var o=Object.create(null);i.r(o);var a={};e=e||[null,n({}),n([]),n(n)];for(var s=2&r&&t;"object"==typeof s&&!~e.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>t[e]));return a.default=()=>t,i.d(o,a),o},i.d=(e,n)=>{for(var t in n)i.o(n,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},i.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.p="/",i.nc=void 0,(()=>{"use strict";var e={};i.r(e),i.d(e,{Decoder:()=>Ty,Encoder:()=>Fy,PacketType:()=>Oy,protocol:()=>_y});var n,t=i(848),r=i(338),o=i(540),a=i.t(o,2);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},s.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(n||(n={}));const l="popstate";function c(e,n){if(!1===e||null==e)throw new Error(n)}function u(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function d(e,n){return{usr:e.state,key:e.key,idx:n}}function p(e,n,t,r){return void 0===t&&(t=null),s({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof n?h(n):n,{state:t,key:n&&n.key||r||Math.random().toString(36).substr(2,8)})}function f(e){let{pathname:n="/",search:t="",hash:r=""}=e;return t&&"?"!==t&&(n+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(n+="#"===r.charAt(0)?r:"#"+r),n}function h(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substr(t),e=e.substr(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substr(r),e=e.substr(0,r)),e&&(n.pathname=e)}return n}var g;function m(e,n,t){return void 0===t&&(t="/"),function(e,n,t,r){let i=P(("string"==typeof n?h(n):n).pathname||"/",t);if(null==i)return null;let o=x(e);!function(e){e.sort(((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){return e.length===n.length&&e.slice(0,-1).every(((e,t)=>e===n[t]))?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),n.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e){let n=F(i);a=_(o[e],n,r)}return a}(e,n,t,!1)}function x(e,n,t,r){void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r="");let i=(e,i,o)=>{let a={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:i,route:e};a.relativePath.startsWith("/")&&(c(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let s=L([r,a.relativePath]),l=t.concat(a);e.children&&e.children.length>0&&(c(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+s+'".'),x(e.children,n,l,s)),(null!=e.path||e.index)&&n.push({path:s,score:C(s,e.index),routesMeta:l})};return e.forEach(((e,n)=>{var t;if(""!==e.path&&null!=(t=e.path)&&t.includes("?"))for(let t of v(e.path))i(e,n,t);else i(e,n)})),n}function v(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,i=t.endsWith("?"),o=t.replace(/\?$/,"");if(0===r.length)return i?[o,""]:[o];let a=v(r.join("/")),s=[];return s.push(...a.map((e=>""===e?o:[o,e].join("/")))),i&&s.push(...a),s.map((n=>e.startsWith("/")&&""===n?"/":n))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(g||(g={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const y=/^:[\w-]+$/,b=3,w=2,k=1,S=10,j=-2,E=e=>"*"===e;function C(e,n){let t=e.split("/"),r=t.length;return t.some(E)&&(r+=j),n&&(r+=w),t.filter((e=>!E(e))).reduce(((e,n)=>e+(y.test(n)?b:""===n?k:S)),r)}function _(e,n,t){void 0===t&&(t=!1);let{routesMeta:r}=e,i={},o="/",a=[];for(let e=0;e<r.length;++e){let s=r[e],l=e===r.length-1,c="/"===o?n:n.slice(o.length)||"/",u=O({path:s.relativePath,caseSensitive:s.caseSensitive,end:l},c),d=s.route;if(!u&&l&&t&&!r[r.length-1].route.index&&(u=O({path:s.relativePath,caseSensitive:s.caseSensitive,end:!1},c)),!u)return null;Object.assign(i,u.params),a.push({params:i,pathname:L([o,u.pathname]),pathnameBase:M(L([o,u.pathnameBase])),route:d}),"/"!==u.pathnameBase&&(o=L([o,u.pathnameBase]))}return a}function O(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0),u("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,n,t)=>(r.push({paramName:n,isOptional:null!=t}),t?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),i+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?i+="\\/*$":""!==e&&"/"!==e&&(i+="(?:(?=\\/|$))"),[new RegExp(i,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=n.match(t);if(!i)return null;let o=i[0],a=o.replace(/(.)\/+$/,"$1"),s=i.slice(1),l=r.reduce(((e,n,t)=>{let{paramName:r,isOptional:i}=n;if("*"===r){let e=s[t]||"";a=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const l=s[t];return e[r]=i&&!l?void 0:(l||"").replace(/%2F/g,"/"),e}),{});return{params:l,pathname:o,pathnameBase:a,pattern:e}}function F(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(n){return u(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}function P(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}function T(e,n,t,r){return"Cannot include a '"+e+"' character in a manually specified `to."+n+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+t+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function z(e,n){let t=function(e){return e.filter(((e,n)=>0===n||e.route.path&&e.route.path.length>0))}(e);return n?t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase)):t.map((e=>e.pathnameBase))}function A(e,n,t,r){let i;void 0===r&&(r=!1),"string"==typeof e?i=h(e):(i=s({},e),c(!i.pathname||!i.pathname.includes("?"),T("?","pathname","search",i)),c(!i.pathname||!i.pathname.includes("#"),T("#","pathname","hash",i)),c(!i.search||!i.search.includes("#"),T("#","search","hash",i)));let o,a=""===e||""===i.pathname,l=a?"/":i.pathname;if(null==l)o=t;else{let e=n.length-1;if(!r&&l.startsWith("..")){let n=l.split("/");for(;".."===n[0];)n.shift(),e-=1;i.pathname=n.join("/")}o=e>=0?n[e]:"/"}let u=function(e,n){void 0===n&&(n="/");let{pathname:t,search:r="",hash:i=""}="string"==typeof e?h(e):e,o=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)})),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:o,search:N(r),hash:R(i)}}(i,o),d=l&&"/"!==l&&l.endsWith("/"),p=(a||"."===l)&&t.endsWith("/");return u.pathname.endsWith("/")||!d&&!p||(u.pathname+="/"),u}const L=e=>e.join("/").replace(/\/\/+/g,"/"),M=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),N=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",R=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const D=["post","put","patch","delete"],B=(new Set(D),["get",...D]);function I(){return I=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},I.apply(this,arguments)}new Set(B),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const V=o.createContext(null),$=o.createContext(null),U=o.createContext(null),q=o.createContext(null),H=o.createContext({outlet:null,matches:[],isDataRoute:!1}),W=o.createContext(null);function G(){return null!=o.useContext(q)}function Y(){return G()||c(!1),o.useContext(q).location}function Q(e){o.useContext(U).static||o.useLayoutEffect(e)}function X(){let{isDataRoute:e}=o.useContext(H);return e?function(){let{router:e}=function(){let e=o.useContext(V);return e||c(!1),e}(oe.UseNavigateStable),n=se(ae.UseNavigateStable),t=o.useRef(!1);return Q((()=>{t.current=!0})),o.useCallback((function(r,i){void 0===i&&(i={}),t.current&&("number"==typeof r?e.navigate(r):e.navigate(r,I({fromRouteId:n},i)))}),[e,n])}():function(){G()||c(!1);let e=o.useContext(V),{basename:n,future:t,navigator:r}=o.useContext(U),{matches:i}=o.useContext(H),{pathname:a}=Y(),s=JSON.stringify(z(i,t.v7_relativeSplatPath)),l=o.useRef(!1);return Q((()=>{l.current=!0})),o.useCallback((function(t,i){if(void 0===i&&(i={}),!l.current)return;if("number"==typeof t)return void r.go(t);let o=A(t,JSON.parse(s),a,"path"===i.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:L([n,o.pathname])),(i.replace?r.replace:r.push)(o,i.state,i)}),[n,r,s,a,e])}()}const K=o.createContext(null);function J(){let{matches:e}=o.useContext(H),n=e[e.length-1];return n?n.params:{}}function Z(e,n){let{relative:t}=void 0===n?{}:n,{future:r}=o.useContext(U),{matches:i}=o.useContext(H),{pathname:a}=Y(),s=JSON.stringify(z(i,r.v7_relativeSplatPath));return o.useMemo((()=>A(e,JSON.parse(s),a,"path"===t)),[e,s,a,t])}function ee(e,t,r,i){G()||c(!1);let{navigator:a}=o.useContext(U),{matches:s}=o.useContext(H),l=s[s.length-1],u=l?l.params:{},d=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let p,f=Y();if(t){var g;let e="string"==typeof t?h(t):t;"/"===d||(null==(g=e.pathname)?void 0:g.startsWith(d))||c(!1),p=e}else p=f;let x=p.pathname||"/",v=x;if("/"!==d){let e=d.replace(/^\//,"").split("/");v="/"+x.replace(/^\//,"").split("/").slice(e.length).join("/")}let y=m(e,{pathname:v}),b=function(e,n,t,r){var i;if(void 0===n&&(n=[]),void 0===t&&(t=null),void 0===r&&(r=null),null==e){var a;if(!t)return null;if(t.errors)e=t.matches;else{if(!(null!=(a=r)&&a.v7_partialHydration&&0===n.length&&!t.initialized&&t.matches.length>0))return null;e=t.matches}}let s=e,l=null==(i=t)?void 0:i.errors;if(null!=l){let e=s.findIndex((e=>e.route.id&&void 0!==(null==l?void 0:l[e.route.id])));e>=0||c(!1),s=s.slice(0,Math.min(s.length,e+1))}let u=!1,d=-1;if(t&&r&&r.v7_partialHydration)for(let e=0;e<s.length;e++){let n=s[e];if((n.route.HydrateFallback||n.route.hydrateFallbackElement)&&(d=e),n.route.id){let{loaderData:e,errors:r}=t,i=n.route.loader&&void 0===e[n.route.id]&&(!r||void 0===r[n.route.id]);if(n.route.lazy||i){u=!0,s=d>=0?s.slice(0,d+1):[s[0]];break}}}return s.reduceRight(((e,r,i)=>{let a,c=!1,p=null,f=null;var h;t&&(a=l&&r.route.id?l[r.route.id]:void 0,p=r.route.errorElement||te,u&&(d<0&&0===i?(le[h="route-fallback"]||(le[h]=!0),c=!0,f=null):d===i&&(c=!0,f=r.route.hydrateFallbackElement||null)));let g=n.concat(s.slice(0,i+1)),m=()=>{let n;return n=a?p:c?f:r.route.Component?o.createElement(r.route.Component,null):r.route.element?r.route.element:e,o.createElement(ie,{match:r,routeContext:{outlet:e,matches:g,isDataRoute:null!=t},children:n})};return t&&(r.route.ErrorBoundary||r.route.errorElement||0===i)?o.createElement(re,{location:t.location,revalidation:t.revalidation,component:p,error:a,children:m(),routeContext:{outlet:null,matches:g,isDataRoute:!0}}):m()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:L([d,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?d:L([d,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),s,r,i);return t&&b?o.createElement(q.Provider,{value:{location:I({pathname:"/",search:"",hash:"",state:null,key:"default"},p),navigationType:n.Pop}},b):b}function ne(){let e=function(){var e;let n=o.useContext(W),t=function(){let e=o.useContext($);return e||c(!1),e}(ae.UseRouteError),r=se(ae.UseRouteError);return void 0!==n?n:null==(e=t.errors)?void 0:e[r]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),t=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return o.createElement(o.Fragment,null,o.createElement("h2",null,"Unexpected Application Error!"),o.createElement("h3",{style:{fontStyle:"italic"}},n),t?o.createElement("pre",{style:r},t):null,null)}const te=o.createElement(ne,null);class re extends o.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||"idle"!==n.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return void 0!==this.state.error?o.createElement(H.Provider,{value:this.props.routeContext},o.createElement(W.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ie(e){let{routeContext:n,match:t,children:r}=e,i=o.useContext(V);return i&&i.static&&i.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=t.route.id),o.createElement(H.Provider,{value:n},r)}var oe=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(oe||{}),ae=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ae||{});function se(e){let n=function(){let e=o.useContext(H);return e||c(!1),e}(),t=n.matches[n.matches.length-1];return t.route.id||c(!1),t.route.id}const le={};function ce(e){let{to:n,replace:t,state:r,relative:i}=e;G()||c(!1);let{future:a,static:s}=o.useContext(U),{matches:l}=o.useContext(H),{pathname:u}=Y(),d=X(),p=A(n,z(l,a.v7_relativeSplatPath),u,"path"===i),f=JSON.stringify(p);return o.useEffect((()=>d(JSON.parse(f),{replace:t,state:r,relative:i})),[d,f,i,t,r]),null}function ue(e){return function(e){let n=o.useContext(H).outlet;return n?o.createElement(K.Provider,{value:e},n):n}(e.context)}function de(e){c(!1)}function pe(e){let{basename:t="/",children:r=null,location:i,navigationType:a=n.Pop,navigator:s,static:l=!1,future:u}=e;G()&&c(!1);let d=t.replace(/^\/*/,"/"),p=o.useMemo((()=>({basename:d,navigator:s,static:l,future:I({v7_relativeSplatPath:!1},u)})),[d,u,s,l]);"string"==typeof i&&(i=h(i));let{pathname:f="/",search:g="",hash:m="",state:x=null,key:v="default"}=i,y=o.useMemo((()=>{let e=P(f,d);return null==e?null:{location:{pathname:e,search:g,hash:m,state:x,key:v},navigationType:a}}),[d,f,g,m,x,v,a]);return null==y?null:o.createElement(U.Provider,{value:p},o.createElement(q.Provider,{children:r,value:y}))}function fe(e){let{children:n,location:t}=e;return ee(he(n),t)}function he(e,n){void 0===n&&(n=[]);let t=[];return o.Children.forEach(e,((e,r)=>{if(!o.isValidElement(e))return;let i=[...n,r];if(e.type===o.Fragment)return void t.push.apply(t,he(e.props.children,i));e.type!==de&&c(!1),e.props.index&&e.props.children&&c(!1);let a={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(a.children=he(e.props.children,i)),t.push(a)})),t}a.startTransition,new Promise((()=>{})),o.Component;var ge=function(){return ge=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},ge.apply(this,arguments)};function me(e,n,t){if(t||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var xe=i(833),ve=i.n(xe),ye="-ms-",be="-moz-",we="-webkit-",ke="comm",Se="rule",je="decl",Ee="@import",Ce="@keyframes",_e="@layer",Oe=Math.abs,Fe=String.fromCharCode,Pe=Object.assign;function Te(e){return e.trim()}function ze(e,n){return(e=n.exec(e))?e[0]:e}function Ae(e,n,t){return e.replace(n,t)}function Le(e,n,t){return e.indexOf(n,t)}function Me(e,n){return 0|e.charCodeAt(n)}function Ne(e,n,t){return e.slice(n,t)}function Re(e){return e.length}function De(e){return e.length}function Be(e,n){return n.push(e),e}function Ie(e,n){return e.filter((function(e){return!ze(e,n)}))}var Ve=1,$e=1,Ue=0,qe=0,He=0,We="";function Ge(e,n,t,r,i,o,a,s){return{value:e,root:n,parent:t,type:r,props:i,children:o,line:Ve,column:$e,length:a,return:"",siblings:s}}function Ye(e,n){return Pe(Ge("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},n)}function Qe(e){for(;e.root;)e=Ye(e.root,{children:[e]});Be(e,e.siblings)}function Xe(){return He=qe>0?Me(We,--qe):0,$e--,10===He&&($e=1,Ve--),He}function Ke(){return He=qe<Ue?Me(We,qe++):0,$e++,10===He&&($e=1,Ve++),He}function Je(){return Me(We,qe)}function Ze(){return qe}function en(e,n){return Ne(We,e,n)}function nn(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function tn(e){return Te(en(qe-1,an(91===e?e+2:40===e?e+1:e)))}function rn(e){for(;(He=Je())&&He<33;)Ke();return nn(e)>2||nn(He)>3?"":" "}function on(e,n){for(;--n&&Ke()&&!(He<48||He>102||He>57&&He<65||He>70&&He<97););return en(e,Ze()+(n<6&&32==Je()&&32==Ke()))}function an(e){for(;Ke();)switch(He){case e:return qe;case 34:case 39:34!==e&&39!==e&&an(He);break;case 40:41===e&&an(e);break;case 92:Ke()}return qe}function sn(e,n){for(;Ke()&&e+He!==57&&(e+He!==84||47!==Je()););return"/*"+en(n,qe-1)+"*"+Fe(47===e?e:Ke())}function ln(e){for(;!nn(Je());)Ke();return en(e,qe)}function cn(e,n){for(var t="",r=0;r<e.length;r++)t+=n(e[r],r,e,n)||"";return t}function un(e,n,t,r){switch(e.type){case _e:if(e.children.length)break;case Ee:case je:return e.return=e.return||e.value;case ke:return"";case Ce:return e.return=e.value+"{"+cn(e.children,r)+"}";case Se:if(!Re(e.value=e.props.join(",")))return""}return Re(t=cn(e.children,r))?e.return=e.value+"{"+t+"}":""}function dn(e,n,t){switch(function(e,n){return 45^Me(e,0)?(((n<<2^Me(e,0))<<2^Me(e,1))<<2^Me(e,2))<<2^Me(e,3):0}(e,n)){case 5103:return we+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return we+e+e;case 4789:return be+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return we+e+be+e+ye+e+e;case 5936:switch(Me(e,n+11)){case 114:return we+e+ye+Ae(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return we+e+ye+Ae(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return we+e+ye+Ae(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return we+e+ye+e+e;case 6165:return we+e+ye+"flex-"+e+e;case 5187:return we+e+Ae(e,/(\w+).+(:[^]+)/,we+"box-$1$2"+ye+"flex-$1$2")+e;case 5443:return we+e+ye+"flex-item-"+Ae(e,/flex-|-self/g,"")+(ze(e,/flex-|baseline/)?"":ye+"grid-row-"+Ae(e,/flex-|-self/g,""))+e;case 4675:return we+e+ye+"flex-line-pack"+Ae(e,/align-content|flex-|-self/g,"")+e;case 5548:return we+e+ye+Ae(e,"shrink","negative")+e;case 5292:return we+e+ye+Ae(e,"basis","preferred-size")+e;case 6060:return we+"box-"+Ae(e,"-grow","")+we+e+ye+Ae(e,"grow","positive")+e;case 4554:return we+Ae(e,/([^-])(transform)/g,"$1"+we+"$2")+e;case 6187:return Ae(Ae(Ae(e,/(zoom-|grab)/,we+"$1"),/(image-set)/,we+"$1"),e,"")+e;case 5495:case 3959:return Ae(e,/(image-set\([^]*)/,we+"$1$`$1");case 4968:return Ae(Ae(e,/(.+:)(flex-)?(.*)/,we+"box-pack:$3"+ye+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+we+e+e;case 4200:if(!ze(e,/flex-|baseline/))return ye+"grid-column-align"+Ne(e,n)+e;break;case 2592:case 3360:return ye+Ae(e,"template-","")+e;case 4384:case 3616:return t&&t.some((function(e,t){return n=t,ze(e.props,/grid-\w+-end/)}))?~Le(e+(t=t[n].value),"span",0)?e:ye+Ae(e,"-start","")+e+ye+"grid-row-span:"+(~Le(t,"span",0)?ze(t,/\d+/):+ze(t,/\d+/)-+ze(e,/\d+/))+";":ye+Ae(e,"-start","")+e;case 4896:case 4128:return t&&t.some((function(e){return ze(e.props,/grid-\w+-start/)}))?e:ye+Ae(Ae(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return Ae(e,/(.+)-inline(.+)/,we+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(Re(e)-1-n>6)switch(Me(e,n+1)){case 109:if(45!==Me(e,n+4))break;case 102:return Ae(e,/(.+:)(.+)-([^]+)/,"$1"+we+"$2-$3$1"+be+(108==Me(e,n+3)?"$3":"$2-$3"))+e;case 115:return~Le(e,"stretch",0)?dn(Ae(e,"stretch","fill-available"),n,t)+e:e}break;case 5152:case 5920:return Ae(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(n,t,r,i,o,a,s){return ye+t+":"+r+s+(i?ye+t+"-span:"+(o?a:+a-+r)+s:"")+e}));case 4949:if(121===Me(e,n+6))return Ae(e,":",":"+we)+e;break;case 6444:switch(Me(e,45===Me(e,14)?18:11)){case 120:return Ae(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+we+(45===Me(e,14)?"inline-":"")+"box$3$1"+we+"$2$3$1"+ye+"$2box$3")+e;case 100:return Ae(e,":",":"+ye)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return Ae(e,"scroll-","scroll-snap-")+e}return e}function pn(e,n,t,r){if(e.length>-1&&!e.return)switch(e.type){case je:return void(e.return=dn(e.value,e.length,t));case Ce:return cn([Ye(e,{value:Ae(e.value,"@","@"+we)})],r);case Se:if(e.length)return function(e,n){return e.map(n).join("")}(t=e.props,(function(n){switch(ze(n,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":Qe(Ye(e,{props:[Ae(n,/:(read-\w+)/,":"+be+"$1")]})),Qe(Ye(e,{props:[n]})),Pe(e,{props:Ie(t,r)});break;case"::placeholder":Qe(Ye(e,{props:[Ae(n,/:(plac\w+)/,":"+we+"input-$1")]})),Qe(Ye(e,{props:[Ae(n,/:(plac\w+)/,":"+be+"$1")]})),Qe(Ye(e,{props:[Ae(n,/:(plac\w+)/,ye+"input-$1")]})),Qe(Ye(e,{props:[n]})),Pe(e,{props:Ie(t,r)})}return""}))}}function fn(e){return function(e){return We="",e}(hn("",null,null,null,[""],e=function(e){return Ve=$e=1,Ue=Re(We=e),qe=0,[]}(e),0,[0],e))}function hn(e,n,t,r,i,o,a,s,l){for(var c=0,u=0,d=a,p=0,f=0,h=0,g=1,m=1,x=1,v=0,y="",b=i,w=o,k=r,S=y;m;)switch(h=v,v=Ke()){case 40:if(108!=h&&58==Me(S,d-1)){-1!=Le(S+=Ae(tn(v),"&","&\f"),"&\f",Oe(c?s[c-1]:0))&&(x=-1);break}case 34:case 39:case 91:S+=tn(v);break;case 9:case 10:case 13:case 32:S+=rn(h);break;case 92:S+=on(Ze()-1,7);continue;case 47:switch(Je()){case 42:case 47:Be(mn(sn(Ke(),Ze()),n,t,l),l);break;default:S+="/"}break;case 123*g:s[c++]=Re(S)*x;case 125*g:case 59:case 0:switch(v){case 0:case 125:m=0;case 59+u:-1==x&&(S=Ae(S,/\f/g,"")),f>0&&Re(S)-d&&Be(f>32?xn(S+";",r,t,d-1,l):xn(Ae(S," ","")+";",r,t,d-2,l),l);break;case 59:S+=";";default:if(Be(k=gn(S,n,t,c,u,i,s,y,b=[],w=[],d,o),o),123===v)if(0===u)hn(S,n,k,k,b,o,d,s,w);else switch(99===p&&110===Me(S,3)?100:p){case 100:case 108:case 109:case 115:hn(e,k,k,r&&Be(gn(e,k,k,0,0,i,s,y,i,b=[],d,w),w),i,w,d,s,r?b:w);break;default:hn(S,k,k,k,[""],w,0,s,w)}}c=u=f=0,g=x=1,y=S="",d=a;break;case 58:d=1+Re(S),f=h;default:if(g<1)if(123==v)--g;else if(125==v&&0==g++&&125==Xe())continue;switch(S+=Fe(v),v*g){case 38:x=u>0?1:(S+="\f",-1);break;case 44:s[c++]=(Re(S)-1)*x,x=1;break;case 64:45===Je()&&(S+=tn(Ke())),p=Je(),u=d=Re(y=S+=ln(Ze())),v++;break;case 45:45===h&&2==Re(S)&&(g=0)}}return o}function gn(e,n,t,r,i,o,a,s,l,c,u,d){for(var p=i-1,f=0===i?o:[""],h=De(f),g=0,m=0,x=0;g<r;++g)for(var v=0,y=Ne(e,p+1,p=Oe(m=a[g])),b=e;v<h;++v)(b=Te(m>0?f[v]+" "+y:Ae(y,/&\f/g,f[v])))&&(l[x++]=b);return Ge(e,n,t,0===i?Se:s,l,c,u,d)}function mn(e,n,t,r){return Ge(e,n,t,ke,Fe(He),Ne(e,2,-2),0,r)}function xn(e,n,t,r,i){return Ge(e,n,t,je,Ne(e,0,r),Ne(e,r+1,-1),r,i)}var vn={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},yn="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",bn="active",wn="data-styled-version",kn="6.1.12",Sn="/*!sc*/\n",jn="undefined"!=typeof window&&"HTMLElement"in window,En=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),Cn=(new Set,Object.freeze([])),_n=Object.freeze({});var On=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),Fn=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Pn=/(^-|-$)/g;function Tn(e){return e.replace(Fn,"-").replace(Pn,"")}var zn=/(a)(d)/gi,An=52,Ln=function(e){return String.fromCharCode(e+(e>25?39:97))};function Mn(e){var n,t="";for(n=Math.abs(e);n>An;n=n/An|0)t=Ln(n%An)+t;return(Ln(n%An)+t).replace(zn,"$1-$2")}var Nn,Rn=5381,Dn=function(e,n){for(var t=n.length;t;)e=33*e^n.charCodeAt(--t);return e},Bn=function(e){return Dn(Rn,e)};function In(e){return"string"==typeof e&&!0}var Vn="function"==typeof Symbol&&Symbol.for,$n=Vn?Symbol.for("react.memo"):60115,Un=Vn?Symbol.for("react.forward_ref"):60112,qn={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Hn={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Wn={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Gn=((Nn={})[Un]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Nn[$n]=Wn,Nn);function Yn(e){return("type"in(n=e)&&n.type.$$typeof)===$n?Wn:"$$typeof"in e?Gn[e.$$typeof]:qn;var n}var Qn=Object.defineProperty,Xn=Object.getOwnPropertyNames,Kn=Object.getOwnPropertySymbols,Jn=Object.getOwnPropertyDescriptor,Zn=Object.getPrototypeOf,et=Object.prototype;function nt(e,n,t){if("string"!=typeof n){if(et){var r=Zn(n);r&&r!==et&&nt(e,r,t)}var i=Xn(n);Kn&&(i=i.concat(Kn(n)));for(var o=Yn(e),a=Yn(n),s=0;s<i.length;++s){var l=i[s];if(!(l in Hn||t&&t[l]||a&&l in a||o&&l in o)){var c=Jn(n,l);try{Qn(e,l,c)}catch(e){}}}}return e}function tt(e){return"function"==typeof e}function rt(e){return"object"==typeof e&&"styledComponentId"in e}function it(e,n){return e&&n?"".concat(e," ").concat(n):e||n||""}function ot(e,n){if(0===e.length)return"";for(var t=e[0],r=1;r<e.length;r++)t+=n?n+e[r]:e[r];return t}function at(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function st(e,n,t){if(void 0===t&&(t=!1),!t&&!at(e)&&!Array.isArray(e))return n;if(Array.isArray(n))for(var r=0;r<n.length;r++)e[r]=st(e[r],n[r]);else if(at(n))for(var r in n)e[r]=st(e[r],n[r]);return e}function lt(e,n){Object.defineProperty(e,"toString",{value:n})}function ct(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(n.length>0?" Args: ".concat(n.join(", ")):""))}var ut=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var n=0,t=0;t<e;t++)n+=this.groupSizes[t];return n},e.prototype.insertRules=function(e,n){if(e>=this.groupSizes.length){for(var t=this.groupSizes,r=t.length,i=r;e>=i;)if((i<<=1)<0)throw ct(16,"".concat(e));this.groupSizes=new Uint32Array(i),this.groupSizes.set(t),this.length=i;for(var o=r;o<i;o++)this.groupSizes[o]=0}for(var a=this.indexOfGroup(e+1),s=(o=0,n.length);o<s;o++)this.tag.insertRule(a,n[o])&&(this.groupSizes[e]++,a++)},e.prototype.clearGroup=function(e){if(e<this.length){var n=this.groupSizes[e],t=this.indexOfGroup(e),r=t+n;this.groupSizes[e]=0;for(var i=t;i<r;i++)this.tag.deleteRule(t)}},e.prototype.getGroup=function(e){var n="";if(e>=this.length||0===this.groupSizes[e])return n;for(var t=this.groupSizes[e],r=this.indexOfGroup(e),i=r+t,o=r;o<i;o++)n+="".concat(this.tag.getRule(o)).concat(Sn);return n},e}(),dt=new Map,pt=new Map,ft=1,ht=function(e){if(dt.has(e))return dt.get(e);for(;pt.has(ft);)ft++;var n=ft++;return dt.set(e,n),pt.set(n,e),n},gt=function(e,n){ft=n+1,dt.set(e,n),pt.set(n,e)},mt="style[".concat(yn,"][").concat(wn,'="').concat(kn,'"]'),xt=new RegExp("^".concat(yn,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),vt=function(e,n,t){for(var r,i=t.split(","),o=0,a=i.length;o<a;o++)(r=i[o])&&e.registerName(n,r)},yt=function(e,n){for(var t,r=(null!==(t=n.textContent)&&void 0!==t?t:"").split(Sn),i=[],o=0,a=r.length;o<a;o++){var s=r[o].trim();if(s){var l=s.match(xt);if(l){var c=0|parseInt(l[1],10),u=l[2];0!==c&&(gt(u,c),vt(e,u,l[3]),e.getTag().insertRules(c,i)),i.length=0}else i.push(s)}}},bt=function(e){for(var n=document.querySelectorAll(mt),t=0,r=n.length;t<r;t++){var i=n[t];i&&i.getAttribute(yn)!==bn&&(yt(e,i),i.parentNode&&i.parentNode.removeChild(i))}};function wt(){return i.nc}var kt=function(e){var n=document.head,t=e||n,r=document.createElement("style"),i=function(e){var n=Array.from(e.querySelectorAll("style[".concat(yn,"]")));return n[n.length-1]}(t),o=void 0!==i?i.nextSibling:null;r.setAttribute(yn,bn),r.setAttribute(wn,kn);var a=wt();return a&&r.setAttribute("nonce",a),t.insertBefore(r,o),r},St=function(){function e(e){this.element=kt(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets,t=0,r=n.length;t<r;t++){var i=n[t];if(i.ownerNode===e)return i}throw ct(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,n){try{return this.sheet.insertRule(n,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var n=this.sheet.cssRules[e];return n&&n.cssText?n.cssText:""},e}(),jt=function(){function e(e){this.element=kt(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,n){if(e<=this.length&&e>=0){var t=document.createTextNode(n);return this.element.insertBefore(t,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),Et=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,n){return e<=this.length&&(this.rules.splice(e,0,n),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Ct=jn,_t={isServer:!jn,useCSSOMInjection:!En},Ot=function(){function e(e,n,t){void 0===e&&(e=_n),void 0===n&&(n={});var r=this;this.options=ge(ge({},_t),e),this.gs=n,this.names=new Map(t),this.server=!!e.isServer,!this.server&&jn&&Ct&&(Ct=!1,bt(this)),lt(this,(function(){return function(e){for(var n=e.getTag(),t=n.length,r="",i=function(t){var i=function(e){return pt.get(e)}(t);if(void 0===i)return"continue";var o=e.names.get(i),a=n.getGroup(t);if(void 0===o||!o.size||0===a.length)return"continue";var s="".concat(yn,".g").concat(t,'[id="').concat(i,'"]'),l="";void 0!==o&&o.forEach((function(e){e.length>0&&(l+="".concat(e,","))})),r+="".concat(a).concat(s,'{content:"').concat(l,'"}').concat(Sn)},o=0;o<t;o++)i(o);return r}(r)}))}return e.registerId=function(e){return ht(e)},e.prototype.rehydrate=function(){!this.server&&jn&&bt(this)},e.prototype.reconstructWithOptions=function(n,t){return void 0===t&&(t=!0),new e(ge(ge({},this.options),n),this.gs,t&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var n=e.useCSSOMInjection,t=e.target;return e.isServer?new Et(t):n?new St(t):new jt(t)}(this.options),new ut(e)));var e},e.prototype.hasNameForId=function(e,n){return this.names.has(e)&&this.names.get(e).has(n)},e.prototype.registerName=function(e,n){if(ht(e),this.names.has(e))this.names.get(e).add(n);else{var t=new Set;t.add(n),this.names.set(e,t)}},e.prototype.insertRules=function(e,n,t){this.registerName(e,n),this.getTag().insertRules(ht(e),t)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(ht(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),Ft=/&/g,Pt=/^\s*\/\/.*$/gm;function Tt(e,n){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(n," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(n," ")),e.props=e.props.map((function(e){return"".concat(n," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=Tt(e.children,n)),e}))}function zt(e){var n,t,r,i=void 0===e?_n:e,o=i.options,a=void 0===o?_n:o,s=i.plugins,l=void 0===s?Cn:s,c=function(e,r,i){return i.startsWith(t)&&i.endsWith(t)&&i.replaceAll(t,"").length>0?".".concat(n):e},u=l.slice();u.push((function(e){e.type===Se&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(Ft,t).replace(r,c))})),a.prefix&&u.push(pn),u.push(un);var d=function(e,i,o,s){void 0===i&&(i=""),void 0===o&&(o=""),void 0===s&&(s="&"),n=s,t=i,r=new RegExp("\\".concat(t,"\\b"),"g");var l=e.replace(Pt,""),c=fn(o||i?"".concat(o," ").concat(i," { ").concat(l," }"):l);a.namespace&&(c=Tt(c,a.namespace));var d,p,f,h=[];return cn(c,(d=u.concat((f=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&f(e)})),p=De(d),function(e,n,t,r){for(var i="",o=0;o<p;o++)i+=d[o](e,n,t,r)||"";return i})),h};return d.hash=l.length?l.reduce((function(e,n){return n.name||ct(15),Dn(e,n.name)}),Rn).toString():"",d}var At=new Ot,Lt=zt(),Mt=o.createContext({shouldForwardProp:void 0,styleSheet:At,stylis:Lt}),Nt=(Mt.Consumer,o.createContext(void 0));function Rt(){return(0,o.useContext)(Mt)}function Dt(e){var n=(0,o.useState)(e.stylisPlugins),t=n[0],r=n[1],i=Rt().styleSheet,a=(0,o.useMemo)((function(){var n=i;return e.sheet?n=e.sheet:e.target&&(n=n.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[e.disableCSSOMInjection,e.sheet,e.target,i]),s=(0,o.useMemo)((function(){return zt({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:t})}),[e.enableVendorPrefixes,e.namespace,t]);(0,o.useEffect)((function(){ve()(t,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]);var l=(0,o.useMemo)((function(){return{shouldForwardProp:e.shouldForwardProp,styleSheet:a,stylis:s}}),[e.shouldForwardProp,a,s]);return o.createElement(Mt.Provider,{value:l},o.createElement(Nt.Provider,{value:s},e.children))}var Bt=function(){function e(e,n){var t=this;this.inject=function(e,n){void 0===n&&(n=Lt);var r=t.name+n.hash;e.hasNameForId(t.id,r)||e.insertRules(t.id,r,n(t.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=n,lt(this,(function(){throw ct(12,String(t.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=Lt),this.name+e.hash},e}(),It=function(e){return e>="A"&&e<="Z"};function Vt(e){for(var n="",t=0;t<e.length;t++){var r=e[t];if(1===t&&"-"===r&&"-"===e[0])return e;It(r)?n+="-"+r.toLowerCase():n+=r}return n.startsWith("ms-")?"-"+n:n}var $t=function(e){return null==e||!1===e||""===e},Ut=function(e){var n,t,r=[];for(var i in e){var o=e[i];e.hasOwnProperty(i)&&!$t(o)&&(Array.isArray(o)&&o.isCss||tt(o)?r.push("".concat(Vt(i),":"),o,";"):at(o)?r.push.apply(r,me(me(["".concat(i," {")],Ut(o),!1),["}"],!1)):r.push("".concat(Vt(i),": ").concat((n=i,null==(t=o)||"boolean"==typeof t||""===t?"":"number"!=typeof t||0===t||n in vn||n.startsWith("--")?String(t).trim():"".concat(t,"px")),";")))}return r};function qt(e,n,t,r){return $t(e)?[]:rt(e)?[".".concat(e.styledComponentId)]:tt(e)?!tt(i=e)||i.prototype&&i.prototype.isReactComponent||!n?[e]:qt(e(n),n,t,r):e instanceof Bt?t?(e.inject(t,r),[e.getName(r)]):[e]:at(e)?Ut(e):Array.isArray(e)?Array.prototype.concat.apply(Cn,e.map((function(e){return qt(e,n,t,r)}))):[e.toString()];var i}function Ht(e){for(var n=0;n<e.length;n+=1){var t=e[n];if(tt(t)&&!rt(t))return!1}return!0}var Wt=Bn(kn),Gt=function(){function e(e,n,t){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===t||t.isStatic)&&Ht(e),this.componentId=n,this.baseHash=Dn(Wt,n),this.baseStyle=t,Ot.registerId(n)}return e.prototype.generateAndInjectStyles=function(e,n,t){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,n,t):"";if(this.isStatic&&!t.hash)if(this.staticRulesId&&n.hasNameForId(this.componentId,this.staticRulesId))r=it(r,this.staticRulesId);else{var i=ot(qt(this.rules,e,n,t)),o=Mn(Dn(this.baseHash,i)>>>0);if(!n.hasNameForId(this.componentId,o)){var a=t(i,".".concat(o),void 0,this.componentId);n.insertRules(this.componentId,o,a)}r=it(r,o),this.staticRulesId=o}else{for(var s=Dn(this.baseHash,t.hash),l="",c=0;c<this.rules.length;c++){var u=this.rules[c];if("string"==typeof u)l+=u;else if(u){var d=ot(qt(u,e,n,t));s=Dn(s,d+c),l+=d}}if(l){var p=Mn(s>>>0);n.hasNameForId(this.componentId,p)||n.insertRules(this.componentId,p,t(l,".".concat(p),void 0,this.componentId)),r=it(r,p)}}return r},e}(),Yt=o.createContext(void 0);Yt.Consumer;var Qt={};function Xt(e,n,t){var r=rt(e),i=e,a=!In(e),s=n.attrs,l=void 0===s?Cn:s,c=n.componentId,u=void 0===c?function(e,n){var t="string"!=typeof e?"sc":Tn(e);Qt[t]=(Qt[t]||0)+1;var r="".concat(t,"-").concat(function(e){return Mn(Bn(e)>>>0)}(kn+t+Qt[t]));return n?"".concat(n,"-").concat(r):r}(n.displayName,n.parentComponentId):c,d=n.displayName,p=void 0===d?function(e){return In(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e):d,f=n.displayName&&n.componentId?"".concat(Tn(n.displayName),"-").concat(n.componentId):n.componentId||u,h=r&&i.attrs?i.attrs.concat(l).filter(Boolean):l,g=n.shouldForwardProp;if(r&&i.shouldForwardProp){var m=i.shouldForwardProp;if(n.shouldForwardProp){var x=n.shouldForwardProp;g=function(e,n){return m(e,n)&&x(e,n)}}else g=m}var v=new Gt(t,f,r?i.componentStyle:void 0);function y(e,n){return function(e,n,t){var r=e.attrs,i=e.componentStyle,a=e.defaultProps,s=e.foldedComponentIds,l=e.styledComponentId,c=e.target,u=o.useContext(Yt),d=Rt(),p=e.shouldForwardProp||d.shouldForwardProp,f=function(e,n,t){return void 0===t&&(t=_n),e.theme!==t.theme&&e.theme||n||t.theme}(n,u,a)||_n,h=function(e,n,t){for(var r,i=ge(ge({},n),{className:void 0,theme:t}),o=0;o<e.length;o+=1){var a=tt(r=e[o])?r(i):r;for(var s in a)i[s]="className"===s?it(i[s],a[s]):"style"===s?ge(ge({},i[s]),a[s]):a[s]}return n.className&&(i.className=it(i.className,n.className)),i}(r,n,f),g=h.as||c,m={};for(var x in h)void 0===h[x]||"$"===x[0]||"as"===x||"theme"===x&&h.theme===f||("forwardedAs"===x?m.as=h.forwardedAs:p&&!p(x,g)||(m[x]=h[x]));var v=function(e,n){var t=Rt();return e.generateAndInjectStyles(n,t.styleSheet,t.stylis)}(i,h),y=it(s,l);return v&&(y+=" "+v),h.className&&(y+=" "+h.className),m[In(g)&&!On.has(g)?"class":"className"]=y,m.ref=t,(0,o.createElement)(g,m)}(b,e,n)}y.displayName=p;var b=o.forwardRef(y);return b.attrs=h,b.componentStyle=v,b.displayName=p,b.shouldForwardProp=g,b.foldedComponentIds=r?it(i.foldedComponentIds,i.styledComponentId):"",b.styledComponentId=f,b.target=r?i.target:e,Object.defineProperty(b,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=r?function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];for(var r=0,i=n;r<i.length;r++)st(e,i[r],!0);return e}({},i.defaultProps,e):e}}),lt(b,(function(){return".".concat(b.styledComponentId)})),a&&nt(b,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),b}function Kt(e,n){for(var t=[e[0]],r=0,i=n.length;r<i;r+=1)t.push(n[r],e[r+1]);return t}new Set;var Jt=function(e){return Object.assign(e,{isCss:!0})};function Zt(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];if(tt(e)||at(e))return Jt(qt(Kt(Cn,me([e],n,!0))));var r=e;return 0===n.length&&1===r.length&&"string"==typeof r[0]?qt(r):Jt(qt(Kt(r,n)))}function er(e,n,t){if(void 0===t&&(t=_n),!n)throw ct(1,n);var r=function(r){for(var i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];return e(n,t,Zt.apply(void 0,me([r],i,!1)))};return r.attrs=function(r){return er(e,n,ge(ge({},t),{attrs:Array.prototype.concat(t.attrs,r).filter(Boolean)}))},r.withConfig=function(r){return er(e,n,ge(ge({},t),r))},r}var nr,tr,rr=function(e){return er(Xt,e)},ir=rr;function or(){return or=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},or.apply(null,arguments)}On.forEach((function(e){ir[e]=rr(e)})),function(){function e(e,n){this.rules=e,this.componentId=n,this.isStatic=Ht(e),Ot.registerId(this.componentId+1)}e.prototype.createStyles=function(e,n,t,r){var i=r(ot(qt(this.rules,n,t,r)),""),o=this.componentId+e;t.insertRules(o,o,i)},e.prototype.removeStyles=function(e,n){n.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,n,t,r){e>2&&Ot.registerId(this.componentId+e),this.removeStyles(e,t),this.createStyles(e,n,t,r)}}(),function(){function e(){var e=this;this._emitSheetCSS=function(){var n=e.instance.toString();if(!n)return"";var t=wt(),r=ot([t&&'nonce="'.concat(t,'"'),"".concat(yn,'="true"'),"".concat(wn,'="').concat(kn,'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(n,"</style>")},this.getStyleTags=function(){if(e.sealed)throw ct(2);return e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)throw ct(2);var t=e.instance.toString();if(!t)return[];var r=((n={})[yn]="",n[wn]=kn,n.dangerouslySetInnerHTML={__html:t},n),i=wt();return i&&(r.nonce=i),[o.createElement("style",ge({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new Ot({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw ct(2);return o.createElement(Dt,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw ct(3)}}(),"__sc-".concat(yn,"__");const ar=function(e){return o.createElement("svg",or({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 77 13"},e),nr||(nr=o.createElement("path",{fill:"url(#PRO1000_svg__a)",d:"M7.248.8q2.24 0 3.472.976t1.232 2.736q0 1.408-.704 2.48-.688 1.073-1.984 1.664-1.28.592-2.976.592H4.352L3.808 12H.032L2.272.8zM6.48 6.336q.784 0 1.216-.384.432-.4.432-1.104 0-1.136-1.408-1.136H5.456l-.528 2.624zM23.686 4.48q0 1.488-.8 2.608-.784 1.104-2.224 1.648L22.534 12h-3.92L17.03 9.184h-.928L15.542 12h-3.776L14.006.8h5.024q2.209 0 3.424.976 1.233.96 1.232 2.704m-3.824.368q0-1.136-1.408-1.136H17.19l-.528 2.624h1.552q.784 0 1.216-.384.432-.4.432-1.104m10.13 7.408q-1.712 0-3.008-.624-1.28-.64-1.984-1.776-.687-1.136-.688-2.608 0-1.952.896-3.472a6.3 6.3 0 0 1 2.512-2.384q1.617-.848 3.648-.848 1.713 0 2.992.64 1.297.624 1.984 1.76.704 1.136.704 2.608 0 1.952-.912 3.488-.895 1.52-2.512 2.368-1.6.848-3.632.848m.32-3.056q.897 0 1.552-.464a2.95 2.95 0 0 0 1.024-1.248 4.1 4.1 0 0 0 .352-1.712q0-.992-.592-1.584-.576-.592-1.6-.592-.896 0-1.568.464-.656.464-1.008 1.248a4.1 4.1 0 0 0-.352 1.712q0 .992.576 1.584.593.592 1.616.592M44.2.8 41.959 12h-3.777l1.664-8.352h-1.92L38.503.8zm4.463 11.456q-1.312 0-2.288-.512a3.75 3.75 0 0 1-1.52-1.504q-.528-.991-.528-2.368 0-2.08.784-3.744.785-1.68 2.16-2.624a5.37 5.37 0 0 1 3.12-.96q1.312 0 2.288.528.976.512 1.504 1.504.544.976.544 2.352 0 2.08-.784 3.76-.784 1.664-2.176 2.624-1.376.945-3.104.944m.384-3.024q.608 0 1.04-.704.432-.705.64-1.68.224-.992.224-1.824 0-1.455-.944-1.456-.608 0-1.04.704-.432.705-.656 1.696a8.7 8.7 0 0 0-.208 1.808q0 1.456.944 1.456m10.694 3.024q-1.312 0-2.288-.512a3.75 3.75 0 0 1-1.52-1.504q-.528-.991-.528-2.368 0-2.08.784-3.744.785-1.68 2.16-2.624a5.37 5.37 0 0 1 3.12-.96q1.312 0 2.288.528.976.512 1.504 1.504.544.976.544 2.352 0 2.08-.784 3.76-.783 1.664-2.176 2.624-1.376.945-3.104.944m.384-3.024q.608 0 1.04-.704.432-.705.64-1.68.224-.992.224-1.824 0-1.455-.944-1.456-.608 0-1.04.704-.431.705-.656 1.696a8.7 8.7 0 0 0-.208 1.808q0 1.456.944 1.456m10.694 3.024q-1.311 0-2.288-.512a3.75 3.75 0 0 1-1.52-1.504q-.528-.991-.528-2.368 0-2.08.784-3.744.784-1.68 2.16-2.624a5.37 5.37 0 0 1 3.12-.96q1.313 0 2.288.528a3.53 3.53 0 0 1 1.504 1.504q.544.976.544 2.352 0 2.08-.784 3.76-.784 1.664-2.176 2.624-1.376.945-3.104.944m.384-3.024q.609 0 1.04-.704.432-.705.64-1.68.225-.992.224-1.824 0-1.455-.944-1.456-.608 0-1.04.704-.431.705-.656 1.696a8.7 8.7 0 0 0-.208 1.808q0 1.456.944 1.456"})),tr||(tr=o.createElement("defs",null,o.createElement("linearGradient",{id:"PRO1000_svg__a",x1:38.5,x2:38.5,y1:-4,y2:16,gradientUnits:"userSpaceOnUse"},o.createElement("stop",{stopColor:"#202020"}),o.createElement("stop",{offset:1,stopColor:"#111"})))))};var sr;function lr(){return lr=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},lr.apply(null,arguments)}const cr=function(e){return o.createElement("svg",lr({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 24 16"},e),sr||(sr=o.createElement("path",{fill:"#000",d:"M1.333 16a1.333 1.333 0 0 1 0-2.667h21.334a1.333 1.333 0 0 1 0 2.667zm0-6.667a1.333 1.333 0 1 1 0-2.666h21.334a1.333 1.333 0 0 1 0 2.666zm0-6.666a1.333 1.333 0 0 1 0-2.667h21.334a1.333 1.333 0 0 1 0 2.667z"})))};var ur,dr,pr,fr,hr=ir.div(ur||(pr=["\n    width: clamp(340px, 90vw, 1684px);\n    margin: 0 auto;\n    \n    container-name: wrapper;\n    container-type: inline-size;\n"],fr=["\n    width: clamp(340px, 90vw, 1684px);\n    margin: 0 auto;\n    \n    container-name: wrapper;\n    container-type: inline-size;\n"],Object.defineProperty?Object.defineProperty(pr,"raw",{value:fr}):pr.raw=fr,ur=pr)),gr=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(hr,{children:e.children})})},mr=ir.div(dr||(dr=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: clamp(12px, 2vw, 16px);\n    line-height: clamp(14px, 3vw, 20px);\n    color: ",";\n    padding: 13px 30px;\n    background-color: ",";\n    border-radius: 23px;\n    border: 1px solid var(--blue);\n    display: inline-block;\n    cursor: pointer;\n    text-align: center;\n    text-wrap: nowrap;\n"],["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: clamp(12px, 2vw, 16px);\n    line-height: clamp(14px, 3vw, 20px);\n    color: ",";\n    padding: 13px 30px;\n    background-color: ",";\n    border-radius: 23px;\n    border: 1px solid var(--blue);\n    display: inline-block;\n    cursor: pointer;\n    text-align: center;\n    text-wrap: nowrap;\n"])),(function(e){return e.$invert?"var(--blue)":"var(--white)"}),(function(e){return e.$invert?"var(--white)":"var(--blue)"})),xr=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(mr,{$invert:e.invert,children:e.text})})};const vr=i.p+"7984686260a0059b909c.png",yr=i.p+"371317c95aa27dfe0dcb.png";var br=i(961),wr=i.t(br,2);function kr(){return kr=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},kr.apply(this,arguments)}function Sr(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const jr=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Er=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];try{window.__reactRouterVersion="6"}catch(e){}const Cr=o.createContext({isTransitioning:!1});new Map;const _r=a.startTransition;wr.flushSync,a.useId;const Or="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Fr=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Pr=o.forwardRef((function(e,n){let t,{onClick:r,relative:i,reloadDocument:a,replace:s,state:l,target:u,to:d,preventScrollReset:p,unstable_viewTransition:h}=e,g=Sr(e,jr),{basename:m}=o.useContext(U),x=!1;if("string"==typeof d&&Fr.test(d)&&(t=d,Or))try{let e=new URL(window.location.href),n=d.startsWith("//")?new URL(e.protocol+d):new URL(d),t=P(n.pathname,m);n.origin===e.origin&&null!=t?d=t+n.search+n.hash:x=!0}catch(e){}let v=function(e,n){let{relative:t}=void 0===n?{}:n;G()||c(!1);let{basename:r,navigator:i}=o.useContext(U),{hash:a,pathname:s,search:l}=Z(e,{relative:t}),u=s;return"/"!==r&&(u="/"===s?r:L([r,s])),i.createHref({pathname:u,search:l,hash:a})}(d,{relative:i}),y=function(e,n){let{target:t,replace:r,state:i,preventScrollReset:a,relative:s,unstable_viewTransition:l}=void 0===n?{}:n,c=X(),u=Y(),d=Z(e,{relative:s});return o.useCallback((n=>{if(function(e,n){return!(0!==e.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(n,t)){n.preventDefault();let t=void 0!==r?r:f(u)===f(d);c(e,{replace:t,state:i,preventScrollReset:a,relative:s,unstable_viewTransition:l})}}),[u,c,d,r,i,t,e,a,s,l])}(d,{replace:s,state:l,target:u,preventScrollReset:p,relative:i,unstable_viewTransition:h});return o.createElement("a",kr({},g,{href:t||v,onClick:x||a?r:function(e){r&&r(e),e.defaultPrevented||y(e)},ref:n,target:u}))})),Tr=o.forwardRef((function(e,n){let{"aria-current":t="page",caseSensitive:r=!1,className:i="",end:a=!1,style:s,to:l,unstable_viewTransition:u,children:d}=e,p=Sr(e,Er),f=Z(l,{relative:p.relative}),h=Y(),g=o.useContext($),{navigator:m,basename:x}=o.useContext(U),v=null!=g&&function(e,n){void 0===n&&(n={});let t=o.useContext(Cr);null==t&&c(!1);let{basename:r}=function(){let e=o.useContext(V);return e||c(!1),e}(zr.useViewTransitionState),i=Z(e,{relative:n.relative});if(!t.isTransitioning)return!1;let a=P(t.currentLocation.pathname,r)||t.currentLocation.pathname,s=P(t.nextLocation.pathname,r)||t.nextLocation.pathname;return null!=O(i.pathname,s)||null!=O(i.pathname,a)}(f)&&!0===u,y=m.encodeLocation?m.encodeLocation(f).pathname:f.pathname,b=h.pathname,w=g&&g.navigation&&g.navigation.location?g.navigation.location.pathname:null;r||(b=b.toLowerCase(),w=w?w.toLowerCase():null,y=y.toLowerCase()),w&&x&&(w=P(w,x)||w);const k="/"!==y&&y.endsWith("/")?y.length-1:y.length;let S,j=b===y||!a&&b.startsWith(y)&&"/"===b.charAt(k),E=null!=w&&(w===y||!a&&w.startsWith(y)&&"/"===w.charAt(y.length)),C={isActive:j,isPending:E,isTransitioning:v},_=j?t:void 0;S="function"==typeof i?i(C):[i,j?"active":null,E?"pending":null,v?"transitioning":null].filter(Boolean).join(" ");let F="function"==typeof s?s(C):s;return o.createElement(Pr,kr({},p,{"aria-current":_,className:S,ref:n,style:F,to:l,unstable_viewTransition:u}),"function"==typeof d?d(C):d)}));var zr,Ar,Lr;function Mr(){return Mr=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Mr.apply(null,arguments)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(zr||(zr={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Ar||(Ar={}));const Nr=function(e){return o.createElement("svg",Mr({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),Lr||(Lr=o.createElement("path",{fill:"#000",d:"M17.601.412a1.36 1.36 0 0 0-1.925 0L9 7.075 2.324.399A1.361 1.361 0 1 0 .399 2.324L7.075 9 .399 15.676a1.36 1.36 0 1 0 1.925 1.925L9 10.925l6.676 6.676a1.36 1.36 0 1 0 1.925-1.925L10.925 9l6.676-6.676a1.37 1.37 0 0 0 0-1.912"})))};var Rr,Dr,Br,Ir,Vr,$r,Ur;function qr(){return qr=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},qr.apply(null,arguments)}const Hr=function(e){return o.createElement("svg",qr({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 375 547"},e),Rr||(Rr=o.createElement("path",{stroke:"#000",d:"M206.194 303.902c38.488 29.503 142.059 58.739 109.124 94.336-48.297 52.201-168.87-41.613-210.948 15.719-36.349 49.527 86.24 104.251 78.199 165.156-4.68 35.447-68.963 15.303-103.327 25.175-33.15 9.522-67.383 49.593-97.318 32.463-39.334-22.509-14.46-110.144-58.325-121.53-55.295-14.352-156.77 122.846-156.7 65.719.103-84.481 192.672-119.8 156.86-196.315-36.658-78.319-219.457 61.161-256.657-16.902-33.322-69.925 202.528 24.641 225.023-49.48 23.249-76.606-165.154-101.17-155.194-180.605 7.527-60.033 112.066 42.063 170.688 57.034 21.709 5.544 50.256 18.932 66.55 3.553C18.835 156.07 9.566 27.413 69.177 42.193c59.928 14.859-3.393 123.916 14.183 183.104 5.777 19.456 33.068 22.646 50.162 33.585 24.208 15.491 49.863 27.535 72.673 45.02Z",clipRule:"evenodd"})),Dr||(Dr=o.createElement("path",{stroke:"#000",d:"M216.194 313.902c38.488 29.503 142.059 58.739 109.124 94.336-48.297 52.201-168.87-41.613-210.948 15.719-36.349 49.527 86.24 104.251 78.199 165.156-4.68 35.447-68.963 15.303-103.327 25.175-33.15 9.522-67.383 49.593-97.318 32.463-39.334-22.509-14.46-110.144-58.325-121.53-55.295-14.352-156.77 122.846-156.7 65.719.103-84.481 192.672-119.8 156.86-196.315-36.658-78.319-219.457 61.161-256.657-16.902-33.322-69.925 202.528 24.641 225.023-49.48 23.249-76.606-165.154-101.17-155.194-180.605 7.527-60.033 112.066 42.063 170.688 57.034 21.709 5.544 50.256 18.932 66.55 3.553C28.835 166.07 19.566 37.413 79.177 52.193c59.928 14.859-3.393 123.916 14.183 183.104 5.777 19.456 33.068 22.646 50.162 33.585 24.208 15.491 49.863 27.535 72.673 45.02Z",clipRule:"evenodd"})),Br||(Br=o.createElement("path",{stroke:"#000",d:"M226.194 323.902c38.488 29.503 142.059 58.739 109.124 94.336-48.297 52.201-168.87-41.613-210.948 15.719-36.349 49.527 86.24 104.251 78.199 165.156-4.68 35.447-68.963 15.303-103.327 25.175-33.15 9.522-67.383 49.593-97.318 32.463-39.334-22.509-14.46-110.144-58.325-121.53-55.295-14.352-156.77 122.846-156.7 65.719.103-84.481 192.672-119.8 156.86-196.315-36.658-78.319-219.457 61.161-256.657-16.902-33.322-69.925 202.528 24.641 225.023-49.48 23.249-76.606-165.154-101.17-155.194-180.605 7.527-60.033 112.066 42.063 170.688 57.034 21.709 5.544 50.256 18.932 66.55 3.553C38.835 176.07 29.566 47.413 89.177 62.193c59.928 14.859-3.393 123.916 14.183 183.104 5.777 19.456 33.068 22.646 50.162 33.585 24.208 15.491 49.863 27.535 72.673 45.02Z",clipRule:"evenodd"})),Ir||(Ir=o.createElement("path",{stroke:"#000",d:"M236.194 333.902c38.488 29.503 142.059 58.739 109.124 94.336-48.297 52.201-168.87-41.613-210.948 15.719-36.349 49.527 86.24 104.251 78.199 165.156-4.68 35.447-68.963 15.303-103.327 25.175-33.15 9.522-67.383 49.593-97.318 32.463-39.334-22.509-14.46-110.144-58.325-121.53-55.295-14.352-156.77 122.846-156.7 65.719.103-84.481 192.672-119.8 156.86-196.315-36.658-78.319-219.457 61.161-256.657-16.902-33.322-69.925 202.528 24.641 225.023-49.48 23.249-76.606-165.154-101.17-155.194-180.605 7.527-60.033 112.066 42.063 170.688 57.034 21.709 5.544 50.256 18.932 66.55 3.553C48.835 186.07 39.566 57.413 99.177 72.193c59.928 14.859-3.393 123.916 14.183 183.104 5.777 19.456 33.068 22.646 50.162 33.585 24.208 15.491 49.863 27.535 72.673 45.02Z",clipRule:"evenodd"})),Vr||(Vr=o.createElement("path",{stroke:"#000",d:"M246.194 343.902c38.488 29.503 142.059 58.739 109.124 94.336-48.297 52.201-168.87-41.613-210.948 15.719-36.349 49.527 86.24 104.251 78.199 165.156-4.68 35.447-68.963 15.303-103.327 25.175-33.15 9.522-67.383 49.593-97.318 32.463-39.334-22.509-14.46-110.144-58.325-121.53-55.295-14.352-156.77 122.846-156.7 65.719.103-84.481 192.672-119.8 156.86-196.315-36.658-78.319-219.457 61.161-256.657-16.902-33.322-69.925 202.528 24.641 225.023-49.48 23.249-76.606-165.154-101.17-155.194-180.605 7.527-60.033 112.066 42.063 170.688 57.034 21.709 5.544 50.256 18.932 66.55 3.553C58.835 196.07 49.566 67.413 109.177 82.193c59.928 14.859-3.393 123.916 14.183 183.104 5.777 19.456 33.068 22.646 50.162 33.585 24.208 15.491 49.863 27.535 72.673 45.02Z",clipRule:"evenodd"})),$r||($r=o.createElement("path",{stroke:"#000",d:"M256.194 353.902c38.488 29.503 142.059 58.739 109.124 94.336-48.297 52.201-168.87-41.613-210.948 15.719-36.349 49.527 86.24 104.251 78.199 165.156-4.68 35.447-68.963 15.303-103.327 25.175-33.15 9.522-67.383 49.593-97.318 32.463-39.334-22.509-14.46-110.144-58.325-121.53-55.295-14.352-156.77 122.846-156.7 65.719.103-84.481 192.672-119.8 156.86-196.315-36.658-78.319-219.457 61.161-256.657-16.902-33.322-69.925 202.528 24.641 225.023-49.48 23.249-76.606-165.154-101.17-155.194-180.605 7.527-60.033 112.066 42.063 170.688 57.034 21.709 5.544 50.256 18.932 66.55 3.553C68.835 206.07 59.566 77.413 119.177 92.193c59.928 14.859-3.393 123.916 14.183 183.104 5.777 19.456 33.068 22.646 50.162 33.585 24.208 15.491 49.863 27.535 72.673 45.02Z",clipRule:"evenodd"})),Ur||(Ur=o.createElement("path",{stroke:"#000",d:"M266.194 363.902c38.488 29.503 142.059 58.739 109.124 94.336-48.297 52.201-168.87-41.613-210.948 15.719-36.349 49.527 86.24 104.251 78.199 165.156-4.68 35.447-68.963 15.303-103.327 25.175-33.15 9.522-67.383 49.593-97.318 32.463C2.59 674.242 27.464 586.607-16.4 575.221c-55.295-14.352-156.77 122.846-156.7 65.719.103-84.481 192.672-119.8 156.86-196.315-36.658-78.319-219.457 61.161-256.657-16.902-33.322-69.925 202.528 24.641 225.023-49.48 23.249-76.606-165.154-101.17-155.194-180.605 7.527-60.033 112.066 42.063 170.688 57.034 21.709 5.544 50.256 18.932 66.55 3.553 44.665-42.155 35.396-170.812 95.007-156.032 59.928 14.859-3.393 123.916 14.183 183.104 5.777 19.456 33.068 22.646 50.162 33.585 24.208 15.491 49.863 27.535 72.673 45.02Z",clipRule:"evenodd"})))};var Wr,Gr,Yr,Qr,Xr,Kr,Jr;function Zr(){return Zr=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Zr.apply(null,arguments)}const ei=function(e){return o.createElement("svg",Zr({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 375 812"},e),Wr||(Wr=o.createElement("path",{stroke:"#0047FF",d:"M-289.671 415.553c-25.247-41.405-111.287-106.048-67.726-127.36 63.881-31.254 142.472 99.751 202.405 61.468 51.773-33.072-42.806-128.348-13.326-182.247 17.156-31.369 69.838 10.616 105.449 13.811 34.352 3.082 80.739-21.934 102.475 4.845 28.56 35.188-26.265 107.94 10.536 134.389 46.39 33.34 190.539-57.992 169.857-4.74C189.415 394.47-2.924 357.914 2.863 442.196c5.923 86.271 226.739 22.16 233.261 108.387 5.841 77.238-179.987-96.07-227.715-35.062-49.329 63.053 117.513 153.954 79.557 224.441-28.685 53.271-89.334-79.671-138.602-114.789-18.246-13.005-40.038-35.793-60.784-27.331-56.868 23.196-94.653 146.528-144.914 111.231-50.527-35.485 47.884-114.341 52.853-175.884 1.633-20.229-22.667-33.052-34.662-49.424-16.986-23.183-36.565-43.674-51.528-68.212Z",clipRule:"evenodd"})),Gr||(Gr=o.createElement("path",{stroke:"#0047FF",d:"M-295.388 402.618c-25.248-41.405-111.288-106.048-67.726-127.36 63.88-31.254 142.472 99.751 202.405 61.468 51.773-33.072-42.806-128.348-13.327-182.247 17.157-31.369 69.838 10.616 105.45 13.811 34.352 3.082 80.739-21.934 102.474 4.845 28.56 35.187-26.264 107.94 10.537 134.389 46.39 33.34 190.538-57.992 169.857-4.74C183.698 381.535-8.641 344.979-2.854 429.261c5.923 86.271 226.739 22.159 233.26 108.387 5.842 77.238-179.986-96.07-227.715-35.062-49.328 63.053 117.514 153.954 79.558 224.441-28.685 53.271-89.334-79.671-138.602-114.789-18.246-13.005-40.038-35.793-60.785-27.331-56.867 23.196-94.653 146.528-144.913 111.231-50.527-35.485 47.884-114.341 52.853-175.884 1.633-20.229-22.667-33.052-34.662-49.424-16.986-23.183-36.565-43.674-51.528-68.212Z",clipRule:"evenodd"})),Yr||(Yr=o.createElement("path",{stroke:"#0047FF",d:"M-301.105 389.683c-25.248-41.405-111.288-106.047-67.727-127.36 63.881-31.254 142.473 99.752 202.405 61.468 51.774-33.071-42.805-128.348-13.326-182.247 17.157-31.369 69.838 10.616 105.45 13.811 34.351 3.083 80.738-21.934 102.474 4.845 28.56 35.188-26.265 107.94 10.536 134.389 46.39 33.34 190.539-57.992 169.858-4.739C177.98 368.6-14.358 332.044-8.572 416.327c5.923 86.27 226.739 22.159 233.261 108.386 5.842 77.239-179.987-96.069-227.715-35.062-49.328 63.053 117.513 153.954 79.558 224.441-28.685 53.272-89.334-79.671-138.602-114.789-18.246-13.005-40.038-35.792-60.785-27.33-56.868 23.195-94.653 146.527-144.913 111.23-50.528-35.485 47.883-114.34 52.852-175.883 1.634-20.229-22.667-33.053-34.661-49.424-16.987-23.184-36.566-43.674-51.528-68.213Z",clipRule:"evenodd"})),Qr||(Qr=o.createElement("path",{stroke:"#0047FF",d:"M-306.823 376.748c-25.247-41.405-111.287-106.047-67.726-127.36 63.881-31.254 142.473 99.752 202.405 61.468 51.773-33.071-42.805-128.348-13.326-182.247 17.157-31.37 69.838 10.616 105.45 13.811 34.351 3.083 80.738-21.934 102.474 4.845 28.56 35.188-26.265 107.94 10.536 134.389 46.39 33.34 190.539-57.992 169.857-4.739-30.584 78.75-222.922 42.194-217.136 126.477 5.923 86.27 226.739 22.159 233.261 108.386 5.842 77.239-179.987-96.07-227.715-35.062-49.329 63.053 117.513 153.954 79.558 224.441C42.13 754.429-18.52 621.486-67.788 586.368c-18.245-13.005-40.037-35.792-60.784-27.33-56.868 23.195-94.653 146.527-144.913 111.23-50.528-35.485 47.883-114.34 52.852-175.883 1.633-20.23-22.667-33.053-34.662-49.424-16.986-23.184-36.565-43.675-51.528-68.213Z",clipRule:"evenodd"})),Xr||(Xr=o.createElement("path",{stroke:"#0047FF",d:"M-312.54 363.813c-25.247-41.405-111.287-106.048-67.726-127.36 63.881-31.254 142.472 99.752 202.405 61.468 51.773-33.071-42.806-128.348-13.326-182.247 17.156-31.37 69.838 10.616 105.449 13.811C-51.386 132.568-5 107.551 16.737 134.33c28.56 35.188-26.265 107.94 10.536 134.389 46.39 33.34 190.539-57.992 169.857-4.739-30.584 78.75-222.922 42.194-217.136 126.477 5.923 86.27 226.739 22.159 233.261 108.386 5.841 77.238-179.987-96.07-227.715-35.062-49.329 63.053 117.513 153.954 79.558 224.441-28.686 53.271-89.334-79.671-138.603-114.789-18.246-13.005-40.038-35.793-60.784-27.33-56.868 23.195-94.653 146.527-144.914 111.23-50.527-35.485 47.884-114.34 52.853-175.883 1.633-20.23-22.667-33.053-34.662-49.424-16.986-23.184-36.565-43.675-51.528-68.213Z",clipRule:"evenodd"})),Kr||(Kr=o.createElement("path",{stroke:"#0047FF",d:"M-318.257 350.878c-25.248-41.405-111.288-106.048-67.726-127.36 63.88-31.254 142.472 99.752 202.405 61.468 51.773-33.071-42.806-128.348-13.327-182.247 17.157-31.37 69.838 10.616 105.45 13.811 34.352 3.083 80.739-21.934 102.474 4.845 28.56 35.188-26.264 107.94 10.537 134.389 46.39 33.34 190.538-57.992 169.857-4.739-30.584 78.75-222.923 42.194-217.136 126.477 5.923 86.27 226.739 22.159 233.26 108.386 5.842 77.238-179.986-96.07-227.715-35.062C-69.506 513.899 97.336 604.8 59.38 675.287c-28.685 53.271-89.334-79.671-138.602-114.789-18.246-13.005-40.038-35.793-60.785-27.33-56.867 23.195-94.653 146.527-144.913 111.23-50.527-35.485 47.884-114.34 52.853-175.883 1.633-20.23-22.667-33.053-34.662-49.424-16.986-23.184-36.565-43.675-51.528-68.213Z",clipRule:"evenodd"})),Jr||(Jr=o.createElement("path",{stroke:"#0047FF",d:"M-323.974 337.943c-25.248-41.405-111.288-106.048-67.727-127.36 63.881-31.254 142.473 99.752 202.406 61.468 51.773-33.071-42.806-128.348-13.327-182.247 17.157-31.37 69.838 10.616 105.45 13.811 34.351 3.083 80.738-21.934 102.474 4.845 28.56 35.188-26.264 107.94 10.537 134.389 46.389 33.34 190.538-57.992 169.857-4.74-30.585 78.751-222.923 42.195-217.137 126.477 5.923 86.271 226.739 22.16 233.261 108.387 5.842 77.238-179.987-96.07-227.715-35.062-49.328 63.053 117.513 153.954 79.558 224.441-28.685 53.271-89.334-79.671-138.602-114.789-18.246-13.005-40.038-35.793-60.785-27.33-56.868 23.195-94.653 146.527-144.913 111.23-50.528-35.485 47.884-114.34 52.852-175.883 1.634-20.23-22.667-33.053-34.661-49.424-16.987-23.184-36.566-43.675-51.528-68.213Z",clipRule:"evenodd"})))};var ni,ti,ri,ii,oi,ai,si,li,ci,ui,di,pi,fi,hi,gi,mi,xi,vi,yi,bi,wi,ki,Si,ji,Ei=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Ci=ir.div(ni||(ni=Ei(["\n    position: fixed;\n    z-index: 999;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n    background-color: #FFF;\n\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"],["\n    position: fixed;\n    z-index: 999;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n    background-color: #FFF;\n\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"]))),_i=ir.div(ti||(ti=Ei(["\n    display: flex;\n    justify-content: space-between;\n    padding: 30px 18px 0 18px;\n    \n    & > * {\n      cursor: pointer;  \n    }\n"],["\n    display: flex;\n    justify-content: space-between;\n    padding: 30px 18px 0 18px;\n    \n    & > * {\n      cursor: pointer;  \n    }\n"]))),Oi=ir.div(ri||(ri=Ei(["\n    width: 100%;\n    height: calc(100vh - 20px);\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    text-align: right;\n    gap: 30px;\n    z-index: 2;\n    top: 30px;\n    right: 18px;\n    position: absolute;\n    \n    & > * {\n        color: #202020;\n        text-decoration: none;\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        font-weight: 500;\n        line-height: 20px;\n    }\n"],["\n    width: 100%;\n    height: calc(100vh - 20px);\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    text-align: right;\n    gap: 30px;\n    z-index: 2;\n    top: 30px;\n    right: 18px;\n    position: absolute;\n    \n    & > * {\n        color: #202020;\n        text-decoration: none;\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        font-weight: 500;\n        line-height: 20px;\n    }\n"]))),Fi=ir.div(ii||(ii=Ei(["\n    position: relative;\n    padding: 30px 18px;\n    width: 100%;\n    height: 100%;\n    \n    & > :nth-child(2) {\n        position: absolute;\n        bottom: 0;\n        right: -100px;\n        z-index: auto;\n    }\n    \n    & > :first-child {\n        position: absolute;\n        bottom: 50px;\n        left: -250px;\n        z-index: auto;\n    }\n"],["\n    position: relative;\n    padding: 30px 18px;\n    width: 100%;\n    height: 100%;\n    \n    & > :nth-child(2) {\n        position: absolute;\n        bottom: 0;\n        right: -100px;\n        z-index: auto;\n    }\n    \n    & > :first-child {\n        position: absolute;\n        bottom: 50px;\n        left: -250px;\n        z-index: auto;\n    }\n"]))),Pi=function(e){return e.open&&(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(Ci,{children:[(0,t.jsxs)(_i,{children:[(0,t.jsx)(ar,{width:77,height:20}),(0,t.jsx)("div",{onClick:function(){return e.setOpen(!1)},children:(0,t.jsx)(Nr,{width:18,height:18})})]}),(0,t.jsxs)(Fi,{children:[(0,t.jsx)(ei,{width:808,height:761}),(0,t.jsx)(Hr,{width:808,height:761}),(0,t.jsx)(Oi,{children:[{title:"Главная",to:"/"},{title:"О нас",to:"/#about"},{title:"Наши преимущества",to:"/#advantage"},{title:"Отзывы",to:"/#reviews"},{title:"Каталог",to:"/catalog"},{title:"Корзина",to:"/cart"}].map((function(n,r){return(0,t.jsx)(Pr,{to:n.to,onClick:function(){return e.setOpen(!1)},children:n.title},r)}))})]})]})})},Ti=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},zi=ir.div(oi||(oi=Ti(["\n    display: block;\n\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"],["\n    display: block;\n\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"]))),Ai=ir.div(ai||(ai=Ti(["\n    background-image: url(",");\n    background-repeat: no-repeat;\n    background-size: cover;\n\n"],["\n    background-image: url(",");\n    background-repeat: no-repeat;\n    background-size: cover;\n\n"])),vr),Li=ir.header(si||(si=Ti(["\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 30px 0;\n"],["\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 30px 0;\n"]))),Mi=ir.h1(li||(li=Ti(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    text-align: center;\n    padding-top: 74px;\n\n    & > *:first-child {\n        line-height: 40px;\n        font-size: 32px;\n        background: linear-gradient(180deg, #202020 0%, #111111 100%);\n        -webkit-background-clip: text;\n    }\n\n    & > *:last-child {\n        line-height: 30px;\n        font-size: 25px;\n\n        span {\n            color: #0047FF;\n        }\n    }\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    text-align: center;\n    padding-top: 74px;\n\n    & > *:first-child {\n        line-height: 40px;\n        font-size: 32px;\n        background: linear-gradient(180deg, #202020 0%, #111111 100%);\n        -webkit-background-clip: text;\n    }\n\n    & > *:last-child {\n        line-height: 30px;\n        font-size: 25px;\n\n        span {\n            color: #0047FF;\n        }\n    }\n"]))),Ni=ir.div(ci||(ci=Ti(["\n    padding-bottom: 74px;\n"],["\n    padding-bottom: 74px;\n"]))),Ri=ir.h2(ui||(ui=Ti(["\n    line-height: 15px;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 12px;\n    background: linear-gradient(180deg, #202020 0%, #111111 100%);\n    -webkit-background-clip: text;\n    margin: 15px 0 5px 0;\n    text-align: center;\n"],["\n    line-height: 15px;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 12px;\n    background: linear-gradient(180deg, #202020 0%, #111111 100%);\n    -webkit-background-clip: text;\n    margin: 15px 0 5px 0;\n    text-align: center;\n"]))),Di=ir.div(di||(di=Ti(["\n    text-align: center;\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 15px;\n"],["\n    text-align: center;\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 15px;\n"]))),Bi=ir.div(pi||(pi=Ti(["\n    width: 205px;\n    margin: 15px auto 0 auto;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    justify-content: center;\n\n    & > * {\n        flex-shrink: 0;\n    }\n    \n    & > :last-child * {\n        background-color: transparent;\n    }\n"],["\n    width: 205px;\n    margin: 15px auto 0 auto;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    justify-content: center;\n\n    & > * {\n        flex-shrink: 0;\n    }\n    \n    & > :last-child * {\n        background-color: transparent;\n    }\n"]))),Ii=ir.div(fi||(fi=Ti(["\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n    height: 283px;\n    position: relative;\n    overflow: hidden;\n\n    svg {\n        position: absolute;\n        right: -400px;\n        top: -300px;\n        transform: rotate(-45deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n"],["\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n    height: 283px;\n    position: relative;\n    overflow: hidden;\n\n    svg {\n        position: absolute;\n        right: -400px;\n        top: -300px;\n        transform: rotate(-45deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n"]))),Vi=ir.img(hi||(hi=Ti(["\n    position: absolute;\n    object-fit: cover;\n    object-position: center;\n    width: 341px;\n    height: 263px;\n    top: 10px;\n    left: calc(50% - 170px);\n    border-radius: 25px;\n    border: 1px solid #999999;\n    display: block;\n"],["\n    position: absolute;\n    object-fit: cover;\n    object-position: center;\n    width: 341px;\n    height: 263px;\n    top: 10px;\n    left: calc(50% - 170px);\n    border-radius: 25px;\n    border: 1px solid #999999;\n    display: block;\n"]))),$i=ir.div(gi||(gi=Ti(['\n    position: relative;\n    display: none;\n    overflow: hidden;\n    background: url("','"), linear-gradient(180deg, #151515 0%, #101010 100%);\n    background-size: 70%, 30%;\n    background-repeat: no-repeat, no-repeat;\n    background-position: left, right;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n\n    & > :first-child {\n        width: 808px;\n        height: 761px;\n        position: absolute;\n        bottom: 3vw;\n        right: -200px;\n        transform: rotate(-140deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n'],['\n    position: relative;\n    display: none;\n    overflow: hidden;\n    background: url("','"), linear-gradient(180deg, #151515 0%, #101010 100%);\n    background-size: 70%, 30%;\n    background-repeat: no-repeat, no-repeat;\n    background-position: left, right;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n\n    & > :first-child {\n        width: 808px;\n        height: 761px;\n        position: absolute;\n        bottom: 3vw;\n        right: -200px;\n        transform: rotate(-140deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n'])),vr),Ui=ir.header(mi||(mi=Ti(["\n    display: flex;\n    align-items: center;\n    gap: clamp(50px, 7vw, 115px);\n    padding: 40px 0;\n\n    & svg path {\n        fill: #18181b;\n    }\n"],["\n    display: flex;\n    align-items: center;\n    gap: clamp(50px, 7vw, 115px);\n    padding: 40px 0;\n\n    & svg path {\n        fill: #18181b;\n    }\n"]))),qi=ir.nav(xi||(xi=Ti(["\n    display: flex;\n    align-items: center;\n    gap: clamp(10px, 1.5vw, 20px);\n\n    & > :where(a:link, a:active, a:hover, a:visited) {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        color: #202020;\n        text-decoration: none;\n        //filter: invert(1);\n        mix-blend-mode: difference;\n    }\n"],["\n    display: flex;\n    align-items: center;\n    gap: clamp(10px, 1.5vw, 20px);\n\n    & > :where(a:link, a:active, a:hover, a:visited) {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        color: #202020;\n        text-decoration: none;\n        //filter: invert(1);\n        mix-blend-mode: difference;\n    }\n"]))),Hi=ir.div(vi||(vi=Ti(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 80px 100px 160px 0;\n    position: relative;\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 80px 100px 160px 0;\n    position: relative;\n"]))),Wi=ir.div(yi||(yi=Ti(["\n    width: 64%;\n"],["\n    width: 64%;\n"]))),Gi=ir.img(bi||(bi=Ti(["\n    width: min(42%, 690px);\n    aspect-ratio: 690 / 774;\n    object-fit: cover;\n    object-position: center;\n    border: 1px solid #999999;\n    border-radius: 25px;\n"],["\n    width: min(42%, 690px);\n    aspect-ratio: 690 / 774;\n    object-fit: cover;\n    object-position: center;\n    border: 1px solid #999999;\n    border-radius: 25px;\n"]))),Yi=ir.h1(wi||(wi=Ti(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: clamp(30px, 4vw, 50px);\n    line-height: clamp(40px, 5vw, 61px);\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: clamp(30px, 4vw, 50px);\n    line-height: clamp(40px, 5vw, 61px);\n"]))),Qi=ir.h2(ki||(ki=Ti(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 16px;\n    line-height: 20px;\n    margin: 20px 0 10px 0;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 16px;\n    line-height: 20px;\n    margin: 20px 0 10px 0;\n"]))),Xi=ir.div(Si||(Si=Ti(["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.5vw, 16px);\n    line-height: clamp(16px, 2vw, 20px);\n    font-weight: 500;\n"],["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.5vw, 16px);\n    line-height: clamp(16px, 2vw, 20px);\n    font-weight: 500;\n"]))),Ki=ir.div(ji||(ji=Ti(["\n    display: flex;\n    gap: 10px;\n    margin-top: 20px;\n\n    & > * {\n        flex-shrink: 0;\n    }\n    \n    & > :last-child * {\n        background-color: transparent;\n    }\n"],["\n    display: flex;\n    gap: 10px;\n    margin-top: 20px;\n\n    & > * {\n        flex-shrink: 0;\n    }\n    \n    & > :last-child * {\n        background-color: transparent;\n    }\n"]))),Ji=function(){var e=X(),n=(0,o.useState)(!1),r=n[0],i=n[1];return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(zi,{children:[(0,t.jsx)(Ai,{children:(0,t.jsx)(gr,{children:(0,t.jsxs)(Ni,{children:[(0,t.jsxs)(Li,{children:[(0,t.jsx)(ar,{width:"77",height:"20"}),(0,t.jsx)("div",{onClick:function(){return i(!0)},children:(0,t.jsx)(cr,{width:"24",height:"16"})})]}),(0,t.jsxs)(Mi,{children:[(0,t.jsx)("div",{children:"Электростанции -"}),(0,t.jsxs)("div",{children:[(0,t.jsx)("span",{children:"надежные "})," решения"]})]}),(0,t.jsx)(Ri,{children:"Что мы продаем?"}),(0,t.jsxs)(Di,{children:["В вашем распоряжении - портативные электростанции, которые подарят вам свободу и независимость от централизированного электросбережения.",(0,t.jsx)("br",{}),"На нашем сайте вы найдете широкий выбор моделей, идеально подходящих для различных задач"]}),(0,t.jsxs)(Bi,{children:[(0,t.jsx)("div",{onClick:function(){return e("/catalog")},children:(0,t.jsx)(xr,{text:"Смотреть каталог"})}),(0,t.jsx)("div",{onClick:function(){return e("/#feedback")},children:(0,t.jsx)(xr,{invert:!0,text:"Связаться с нами"})})]})]})})}),(0,t.jsxs)(Ii,{children:[(0,t.jsx)(Hr,{width:"808",height:"761"}),(0,t.jsx)(Vi,{src:yr,alt:""})]})]}),(0,t.jsxs)($i,{children:[(0,t.jsx)(Hr,{}),(0,t.jsxs)(gr,{children:[(0,t.jsxs)(Ui,{children:[(0,t.jsx)(ar,{width:"77",height:"20"}),(0,t.jsx)(qi,{children:[{title:"Главная",to:"/"},{title:"О нас",to:"/#about"},{title:"Наши преимущества",to:"/#advantage"},{title:"Отзывы",to:"/#reviews"},{title:"Каталог",to:"/catalog"},{title:"Корзина",to:"/cart"}].map((function(e,n){return(0,t.jsx)(Tr,{to:e.to,children:e.title},n)}))})]}),(0,t.jsxs)(Hi,{children:[(0,t.jsxs)(Wi,{children:[(0,t.jsxs)(Yi,{children:["Электростанции -",(0,t.jsx)("br",{}),(0,t.jsx)("span",{style:{color:"var(--blue)"},children:" надежные"})," решения"]}),(0,t.jsx)(Qi,{children:"Что мы продаем?"}),(0,t.jsxs)(Xi,{children:["В вашем распоряжении - портативные электростанции, которые подарят вам свободу и независимость от централизированного электросбережения.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"На нашем сайте вы найдете широкий выбор моделей, идеально подходящих для различных задач"]}),(0,t.jsxs)(Ki,{children:[(0,t.jsx)("div",{onClick:function(){return e("/catalog")},children:(0,t.jsx)(xr,{text:"Смотреть каталог"})}),(0,t.jsx)("div",{onClick:function(){return e("/#feedback")},children:(0,t.jsx)(xr,{invert:!0,text:"Связаться с нами"})})]})]}),(0,t.jsx)(Gi,{src:yr})]})]})]}),(0,t.jsx)(Pi,{open:r,setOpen:i})]})};const Zi=i.p+"077886fbae75adaaf6bf.png";var eo,no,to,ro,io,oo,ao,so,lo=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},co=ir.div(eo||(eo=lo(["\n    padding-top: clamp(50px, 8vw, 120px);\n    padding-bottom: 50px;\n"],["\n    padding-top: clamp(50px, 8vw, 120px);\n    padding-bottom: 50px;\n"]))),uo=ir.h2(no||(no=lo(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: clamp(24px, 4vw, 50px);\n    line-height: 29px;\n    text-align: center;\n    margin-bottom: clamp(10px, 3vw, 40px);\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: clamp(24px, 4vw, 50px);\n    line-height: 29px;\n    text-align: center;\n    margin-bottom: clamp(10px, 3vw, 40px);\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"]))),po=ir.div(to||(to=lo(["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.3vw, 20px);\n    font-weight: 500;\n    line-height: clamp(14px, 1.8vw, 24px);\n    text-align: center;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"],["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.3vw, 20px);\n    font-weight: 500;\n    line-height: clamp(14px, 1.8vw, 24px);\n    text-align: center;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"]))),fo=ir.div(ro||(ro=lo(["\n    display: flex;\n    justify-content: space-between;\n    align-items: start;\n    gap: 20px;\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: start;\n    gap: 20px;\n"]))),ho=ir.img(io||(io=lo(["\n    display: none;\n    width: clamp(300px, 35vw, 430px);\n    \n    aspect-ratio: 43 / 30;\n    object-fit: cover;\n    object-position: center;\n    flex-shrink: 0;\n    border: 1px solid #B8B8B8;\n    border-radius: 10px;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n\n    @media screen and (min-width: 1600px) {\n        width: clamp(500px, 55vw, 1062px);\n        aspect-ratio: 1062 / 475;\n    }\n"],["\n    display: none;\n    width: clamp(300px, 35vw, 430px);\n    \n    aspect-ratio: 43 / 30;\n    object-fit: cover;\n    object-position: center;\n    flex-shrink: 0;\n    border: 1px solid #B8B8B8;\n    border-radius: 10px;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n\n    @media screen and (min-width: 1600px) {\n        width: clamp(500px, 55vw, 1062px);\n        aspect-ratio: 1062 / 475;\n    }\n"]))),go=function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(gr,{children:(0,t.jsxs)(co,{id:"about",children:[(0,t.jsx)(uo,{children:"О нас"}),(0,t.jsxs)(fo,{children:[(0,t.jsxs)(po,{children:["Наша история началась с простой идеи: сделать мир более  независимым от централизованного электроснабжения.",(0,t.jsx)("br",{}),"Мы  убеждены, что портативные электростанции - это не просто удобство,  а истинная свобода. Свобода отключиться от сети и наслаждаться  жизнью в любом месте, в любое время. Мы  хотим, чтобы портативные электростанции стали неотъемлемой  частью вашего образа жизни, обеспечивая вам  комфорт и свободу в  любой ситуации. Мы стремимся к тому, чтобы наша продукция  помогла людям открыть для себя новые возможности, расширить  свои горизонты и наслаждаться жизнью в полной мере. Мы приглашаем вас  познакомиться с нашим ассортиментом  портативных электростанций и ощутить свободу энергии в ваших  руках. Свяжитесь с нами, чтобы получить консультацию и заказать  идеальную модель для ваших нужд! Вместе мы создадим мир, полный энергии и возможностей!"]}),(0,t.jsx)(ho,{src:Zi,alt:"about"})]})]})})})},mo=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},xo=ir.div(oo||(oo=mo(["\n    border: 1px solid #00000040;\n    background-color: #F5F5F5;\n    padding: 20px;\n    box-sizing: border-box;\n    border-radius: 10px;\n    box-shadow: \n            0 7px 16px 0 #0000000D,\n            0 29px 29px 0 #0000000A,\n            0 66px 40px 0 #00000008,\n            0 118px 47px 0 #00000003,\n            0 184px 52px 0 #00000000;\n"],["\n    border: 1px solid #00000040;\n    background-color: #F5F5F5;\n    padding: 20px;\n    box-sizing: border-box;\n    border-radius: 10px;\n    box-shadow: \n            0 7px 16px 0 #0000000D,\n            0 29px 29px 0 #0000000A,\n            0 66px 40px 0 #00000008,\n            0 118px 47px 0 #00000003,\n            0 184px 52px 0 #00000000;\n"]))),vo=ir.div(ao||(ao=mo(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 16px;\n    text-align: center;\n    line-height: 20px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 16px;\n    text-align: center;\n    line-height: 20px;\n"]))),yo=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(xo,{children:[(0,t.jsx)("div",{style:{marginBottom:"20px",display:"flex",justifyContent:"center"},children:e.icon}),(0,t.jsx)(vo,{children:e.text})]})})};function bo(){return bo=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},bo.apply(null,arguments)}const wo=function(e){return o.createElement("svg",bo({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 70 62"},e),so||(so=o.createElement("path",{fill:"#0047FF",d:"M44.722 36.813H52.5V25.187h-7.778M58.333 38.75c0 1.028-.41 2.013-1.139 2.74a3.9 3.9 0 0 1-2.75 1.135h-2.916v5.813h-5.834v-5.813h-2.916a3.9 3.9 0 0 1-2.75-1.135 3.87 3.87 0 0 1-1.14-2.74v-15.5c0-1.028.41-2.013 1.14-2.74a3.9 3.9 0 0 1 2.75-1.135h11.666c1.032 0 2.021.408 2.75 1.135a3.87 3.87 0 0 1 1.14 2.74M31.11 42.625h-5.833v-7.75H17.5v7.75h-5.833v-23.25H17.5v9.688h7.778v-9.688h5.833M62.222 0H7.778A7.737 7.737 0 0 0 0 7.75v46.5c0 2.055.82 4.027 2.278 5.48a7.8 7.8 0 0 0 5.5 2.27h54.444a7.8 7.8 0 0 0 5.5-2.27A7.74 7.74 0 0 0 70 54.25V7.75c0-2.055-.82-4.027-2.278-5.48a7.8 7.8 0 0 0-5.5-2.27"})))};var ko;function So(){return So=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},So.apply(null,arguments)}const jo=function(e){return o.createElement("svg",So({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 68 68"},e),ko||(ko=o.createElement("path",{stroke:"#0047FF",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:5,d:"M65 49.5h-7.75M65 34H53.375M65 18.5h-7.75M49.5 65v-7.75M34 65V53.375M18.5 65v-7.75M61.125 65H6.875A3.875 3.875 0 0 1 3 61.125V41.75a3.875 3.875 0 0 1 3.875-3.875H34A3.875 3.875 0 0 0 37.875 34V6.875A3.875 3.875 0 0 1 41.75 3h19.375A3.875 3.875 0 0 1 65 6.875v54.25A3.875 3.875 0 0 1 61.125 65"})))};var Eo;function Co(){return Co=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Co.apply(null,arguments)}const _o=function(e){return o.createElement("svg",Co({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 61 61"},e),Eo||(Eo=o.createElement("path",{fill:"#0047FF",d:"M38.633 58.967H36.6a2.034 2.034 0 0 0 3.253 1.626zm8.134-6.1 1.22-1.627a2.03 2.03 0 0 0-2.44 0zm8.133 6.1-1.22 1.626a2.033 2.033 0 0 0 3.253-1.626zm-8.133-14.234A10.167 10.167 0 0 1 36.6 34.567h-4.067A14.233 14.233 0 0 0 46.767 48.8zm10.166-10.166a10.167 10.167 0 0 1-10.166 10.166V48.8A14.234 14.234 0 0 0 61 34.567zM46.767 24.4a10.167 10.167 0 0 1 10.166 10.167H61a14.234 14.234 0 0 0-14.233-14.234zm0-4.067a14.233 14.233 0 0 0-14.234 14.234H36.6A10.167 10.167 0 0 1 46.767 24.4zM36.6 42.7v16.267h4.067V42.7zm3.253 17.893 8.134-6.1-2.44-3.253-8.134 6.1zm5.694-6.1 8.133 6.1 2.44-3.253-8.133-6.1zm11.386 4.474V42.7h-4.066v16.267zM61 20.333V6.1h-4.067v14.233zM54.9 0H6.1v4.067h48.8zM0 6.1v48.8h4.067V6.1zM6.1 61h26.433v-4.067H6.1zM0 54.9A6.1 6.1 0 0 0 6.1 61v-4.067A2.033 2.033 0 0 1 4.067 54.9zM6.1 0A6.1 6.1 0 0 0 0 6.1h4.067A2.033 2.033 0 0 1 6.1 4.067zM61 6.1A6.1 6.1 0 0 0 54.9 0v4.067A2.033 2.033 0 0 1 56.933 6.1zM12.2 20.333h20.333v-4.066H12.2zm0 12.2h12.2v-4.066H12.2z"})))};var Oo,Fo,Po,To,zo=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Ao=ir.h2(Oo||(Oo=zo(["\n    font-family: var(--montserrat-extrabold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 4.5vw, 61px);\n    text-align: center;\n    \n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 4.5vw, 61px);\n    text-align: center;\n    \n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"]))),Lo=ir.section(Fo||(Fo=zo(["\n    padding-bottom: 50px;\n"],["\n    padding-bottom: 50px;\n"]))),Mo=ir.div(Po||(Po=zo(["\n    display: grid;\n    margin-top: clamp(0px, 3vw, 40px);\n    grid-gap: 20px;\n    grid-template-columns: 1fr;\n    \n    @media screen and (min-width: 900px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n"],["\n    display: grid;\n    margin-top: clamp(0px, 3vw, 40px);\n    grid-gap: 20px;\n    grid-template-columns: 1fr;\n    \n    @media screen and (min-width: 900px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n"]))),No=function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Lo,{id:"advantage",children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(Ao,{children:"Наши преимущества"}),(0,t.jsxs)(Mo,{children:[(0,t.jsx)(yo,{icon:(0,t.jsx)(wo,{width:"70",height:"62"}),text:"Высокое качество товаров"}),(0,t.jsx)(yo,{icon:(0,t.jsx)(jo,{width:"62",height:"62"}),text:"Компактность и портативность"}),(0,t.jsx)(yo,{icon:(0,t.jsx)(_o,{width:"61",height:"61"}),text:"Сертифицированные детали"})]})]})})})};function Ro(){return Ro=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Ro.apply(null,arguments)}const Do=function(e){return o.createElement("svg",Ro({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 22 20"},e),To||(To=o.createElement("path",{fill:"#0047FF",d:"m11 0 2.47 7.6h7.992l-6.466 4.698 2.47 7.601L11 15.202l-6.466 4.697 2.47-7.6L.538 7.6H8.53z"})))};var Bo,Io,Vo,$o,Uo,qo,Ho=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Wo=ir.div(Bo||(Bo=Ho(["\n    padding-top: 35px;\n"],["\n    padding-top: 35px;\n"]))),Go=ir.img(Io||(Io=Ho(["\n    width: 70px;\n    height: 70px;\n    border-radius: 50%;\n    object-fit: cover;\n    object-position: center;\n    position: absolute;\n    top: -35px;\n    left: calc(50% - 35px);\n"],["\n    width: 70px;\n    height: 70px;\n    border-radius: 50%;\n    object-fit: cover;\n    object-position: center;\n    position: absolute;\n    top: -35px;\n    left: calc(50% - 35px);\n"]))),Yo=ir.div(Vo||(Vo=Ho(["\n    padding: 45px 25px 20px 25px;\n    background-color: var(--white);\n    position: relative;\n    border-radius: 10px;\n    height: 320px;\n"],["\n    padding: 45px 25px 20px 25px;\n    background-color: var(--white);\n    position: relative;\n    border-radius: 10px;\n    height: 320px;\n"]))),Qo=ir.h3($o||($o=Ho(["\n    font-family: var(--montserrat-extrabold);\n    font-size: 20px;\n    font-weight: 900;\n    line-height: 24px;\n    text-align: center;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-size: 20px;\n    font-weight: 900;\n    line-height: 24px;\n    text-align: center;\n"]))),Xo=ir.div(Uo||(Uo=Ho(["\n    margin: 3px auto 0 auto;\n    display: flex;\n    justify-content: center;\n"],["\n    margin: 3px auto 0 auto;\n    display: flex;\n    justify-content: center;\n"]))),Ko=ir.div(qo||(qo=Ho(["\n    margin-top: 10px;\n    text-align: center;\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 20px;\n"],["\n    margin-top: 10px;\n    text-align: center;\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 20px;\n"]))),Jo=function(e){return(0,t.jsx)(Wo,{children:(0,t.jsxs)(Yo,{children:[(0,t.jsx)(Go,{src:e.avatar}),(0,t.jsx)(Qo,{children:e.username}),(0,t.jsxs)(Xo,{children:[(0,t.jsx)(Do,{width:"22",height:"22"}),(0,t.jsx)(Do,{width:"22",height:"22"}),(0,t.jsx)(Do,{width:"22",height:"22"}),(0,t.jsx)(Do,{width:"22",height:"22"}),(0,t.jsx)(Do,{width:"22",height:"22"})]}),(0,t.jsx)(Ko,{children:e.text})]})})};const Zo=i.p+"f62f7730fabfa4ff062d.png",ea=i.p+"bf65e1643526132f16cf.png",na=i.p+"354f75211cd077177052.png";var ta,ra,ia,oa,aa,sa,la,ca,ua=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},da=ir.section(ta||(ta=ua(["\n    padding-top: clamp(30px, 4vw, 40px);\n    padding-bottom: clamp(30px, 4vw, 40px);\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n"],["\n    padding-top: clamp(30px, 4vw, 40px);\n    padding-bottom: clamp(30px, 4vw, 40px);\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n"]))),pa=ir.h2(ra||(ra=ua(["\n    font-family: var(--montserrat-extrabold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: 29px;\n    text-align: center;\n    color: var(--white);\n    margin-bottom: clamp(30px, 4.5vw, 40px);\n\n    @media screen and (min-width: 900px) {\n        text-align: left;\n    }\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: 29px;\n    text-align: center;\n    color: var(--white);\n    margin-bottom: clamp(30px, 4.5vw, 40px);\n\n    @media screen and (min-width: 900px) {\n        text-align: left;\n    }\n"]))),fa=ir.div(ia||(ia=ua(["\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: 1fr;\n\n    @media screen and (min-width: 900px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n"],["\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: 1fr;\n\n    @media screen and (min-width: 900px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n"]))),ha=function(){return(0,t.jsx)(da,{id:"reviews",children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(pa,{children:"Наши отзывы"}),(0,t.jsxs)(fa,{children:[(0,t.jsx)(Jo,{avatar:Zo,username:"Алиса С.",text:"Купила электростанцию для поездок на природу и не пожалела! Теперь у меня всегда есть зарядка для телефона, планшета, ноутбука, а также свет для вечерних посиделок. Отличное качество и компактность, рекомендую!"}),(0,t.jsx)(Jo,{avatar:ea,username:"Андрей Н.",text:"На даче нет постоянного электричества, и эта станция  стала  настоящим спасением! Теперь у меня есть свет, можно  включить холодильник, сделать  зарядку телефона и даже  посмотреть телевизор."}),(0,t.jsx)(Jo,{avatar:na,username:"Анатолий К.",text:"Работаю на строительстве и часто бывают проблемы с электричеством. Эта станция  решила все проблемы! Теперь  у  меня всегда есть питание для  инструмента и света.  Рекомендую!"})]})]})})},ga=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},ma=ir.div(oa||(oa=ga(["\n    width: 100%;\n    border: 1px solid #B8B8B8;\n    border-radius: 10px;\n    overflow: hidden;\n    background-color: #F5F5F5;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n"],["\n    width: 100%;\n    border: 1px solid #B8B8B8;\n    border-radius: 10px;\n    overflow: hidden;\n    background-color: #F5F5F5;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n"]))),xa=ir.img(aa||(aa=ga(["\n    width: 100%;\n    height: 148px;\n    object-position: center;\n    object-fit: contain;\n    background-color: var(--white);\n"],["\n    width: 100%;\n    height: 148px;\n    object-position: center;\n    object-fit: contain;\n    background-color: var(--white);\n"]))),va=ir.div(sa||(sa=ga(["\n    padding: 15px 15px 20px 15px;\n"],["\n    padding: 15px 15px 20px 15px;\n"]))),ya=ir.h3(la||(la=ga(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 14px;\n    line-height: 17px;\n    text-align: start;\n    margin-bottom: 5px;\n    text-decoration: none!important;\n    color: #000;\n\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 14px;\n    line-height: 17px;\n    text-align: start;\n    margin-bottom: 5px;\n    text-decoration: none!important;\n    color: #000;\n\n"]))),ba=ir.div(ca||(ca=ga(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 5px;\n    text-decoration: none;\n    color: #000;\n    \n    & > * {\n        font-family: var(--montserrat-regular);\n        font-size: 12px;\n        line-height: 16px;\n        text-decoration: none;\n    }\n    \n    & > *:first-child {\n        font-weight: 600;\n    }\n\n    & > *:last-child {\n        font-weight: 500;\n        text-align: right;\n    }\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 5px;\n    text-decoration: none;\n    color: #000;\n    \n    & > * {\n        font-family: var(--montserrat-regular);\n        font-size: 12px;\n        line-height: 16px;\n        text-decoration: none;\n    }\n    \n    & > *:first-child {\n        font-weight: 600;\n    }\n\n    & > *:last-child {\n        font-weight: 500;\n        text-align: right;\n    }\n"]))),wa=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(ma,{children:[(0,t.jsx)(xa,{src:e.photo,alt:""}),(0,t.jsxs)(va,{children:[(0,t.jsx)(ya,{children:e.title}),(0,t.jsxs)(ba,{children:[(0,t.jsx)("div",{children:"Мощность"}),(0,t.jsxs)("div",{children:[e.power," Ватт"]})]}),(0,t.jsxs)(ba,{children:[(0,t.jsx)("div",{children:"Ёмкость аккумулятора"}),(0,t.jsx)("div",{children:e.capacity})]}),(0,t.jsxs)(ba,{children:[(0,t.jsx)("div",{children:"Вес"}),(0,t.jsx)("div",{children:e.weight})]}),(0,t.jsxs)(ba,{children:[(0,t.jsx)("div",{children:"Размер"}),(0,t.jsxs)("div",{children:[e.height,"x",e.length,"x",e.width," см"]})]})]})]})})},ka=function(){return e=void 0,n=void 0,r=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(e){switch(e.label){case 0:return[4,fetch("/api/product/popular")];case 1:return[2,e.sent()]}}))},new((t=void 0)||(t=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((r=r.apply(e,n||[])).next())}));var e,n,t,r};const Sa=i.p+"1e6443fb23ddad8521ff.jpg";var ja,Ea,Ca,_a,Oa=function(e){return e.photos.length<1?Sa:"/api/public/"+e.photos[0].source},Fa=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Pa=ir.section(ja||(ja=Fa(["\n    padding: 50px 0;\n"],["\n    padding: 50px 0;\n"]))),Ta=ir.h2(Ea||(Ea=Fa(["\n    font-family: var(--montserrat-extrabold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 5vw, 61px);\n    text-align: center;\n    margin-bottom: 50px;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 5vw, 61px);\n    text-align: center;\n    margin-bottom: 50px;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"]))),za=ir.div(Ca||(Ca=Fa(["\n    margin-top: 20px;\n    display: flex;\n    justify-content: center;\n"],["\n    margin-top: 20px;\n    display: flex;\n    justify-content: center;\n"]))),Aa=ir.div(_a||(_a=Fa(["\n    display: grid;\n    grid-column-gap: 20px;\n    grid-row-gap: 40px;\n\n    grid-template-columns: 1fr;\n    \n    @media screen and (min-width: 900px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n\n    @media screen and (min-width: 1200px) {\n        grid-template-columns: repeat(4, 1fr);\n    }\n"],["\n    display: grid;\n    grid-column-gap: 20px;\n    grid-row-gap: 40px;\n\n    grid-template-columns: 1fr;\n    \n    @media screen and (min-width: 900px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n\n    @media screen and (min-width: 1200px) {\n        grid-template-columns: repeat(4, 1fr);\n    }\n"]))),La=function(){var e=(0,o.useState)([]),n=e[0],r=e[1];return(0,o.useEffect)((function(){var e,n,t,i;e=void 0,n=void 0,i=function(){var e;return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(n){switch(n.label){case 0:return[4,ka()];case 1:return[4,n.sent().json()];case 2:return e=n.sent(),r(e),[2]}}))},new((t=void 0)||(t=Promise))((function(r,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){e.done?r(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((i=i.apply(e,n||[])).next())}))}),[]),(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Pa,{children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(Ta,{children:"Популярные товары"}),(0,t.jsx)(Aa,{children:n.map((function(e){return(0,t.jsx)(Pr,{to:"/product/"+e.id,style:{textDecoration:"none"},children:(0,t.jsx)(wa,{title:e.model,photo:Oa(e),power:+e.rated_power,capacity:e.capacity,weight:e.gross_weight,height:+e.height,length:+e.length,width:+e.width})},e.id)}))}),(0,t.jsx)(za,{children:(0,t.jsx)(Pr,{to:"catalog",children:(0,t.jsx)(xr,{text:"Смотреть далее"})})})]})})})},Ma=e=>"checkbox"===e.type,Na=e=>e instanceof Date,Ra=e=>null==e;const Da=e=>"object"==typeof e;var Ba=e=>!Ra(e)&&!Array.isArray(e)&&Da(e)&&!Na(e),Ia=e=>Ba(e)&&e.target?Ma(e.target)?e.target.checked:e.target.value:e,Va=(e,n)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(n)),$a=e=>{const n=e.constructor&&e.constructor.prototype;return Ba(n)&&n.hasOwnProperty("isPrototypeOf")},Ua="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function qa(e){let n;const t=Array.isArray(e);if(e instanceof Date)n=new Date(e);else if(e instanceof Set)n=new Set(e);else{if(Ua&&(e instanceof Blob||e instanceof FileList)||!t&&!Ba(e))return e;if(n=t?[]:{},t||$a(e))for(const t in e)e.hasOwnProperty(t)&&(n[t]=qa(e[t]));else n=e}return n}var Ha=e=>Array.isArray(e)?e.filter(Boolean):[],Wa=e=>void 0===e,Ga=(e,n,t)=>{if(!n||!Ba(e))return t;const r=Ha(n.split(/[,[\].]+?/)).reduce(((e,n)=>Ra(e)?e:e[n]),e);return Wa(r)||r===e?Wa(e[n])?t:e[n]:r},Ya=e=>"boolean"==typeof e,Qa=e=>/^\w*$/.test(e),Xa=e=>Ha(e.replace(/["|']|\]/g,"").split(/\.|\[/)),Ka=(e,n,t)=>{let r=-1;const i=Qa(n)?[n]:Xa(n),o=i.length,a=o-1;for(;++r<o;){const n=i[r];let o=t;if(r!==a){const t=e[n];o=Ba(t)||Array.isArray(t)?t:isNaN(+i[r+1])?{}:[]}if("__proto__"===n)return;e[n]=o,e=e[n]}return e};const Ja={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},Za={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},es="pattern",ns="required",ts=o.createContext(null),rs=()=>o.useContext(ts),is=e=>{const{children:n,...t}=e;return o.createElement(ts.Provider,{value:t},n)};var os=e=>Ba(e)&&!Object.keys(e).length,as=e=>Array.isArray(e)?e:[e];var ss=e=>"string"==typeof e,ls=(e,n,t,r,i)=>ss(e)?(r&&n.watch.add(e),Ga(t,e,i)):Array.isArray(e)?e.map((e=>(r&&n.watch.add(e),Ga(t,e)))):(r&&(n.watchAll=!0),t),cs=(e,n,t,r,i)=>n?{...t[e],types:{...t[e]&&t[e].types?t[e].types:{},[r]:i||!0}}:{},us=e=>({isOnSubmit:!e||e===Za.onSubmit,isOnBlur:e===Za.onBlur,isOnChange:e===Za.onChange,isOnAll:e===Za.all,isOnTouch:e===Za.onTouched}),ds=(e,n,t)=>!t&&(n.watchAll||n.watch.has(e)||[...n.watch].some((n=>e.startsWith(n)&&/^\.\w+/.test(e.slice(n.length)))));const ps=(e,n,t,r)=>{for(const i of t||Object.keys(e)){const t=Ga(e,i);if(t){const{_f:e,...o}=t;if(e){if(e.refs&&e.refs[0]&&n(e.refs[0],i)&&!r)return!0;if(e.ref&&n(e.ref,e.name)&&!r)return!0;if(ps(o,n))break}else if(Ba(o)&&ps(o,n))break}}};var fs=(e,n,t)=>{const r=as(Ga(e,t));return Ka(r,"root",n[t]),Ka(e,t,r),e},hs=e=>"file"===e.type,gs=e=>"function"==typeof e,ms=e=>{if(!Ua)return!1;const n=e?e.ownerDocument:0;return e instanceof(n&&n.defaultView?n.defaultView.HTMLElement:HTMLElement)},xs=e=>ss(e),vs=e=>"radio"===e.type,ys=e=>e instanceof RegExp;const bs={value:!1,isValid:!1},ws={value:!0,isValid:!0};var ks=e=>{if(Array.isArray(e)){if(e.length>1){const n=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:n,isValid:!!n.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!Wa(e[0].attributes.value)?Wa(e[0].value)||""===e[0].value?ws:{value:e[0].value,isValid:!0}:ws:bs}return bs};const Ss={isValid:!1,value:null};var js=e=>Array.isArray(e)?e.reduce(((e,n)=>n&&n.checked&&!n.disabled?{isValid:!0,value:n.value}:e),Ss):Ss;function Es(e,n,t="validate"){if(xs(e)||Array.isArray(e)&&e.every(xs)||Ya(e)&&!e)return{type:t,message:xs(e)?e:"",ref:n}}var Cs=e=>Ba(e)&&!ys(e)?e:{value:e,message:""},_s=async(e,n,t,r,i)=>{const{ref:o,refs:a,required:s,maxLength:l,minLength:c,min:u,max:d,pattern:p,validate:f,name:h,valueAsNumber:g,mount:m,disabled:x}=e._f,v=Ga(n,h);if(!m||x)return{};const y=a?a[0]:o,b=e=>{r&&y.reportValidity&&(y.setCustomValidity(Ya(e)?"":e||""),y.reportValidity())},w={},k=vs(o),S=Ma(o),j=k||S,E=(g||hs(o))&&Wa(o.value)&&Wa(v)||ms(o)&&""===o.value||""===v||Array.isArray(v)&&!v.length,C=cs.bind(null,h,t,w),_=(e,n,t,r="maxLength",i="minLength")=>{const a=e?n:t;w[h]={type:e?r:i,message:a,ref:o,...C(e?r:i,a)}};if(i?!Array.isArray(v)||!v.length:s&&(!j&&(E||Ra(v))||Ya(v)&&!v||S&&!ks(a).isValid||k&&!js(a).isValid)){const{value:e,message:n}=xs(s)?{value:!!s,message:s}:Cs(s);if(e&&(w[h]={type:ns,message:n,ref:y,...C(ns,n)},!t))return b(n),w}if(!(E||Ra(u)&&Ra(d))){let e,n;const r=Cs(d),i=Cs(u);if(Ra(v)||isNaN(v)){const t=o.valueAsDate||new Date(v),a=e=>new Date((new Date).toDateString()+" "+e),s="time"==o.type,l="week"==o.type;ss(r.value)&&v&&(e=s?a(v)>a(r.value):l?v>r.value:t>new Date(r.value)),ss(i.value)&&v&&(n=s?a(v)<a(i.value):l?v<i.value:t<new Date(i.value))}else{const t=o.valueAsNumber||(v?+v:v);Ra(r.value)||(e=t>r.value),Ra(i.value)||(n=t<i.value)}if((e||n)&&(_(!!e,r.message,i.message,"max","min"),!t))return b(w[h].message),w}if((l||c)&&!E&&(ss(v)||i&&Array.isArray(v))){const e=Cs(l),n=Cs(c),r=!Ra(e.value)&&v.length>+e.value,i=!Ra(n.value)&&v.length<+n.value;if((r||i)&&(_(r,e.message,n.message),!t))return b(w[h].message),w}if(p&&!E&&ss(v)){const{value:e,message:n}=Cs(p);if(ys(e)&&!v.match(e)&&(w[h]={type:es,message:n,ref:o,...C(es,n)},!t))return b(n),w}if(f)if(gs(f)){const e=Es(await f(v,n),y);if(e&&(w[h]={...e,...C("validate",e.message)},!t))return b(e.message),w}else if(Ba(f)){let e={};for(const r in f){if(!os(e)&&!t)break;const i=Es(await f[r](v,n),y,r);i&&(e={...i,...C(r,i.message)},b(i.message),t&&(w[h]=e))}if(!os(e)&&(w[h]={ref:y,...e},!t))return w}return b(!0),w};function Os(e,n){const t=Array.isArray(n)?n:Qa(n)?[n]:Xa(n),r=1===t.length?e:function(e,n){const t=n.slice(0,-1).length;let r=0;for(;r<t;)e=Wa(e)?r++:e[n[r++]];return e}(e,t),i=t.length-1,o=t[i];return r&&delete r[o],0!==i&&(Ba(r)&&os(r)||Array.isArray(r)&&function(e){for(const n in e)if(e.hasOwnProperty(n)&&!Wa(e[n]))return!1;return!0}(r))&&Os(e,t.slice(0,-1)),e}var Fs=()=>{let e=[];return{get observers(){return e},next:n=>{for(const t of e)t.next&&t.next(n)},subscribe:n=>(e.push(n),{unsubscribe:()=>{e=e.filter((e=>e!==n))}}),unsubscribe:()=>{e=[]}}},Ps=e=>Ra(e)||!Da(e);function Ts(e,n){if(Ps(e)||Ps(n))return e===n;if(Na(e)&&Na(n))return e.getTime()===n.getTime();const t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(const i of t){const t=e[i];if(!r.includes(i))return!1;if("ref"!==i){const e=n[i];if(Na(t)&&Na(e)||Ba(t)&&Ba(e)||Array.isArray(t)&&Array.isArray(e)?!Ts(t,e):t!==e)return!1}}return!0}var zs=e=>"select-multiple"===e.type,As=e=>vs(e)||Ma(e),Ls=e=>ms(e)&&e.isConnected,Ms=e=>{for(const n in e)if(gs(e[n]))return!0;return!1};function Ns(e,n={}){const t=Array.isArray(e);if(Ba(e)||t)for(const t in e)Array.isArray(e[t])||Ba(e[t])&&!Ms(e[t])?(n[t]=Array.isArray(e[t])?[]:{},Ns(e[t],n[t])):Ra(e[t])||(n[t]=!0);return n}function Rs(e,n,t){const r=Array.isArray(e);if(Ba(e)||r)for(const r in e)Array.isArray(e[r])||Ba(e[r])&&!Ms(e[r])?Wa(n)||Ps(t[r])?t[r]=Array.isArray(e[r])?Ns(e[r],[]):{...Ns(e[r])}:Rs(e[r],Ra(n)?{}:n[r],t[r]):t[r]=!Ts(e[r],n[r]);return t}var Ds=(e,n)=>Rs(e,n,Ns(n)),Bs=(e,{valueAsNumber:n,valueAsDate:t,setValueAs:r})=>Wa(e)?e:n?""===e?NaN:e?+e:e:t&&ss(e)?new Date(e):r?r(e):e;function Is(e){const n=e.ref;if(!(e.refs?e.refs.every((e=>e.disabled)):n.disabled))return hs(n)?n.files:vs(n)?js(e.refs).value:zs(n)?[...n.selectedOptions].map((({value:e})=>e)):Ma(n)?ks(e.refs).value:Bs(Wa(n.value)?e.ref.value:n.value,e)}var Vs=(e,n,t,r)=>{const i={};for(const t of e){const e=Ga(n,t);e&&Ka(i,t,e._f)}return{criteriaMode:t,names:[...e],fields:i,shouldUseNativeValidation:r}},$s=e=>Wa(e)?e:ys(e)?e.source:Ba(e)?ys(e.value)?e.value.source:e.value:e;const Us="AsyncFunction";var qs=e=>!(e&&e.validate||!(gs(e.validate)&&e.validate.constructor.name===Us||Ba(e.validate)&&Object.values(e.validate).find((e=>e.constructor.name===Us)))),Hs=e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate);function Ws(e,n,t){const r=Ga(e,t);if(r||Qa(t))return{error:r,name:t};const i=t.split(".");for(;i.length;){const r=i.join("."),o=Ga(n,r),a=Ga(e,r);if(o&&!Array.isArray(o)&&t!==r)return{name:t};if(a&&a.type)return{name:r,error:a};i.pop()}return{name:t}}var Gs=(e,n,t,r,i)=>!i.isOnAll&&(!t&&i.isOnTouch?!(n||e):(t?r.isOnBlur:i.isOnBlur)?!e:!(t?r.isOnChange:i.isOnChange)||e),Ys=(e,n)=>!Ha(Ga(e,n)).length&&Os(e,n);const Qs={mode:Za.onSubmit,reValidateMode:Za.onChange,shouldFocusError:!0};function Xs(e={}){let n,t={...Qs,...e},r={submitCount:0,isDirty:!1,isLoading:gs(t.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},validatingFields:{},errors:t.errors||{},disabled:t.disabled||!1},i={},o=(Ba(t.defaultValues)||Ba(t.values))&&qa(t.defaultValues||t.values)||{},a=t.shouldUnregister?{}:qa(o),s={action:!1,mount:!1,watch:!1},l={mount:new Set,unMount:new Set,array:new Set,watch:new Set},c=0;const u={isDirty:!1,dirtyFields:!1,validatingFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},d={values:Fs(),array:Fs(),state:Fs()},p=us(t.mode),f=us(t.reValidateMode),h=t.criteriaMode===Za.all,g=async e=>{if(u.isValid||e){const e=t.resolver?os((await y()).errors):await b(i,!0);e!==r.isValid&&d.state.next({isValid:e})}},m=(e,n)=>{(u.isValidating||u.validatingFields)&&((e||Array.from(l.mount)).forEach((e=>{e&&(n?Ka(r.validatingFields,e,n):Os(r.validatingFields,e))})),d.state.next({validatingFields:r.validatingFields,isValidating:!os(r.validatingFields)}))},x=(e,n,t,r)=>{const l=Ga(i,e);if(l){const i=Ga(a,e,Wa(t)?Ga(o,e):t);Wa(i)||r&&r.defaultChecked||n?Ka(a,e,n?i:Is(l._f)):S(e,i),s.mount&&g()}},v=(e,n,t,a,s)=>{let l=!1,c=!1;const p={name:e},f=!!(Ga(i,e)&&Ga(i,e)._f&&Ga(i,e)._f.disabled);if(!t||a){u.isDirty&&(c=r.isDirty,r.isDirty=p.isDirty=w(),l=c!==p.isDirty);const t=f||Ts(Ga(o,e),n);c=!(f||!Ga(r.dirtyFields,e)),t||f?Os(r.dirtyFields,e):Ka(r.dirtyFields,e,!0),p.dirtyFields=r.dirtyFields,l=l||u.dirtyFields&&c!==!t}if(t){const n=Ga(r.touchedFields,e);n||(Ka(r.touchedFields,e,t),p.touchedFields=r.touchedFields,l=l||u.touchedFields&&n!==t)}return l&&s&&d.state.next(p),l?p:{}},y=async e=>{m(e,!0);const n=await t.resolver(a,t.context,Vs(e||l.mount,i,t.criteriaMode,t.shouldUseNativeValidation));return m(e),n},b=async(e,n,i={valid:!0})=>{for(const o in e){const s=e[o];if(s){const{_f:e,...c}=s;if(e){const c=l.array.has(e.name),d=s._f&&qs(s._f);d&&u.validatingFields&&m([o],!0);const p=await _s(s,a,h,t.shouldUseNativeValidation&&!n,c);if(d&&u.validatingFields&&m([o]),p[e.name]&&(i.valid=!1,n))break;!n&&(Ga(p,e.name)?c?fs(r.errors,p,e.name):Ka(r.errors,e.name,p[e.name]):Os(r.errors,e.name))}!os(c)&&await b(c,n,i)}}return i.valid},w=(e,n)=>(e&&n&&Ka(a,e,n),!Ts(F(),o)),k=(e,n,t)=>ls(e,l,{...s.mount?a:Wa(n)?o:ss(e)?{[e]:n}:n},t,n),S=(e,n,t={})=>{const r=Ga(i,e);let o=n;if(r){const t=r._f;t&&(!t.disabled&&Ka(a,e,Bs(n,t)),o=ms(t.ref)&&Ra(n)?"":n,zs(t.ref)?[...t.ref.options].forEach((e=>e.selected=o.includes(e.value))):t.refs?Ma(t.ref)?t.refs.length>1?t.refs.forEach((e=>(!e.defaultChecked||!e.disabled)&&(e.checked=Array.isArray(o)?!!o.find((n=>n===e.value)):o===e.value))):t.refs[0]&&(t.refs[0].checked=!!o):t.refs.forEach((e=>e.checked=e.value===o)):hs(t.ref)?t.ref.value="":(t.ref.value=o,t.ref.type||d.values.next({name:e,values:{...a}})))}(t.shouldDirty||t.shouldTouch)&&v(e,o,t.shouldTouch,t.shouldDirty,!0),t.shouldValidate&&O(e)},j=(e,n,t)=>{for(const r in n){const o=n[r],a=`${e}.${r}`,s=Ga(i,a);!l.array.has(e)&&Ps(o)&&(!s||s._f)||Na(o)?S(a,o,t):j(a,o,t)}},E=(e,n,t={})=>{const c=Ga(i,e),p=l.array.has(e),f=qa(n);Ka(a,e,f),p?(d.array.next({name:e,values:{...a}}),(u.isDirty||u.dirtyFields)&&t.shouldDirty&&d.state.next({name:e,dirtyFields:Ds(o,a),isDirty:w(e,f)})):!c||c._f||Ra(f)?S(e,f,t):j(e,f,t),ds(e,l)&&d.state.next({...r}),d.values.next({name:s.mount?e:void 0,values:{...a}})},C=async o=>{s.mount=!0;const x=o.target;let w=x.name,k=!0;const S=Ga(i,w),j=e=>{k=Number.isNaN(e)||Ts(e,Ga(a,w,e))};if(S){let s,E;const C=x.type?Is(S._f):Ia(o),_=o.type===Ja.BLUR||o.type===Ja.FOCUS_OUT,F=!Hs(S._f)&&!t.resolver&&!Ga(r.errors,w)&&!S._f.deps||Gs(_,Ga(r.touchedFields,w),r.isSubmitted,f,p),P=ds(w,l,_);Ka(a,w,C),_?(S._f.onBlur&&S._f.onBlur(o),n&&n(0)):S._f.onChange&&S._f.onChange(o);const T=v(w,C,_,!1),z=!os(T)||P;if(!_&&d.values.next({name:w,type:o.type,values:{...a}}),F)return u.isValid&&("onBlur"===e.mode?_&&g():g()),z&&d.state.next({name:w,...P?{}:T});if(!_&&P&&d.state.next({...r}),t.resolver){const{errors:e}=await y([w]);if(j(C),k){const n=Ws(r.errors,i,w),t=Ws(e,i,n.name||w);s=t.error,w=t.name,E=os(e)}}else m([w],!0),s=(await _s(S,a,h,t.shouldUseNativeValidation))[w],m([w]),j(C),k&&(s?E=!1:u.isValid&&(E=await b(i,!0)));k&&(S._f.deps&&O(S._f.deps),((t,i,o,a)=>{const s=Ga(r.errors,t),l=u.isValid&&Ya(i)&&r.isValid!==i;var p;if(e.delayError&&o?(p=()=>((e,n)=>{Ka(r.errors,e,n),d.state.next({errors:r.errors})})(t,o),n=e=>{clearTimeout(c),c=setTimeout(p,e)},n(e.delayError)):(clearTimeout(c),n=null,o?Ka(r.errors,t,o):Os(r.errors,t)),(o?!Ts(s,o):s)||!os(a)||l){const e={...a,...l&&Ya(i)?{isValid:i}:{},errors:r.errors,name:t};r={...r,...e},d.state.next(e)}})(w,E,s,T))}},_=(e,n)=>{if(Ga(r.errors,n)&&e.focus)return e.focus(),1},O=async(e,n={})=>{let o,a;const s=as(e);if(t.resolver){const n=await(async e=>{const{errors:n}=await y(e);if(e)for(const t of e){const e=Ga(n,t);e?Ka(r.errors,t,e):Os(r.errors,t)}else r.errors=n;return n})(Wa(e)?e:s);o=os(n),a=e?!s.some((e=>Ga(n,e))):o}else e?(a=(await Promise.all(s.map((async e=>{const n=Ga(i,e);return await b(n&&n._f?{[e]:n}:n)})))).every(Boolean),(a||r.isValid)&&g()):a=o=await b(i);return d.state.next({...!ss(e)||u.isValid&&o!==r.isValid?{}:{name:e},...t.resolver||!e?{isValid:o}:{},errors:r.errors}),n.shouldFocus&&!a&&ps(i,_,e?s:l.mount),a},F=e=>{const n={...s.mount?a:o};return Wa(e)?n:ss(e)?Ga(n,e):e.map((e=>Ga(n,e)))},P=(e,n)=>({invalid:!!Ga((n||r).errors,e),isDirty:!!Ga((n||r).dirtyFields,e),error:Ga((n||r).errors,e),isValidating:!!Ga(r.validatingFields,e),isTouched:!!Ga((n||r).touchedFields,e)}),T=(e,n,t)=>{const o=(Ga(i,e,{_f:{}})._f||{}).ref,a=Ga(r.errors,e)||{},{ref:s,message:l,type:c,...u}=a;Ka(r.errors,e,{...u,...n,ref:o}),d.state.next({name:e,errors:r.errors,isValid:!1}),t&&t.shouldFocus&&o&&o.focus&&o.focus()},z=(e,n={})=>{for(const s of e?as(e):l.mount)l.mount.delete(s),l.array.delete(s),n.keepValue||(Os(i,s),Os(a,s)),!n.keepError&&Os(r.errors,s),!n.keepDirty&&Os(r.dirtyFields,s),!n.keepTouched&&Os(r.touchedFields,s),!n.keepIsValidating&&Os(r.validatingFields,s),!t.shouldUnregister&&!n.keepDefaultValue&&Os(o,s);d.values.next({values:{...a}}),d.state.next({...r,...n.keepDirty?{isDirty:w()}:{}}),!n.keepIsValid&&g()},A=({disabled:e,name:n,field:t,fields:r,value:i})=>{if(Ya(e)&&s.mount||e){const o=e?void 0:Wa(i)?Is(t?t._f:Ga(r,n)._f):i;Ka(a,n,o),v(n,o,!1,!1,!0)}},L=(n,r={})=>{let a=Ga(i,n);const c=Ya(r.disabled)||Ya(e.disabled);return Ka(i,n,{...a||{},_f:{...a&&a._f?a._f:{ref:{name:n}},name:n,mount:!0,...r}}),l.mount.add(n),a?A({field:a,disabled:Ya(r.disabled)?r.disabled:e.disabled,name:n,value:r.value}):x(n,!0,r.value),{...c?{disabled:r.disabled||e.disabled}:{},...t.progressive?{required:!!r.required,min:$s(r.min),max:$s(r.max),minLength:$s(r.minLength),maxLength:$s(r.maxLength),pattern:$s(r.pattern)}:{},name:n,onChange:C,onBlur:C,ref:e=>{if(e){L(n,r),a=Ga(i,n);const t=Wa(e.value)&&e.querySelectorAll&&e.querySelectorAll("input,select,textarea")[0]||e,s=As(t),l=a._f.refs||[];if(s?l.find((e=>e===t)):t===a._f.ref)return;Ka(i,n,{_f:{...a._f,...s?{refs:[...l.filter(Ls),t,...Array.isArray(Ga(o,n))?[{}]:[]],ref:{type:t.type,name:n}}:{ref:t}}}),x(n,!1,void 0,t)}else a=Ga(i,n,{}),a._f&&(a._f.mount=!1),(t.shouldUnregister||r.shouldUnregister)&&(!Va(l.array,n)||!s.action)&&l.unMount.add(n)}}},M=()=>t.shouldFocusError&&ps(i,_,l.mount),N=(e,n)=>async o=>{let s;o&&(o.preventDefault&&o.preventDefault(),o.persist&&o.persist());let l=qa(a);if(d.state.next({isSubmitting:!0}),t.resolver){const{errors:e,values:n}=await y();r.errors=e,l=n}else await b(i);if(Os(r.errors,"root"),os(r.errors)){d.state.next({errors:{}});try{await e(l,o)}catch(e){s=e}}else n&&await n({...r.errors},o),M(),setTimeout(M);if(d.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:os(r.errors)&&!s,submitCount:r.submitCount+1,errors:r.errors}),s)throw s},R=(n,t={})=>{const c=n?qa(n):o,p=qa(c),f=os(n),h=f?o:p;if(t.keepDefaultValues||(o=c),!t.keepValues){if(t.keepDirtyValues)for(const e of l.mount)Ga(r.dirtyFields,e)?Ka(h,e,Ga(a,e)):E(e,Ga(h,e));else{if(Ua&&Wa(n))for(const e of l.mount){const n=Ga(i,e);if(n&&n._f){const e=Array.isArray(n._f.refs)?n._f.refs[0]:n._f.ref;if(ms(e)){const n=e.closest("form");if(n){n.reset();break}}}}i={}}a=e.shouldUnregister?t.keepDefaultValues?qa(o):{}:qa(h),d.array.next({values:{...h}}),d.values.next({values:{...h}})}l={mount:t.keepDirtyValues?l.mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},s.mount=!u.isValid||!!t.keepIsValid||!!t.keepDirtyValues,s.watch=!!e.shouldUnregister,d.state.next({submitCount:t.keepSubmitCount?r.submitCount:0,isDirty:!f&&(t.keepDirty?r.isDirty:!(!t.keepDefaultValues||Ts(n,o))),isSubmitted:!!t.keepIsSubmitted&&r.isSubmitted,dirtyFields:f?{}:t.keepDirtyValues?t.keepDefaultValues&&a?Ds(o,a):r.dirtyFields:t.keepDefaultValues&&n?Ds(o,n):t.keepDirty?r.dirtyFields:{},touchedFields:t.keepTouched?r.touchedFields:{},errors:t.keepErrors?r.errors:{},isSubmitSuccessful:!!t.keepIsSubmitSuccessful&&r.isSubmitSuccessful,isSubmitting:!1})},D=(e,n)=>R(gs(e)?e(a):e,n);return{control:{register:L,unregister:z,getFieldState:P,handleSubmit:N,setError:T,_executeSchema:y,_getWatch:k,_getDirty:w,_updateValid:g,_removeUnmounted:()=>{for(const e of l.unMount){const n=Ga(i,e);n&&(n._f.refs?n._f.refs.every((e=>!Ls(e))):!Ls(n._f.ref))&&z(e)}l.unMount=new Set},_updateFieldArray:(e,n=[],t,l,c=!0,p=!0)=>{if(l&&t){if(s.action=!0,p&&Array.isArray(Ga(i,e))){const n=t(Ga(i,e),l.argA,l.argB);c&&Ka(i,e,n)}if(p&&Array.isArray(Ga(r.errors,e))){const n=t(Ga(r.errors,e),l.argA,l.argB);c&&Ka(r.errors,e,n),Ys(r.errors,e)}if(u.touchedFields&&p&&Array.isArray(Ga(r.touchedFields,e))){const n=t(Ga(r.touchedFields,e),l.argA,l.argB);c&&Ka(r.touchedFields,e,n)}u.dirtyFields&&(r.dirtyFields=Ds(o,a)),d.state.next({name:e,isDirty:w(e,n),dirtyFields:r.dirtyFields,errors:r.errors,isValid:r.isValid})}else Ka(a,e,n)},_updateDisabledField:A,_getFieldArray:n=>Ha(Ga(s.mount?a:o,n,e.shouldUnregister?Ga(o,n,[]):[])),_reset:R,_resetDefaultValues:()=>gs(t.defaultValues)&&t.defaultValues().then((e=>{D(e,t.resetOptions),d.state.next({isLoading:!1})})),_updateFormState:e=>{r={...r,...e}},_disableForm:e=>{Ya(e)&&(d.state.next({disabled:e}),ps(i,((n,t)=>{const r=Ga(i,t);r&&(n.disabled=r._f.disabled||e,Array.isArray(r._f.refs)&&r._f.refs.forEach((n=>{n.disabled=r._f.disabled||e})))}),0,!1))},_subjects:d,_proxyFormState:u,_setErrors:e=>{r.errors=e,d.state.next({errors:r.errors,isValid:!1})},get _fields(){return i},get _formValues(){return a},get _state(){return s},set _state(e){s=e},get _defaultValues(){return o},get _names(){return l},set _names(e){l=e},get _formState(){return r},set _formState(e){r=e},get _options(){return t},set _options(e){t={...t,...e}}},trigger:O,register:L,handleSubmit:N,watch:(e,n)=>gs(e)?d.values.subscribe({next:t=>e(k(void 0,n),t)}):k(e,n,!0),setValue:E,getValues:F,reset:D,resetField:(e,n={})=>{Ga(i,e)&&(Wa(n.defaultValue)?E(e,qa(Ga(o,e))):(E(e,n.defaultValue),Ka(o,e,qa(n.defaultValue))),n.keepTouched||Os(r.touchedFields,e),n.keepDirty||(Os(r.dirtyFields,e),r.isDirty=n.defaultValue?w(e,qa(Ga(o,e))):w()),n.keepError||(Os(r.errors,e),u.isValid&&g()),d.state.next({...r}))},clearErrors:e=>{e&&as(e).forEach((e=>Os(r.errors,e))),d.state.next({errors:e?r.errors:{}})},unregister:z,setError:T,setFocus:(e,n={})=>{const t=Ga(i,e),r=t&&t._f;if(r){const e=r.refs?r.refs[0]:r.ref;e.focus&&(e.focus(),n.shouldSelect&&e.select())}},getFieldState:P}}function Ks(e={}){const n=o.useRef(),t=o.useRef(),[r,i]=o.useState({isDirty:!1,isValidating:!1,isLoading:gs(e.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},validatingFields:{},errors:e.errors||{},disabled:e.disabled||!1,defaultValues:gs(e.defaultValues)?void 0:e.defaultValues});n.current||(n.current={...Xs(e),formState:r});const a=n.current.control;return a._options=e,function(e){const n=o.useRef(e);n.current=e,o.useEffect((()=>{const t=!e.disabled&&n.current.subject&&n.current.subject.subscribe({next:n.current.next});return()=>{t&&t.unsubscribe()}}),[e.disabled])}({subject:a._subjects.state,next:e=>{((e,n,t,r)=>{t(e);const{name:i,...o}=e;return os(o)||Object.keys(o).length>=Object.keys(n).length||Object.keys(o).find((e=>n[e]===(!r||Za.all)))})(e,a._proxyFormState,a._updateFormState,!0)&&i({...a._formState})}}),o.useEffect((()=>a._disableForm(e.disabled)),[a,e.disabled]),o.useEffect((()=>{if(a._proxyFormState.isDirty){const e=a._getDirty();e!==r.isDirty&&a._subjects.state.next({isDirty:e})}}),[a,r.isDirty]),o.useEffect((()=>{e.values&&!Ts(e.values,t.current)?(a._reset(e.values,a._options.resetOptions),t.current=e.values,i((e=>({...e})))):a._resetDefaultValues()}),[e.values,a]),o.useEffect((()=>{e.errors&&a._setErrors(e.errors)}),[e.errors,a]),o.useEffect((()=>{a._state.mount||(a._updateValid(),a._state.mount=!0),a._state.watch&&(a._state.watch=!1,a._subjects.state.next({...a._formState})),a._removeUnmounted()})),o.useEffect((()=>{e.shouldUnregister&&a._subjects.values.next({values:a._getWatch()})}),[e.shouldUnregister,a]),n.current.formState=((e,n,t,r=!0)=>{const i={defaultValues:n._defaultValues};for(const o in e)Object.defineProperty(i,o,{get:()=>{const i=o;return n._proxyFormState[i]!==Za.all&&(n._proxyFormState[i]=!r||Za.all),t&&(t[i]=!0),e[i]}});return i})(r,a),n.current}var Js,Zs,el,nl=function(){return nl=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},nl.apply(this,arguments)},tl=ir.input(Js||(Js=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    width: 100%;\n    height: 100%;\n"],["\n    width: 100%;\n    height: 100%;\n"]))),rl=function(e){var n,r=rs();return null!=r&&(n=r.register(e.registerOpts.name,e.registerOpts.options)),(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(tl,nl({type:e.type,value:e.value,onChange:e.onChange,placeholder:e.placeholder,id:e.id},null!=n?n:null))})},il=function(){return il=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},il.apply(this,arguments)},ol=ir.div(Zs||(Zs=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    height: 45px;\n    border: 1px solid ",";\n    border-radius: 5px;\n    \n    & > input {\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        line-height: 20px;\n        padding: 12px 15px;\n    }\n"],["\n    height: 45px;\n    border: 1px solid ",";\n    border-radius: 5px;\n    \n    & > input {\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        line-height: 20px;\n        padding: 12px 15px;\n    }\n"])),(function(e){return e.$errored?"#FF0000":"#0000001A"})),al=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(ol,{$errored:e.errored,children:(0,t.jsx)(rl,il({},e))})})},sl=function(){return Math.floor(Math.random()*Date.now()).toString(36)},ll=function(){return ll=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},ll.apply(this,arguments)},cl=ir.label(el||(el=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    color: var(--white);\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px; \n    text-align: center;\n    display: block;\n    line-height: 20px;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"],["\n    color: var(--white);\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px; \n    text-align: center;\n    display: block;\n    line-height: 20px;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"]))),ul=function(e){var n,r=null!==(n=e.id)&&void 0!==n?n:sl();return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(cl,{htmlFor:r,children:e.label}),(0,t.jsx)(al,ll({},e,{id:r}))]})};const dl=i.p+"4c3845b2c556f66b6b09.png";var pl,fl,hl,gl,ml,xl,vl,yl,bl=i(844),wl=i.n(bl),kl=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Sl=function(){return Sl=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},Sl.apply(this,arguments)},jl=ir.label(pl||(pl=kl(["\n    color: var(--white);\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px; \n    text-align: center;\n    display: block;\n    line-height: 20px;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"],["\n    color: var(--white);\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px; \n    text-align: center;\n    display: block;\n    line-height: 20px;\n\n    @media screen and (min-width: 900px) {\n        text-align: start;\n    }\n"]))),El=ir.div(fl||(fl=kl(["\n    height: 45px;\n    border: 1px solid ",";\n    border-radius: 5px;\n\n    & > input {\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        line-height: 20px;\n        padding: 12px 15px;\n        width: 100%;\n        height: 100%;\n    }\n"],["\n    height: 45px;\n    border: 1px solid ",";\n    border-radius: 5px;\n\n    & > input {\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        line-height: 20px;\n        padding: 12px 15px;\n        width: 100%;\n        height: 100%;\n    }\n"])),(function(e){return e.$errored?"#FF0000":"#0000001A"})),Cl=function(e){var n,r,i=null!==(n=e.id)&&void 0!==n?n:sl(),o=rs();return null!=o&&(r=o.register(e.registerOpts.name,e.registerOpts.options)),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(jl,{htmlFor:i,children:e.label}),(0,t.jsx)(El,{$errored:e.errored,children:(0,t.jsx)(wl(),Sl({mask:"+7(999)-999-99-99",value:e.value,onChange:e.onChange,id:e.id,placeholder:e.placeholder,type:"tel"},r))})]})},_l=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Ol=function(){return Ol=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},Ol.apply(this,arguments)},Fl=ir.h2(hl||(hl=_l(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    text-align: center;\n    color: var(--white);\n    margin-bottom: 30px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    text-align: center;\n    color: var(--white);\n    margin-bottom: 30px;\n"]))),Pl=ir.section(gl||(gl=_l(["\n    padding: 30px 0;\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n    position: relative;\n    overflow: hidden;\n\n    svg {\n        position: absolute;\n        top: 150px;\n        left: -200px;\n        z-index: auto;\n    }\n"],["\n    padding: 30px 0;\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n    position: relative;\n    overflow: hidden;\n\n    svg {\n        position: absolute;\n        top: 150px;\n        left: -200px;\n        z-index: auto;\n    }\n"]))),Tl=ir.button(ml||(ml=_l(["\n    padding: 0;\n    display: block;\n    border-radius: 23px;\n    outline: none;\n    border: none;\n    margin: 20px auto 0 auto;\n    \n    @media screen and (min-width: 900px) {\n        margin: 20px 0;\n    }\n"],["\n    padding: 0;\n    display: block;\n    border-radius: 23px;\n    outline: none;\n    border: none;\n    margin: 20px auto 0 auto;\n    \n    @media screen and (min-width: 900px) {\n        margin: 20px 0;\n    }\n"]))),zl=ir.div(xl||(xl=_l(["\n    display: flex;\n    align-items: start;\n    justify-content: space-between;\n    gap: 20px;\n"],["\n    display: flex;\n    align-items: start;\n    justify-content: space-between;\n    gap: 20px;\n"]))),Al=ir.div(vl||(vl=_l(['\n    height: 455px;\n    width: clamp(500px, 50vw, 974px);\n    background-image: url("','");\n    background-repeat: no-repeat;\n    background-size: 115%;\n    background-position: 50% 80%;\n    flex-shrink: 0;\n    border-radius: 25px;\n    display: none;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n'],['\n    height: 455px;\n    width: clamp(500px, 50vw, 974px);\n    background-image: url("','");\n    background-repeat: no-repeat;\n    background-size: 115%;\n    background-position: 50% 80%;\n    flex-shrink: 0;\n    border-radius: 25px;\n    display: none;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n'])),dl),Ll=ir.form(yl||(yl=_l(["\n    width: 100%;\n    position: relative;\n    overflow: hidden;\n    \n    @media screen and (min-width: 900px) {\n        width: min(100%, 548px);    \n    }\n"],["\n    width: 100%;\n    position: relative;\n    overflow: hidden;\n    \n    @media screen and (min-width: 900px) {\n        width: min(100%, 548px);    \n    }\n"]))),Ml=function(){var e=Ks(),n=e.handleSubmit((function(e,n){return t=void 0,r=void 0,o=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(t){switch(t.label){case 0:return n.preventDefault(),[4,fetch("/api/feedback",{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}})];case 1:return t.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(e,n){function a(e){try{l(o.next(e))}catch(e){n(e)}}function s(e){try{l(o.throw(e))}catch(e){n(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof i?e:new i((function(n){n(e)}))}(n.value).then(a,s)}l((o=o.apply(t,r||[])).next())}));var t,r,i,o}),(function(e,n){n.preventDefault(),console.log("form error")}));return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(Pl,{id:"feedback",children:[(0,t.jsx)(ei,{width:808,height:761}),(0,t.jsx)(gr,{children:(0,t.jsxs)(zl,{children:[(0,t.jsx)(is,Ol({},e,{children:(0,t.jsxs)(Ll,{action:"/api/feedback",method:"POST",onSubmit:n,children:[(0,t.jsx)(Fl,{children:"Заказать звонок"}),(0,t.jsx)("div",{style:{marginBottom:"10px"},children:(0,t.jsx)(ul,{label:"Ваше имя",type:"text",placeholder:"Введите имя",registerOpts:{name:"name",options:{required:!0}},errored:Boolean(e.formState.errors.name)})}),(0,t.jsx)("div",{style:{marginBottom:"10px"},children:(0,t.jsx)(ul,{label:"Ваша фамилия",type:"text",placeholder:"Введите фамилию",registerOpts:{name:"surname",options:{required:!0}},errored:Boolean(e.formState.errors.surname)})}),(0,t.jsx)("div",{style:{marginBottom:"10px"},children:(0,t.jsx)(ul,{label:"Ваша электронная почта",type:"text",placeholder:"Введите e-mail",registerOpts:{name:"email",options:{required:!0}},errored:Boolean(e.formState.errors.email)})}),(0,t.jsx)("div",{style:{marginBottom:"10px"},children:(0,t.jsx)(Cl,{label:"Ваш номер телефона",type:"text",placeholder:"Введите номер телефона",registerOpts:{name:"phone",options:{required:!0,pattern:/^\+7\(\d{3}\)-\d{3}-\d{2}-\d{2}$/}},errored:Boolean(e.formState.errors.phone)})}),(0,t.jsx)(Tl,{type:"submit",children:(0,t.jsx)(xr,{text:"Связаться с нами"})})]})})),(0,t.jsx)(Al,{})]})})]})})};const Nl=i.p+"1fe556b10ce4c46a8ca4.png";var Rl,Dl,Bl,Il,Vl,$l,Ul,ql,Hl,Wl,Gl,Yl,Ql,Xl,Kl,Jl,Zl,ec,nc,tc,rc,ic,oc,ac,sc,lc,cc,uc,dc,pc,fc,hc,gc,mc,xc,vc,yc,bc,wc=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},kc=ir.div(Rl||(Rl=wc(["\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n    \n    padding: 8px 18px 18px 18px;\n    background-color: #5E2E82;\n    \n    & > :nth-child(2) {\n        margin: 8px 0 30px 0;\n    }\n"],["\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n    \n    padding: 8px 18px 18px 18px;\n    background-color: #5E2E82;\n    \n    & > :nth-child(2) {\n        margin: 8px 0 30px 0;\n    }\n"]))),Sc=ir.div(Dl||(Dl=wc(["\n    display: none;\n    background-color: #5E2E82;\n    align-items: center;\n    justify-content: space-between;\n    padding-right: 49px;\n    \n    @media screen and (min-width: 900px) {\n        display: flex;\n    }\n"],["\n    display: none;\n    background-color: #5E2E82;\n    align-items: center;\n    justify-content: space-between;\n    padding-right: 49px;\n    \n    @media screen and (min-width: 900px) {\n        display: flex;\n    }\n"]))),jc=ir.a(Bl||(Bl=wc(["\n    display: flex;\n    align-items: center;\n"],["\n    display: flex;\n    align-items: center;\n"]))),Ec=ir.div(Il||(Il=wc(["\n    font-family: var(--montserrat-bold);\n    font-weight: 700;\n    font-size: 12px;\n    line-height: 14px;\n    text-align: left;\n    color: #FFFFFF;\n"],["\n    font-family: var(--montserrat-bold);\n    font-weight: 700;\n    font-size: 12px;\n    line-height: 14px;\n    text-align: left;\n    color: #FFFFFF;\n"]))),Cc=ir.img(Vl||(Vl=wc(["\n    object-fit: contain;\n    object-position: center;\n    width: 49px;\n    aspect-ratio: 1;\n"],["\n    object-fit: contain;\n    object-position: center;\n    width: 49px;\n    aspect-ratio: 1;\n"]))),_c=ir.div($l||($l=wc(["\n    font-family: var(--montserrat-bold);\n    font-size: 12px;\n    font-weight: 700;\n    line-height: 14px;\n    text-align: left;\n    color: #FFFFFF;\n    display: flex;\n    align-items: center;\n    gap: 20px;\n    \n    a {\n        text-decoration: none;\n        color: #FFFFFF;\n    }\n"],["\n    font-family: var(--montserrat-bold);\n    font-size: 12px;\n    font-weight: 700;\n    line-height: 14px;\n    text-align: left;\n    color: #FFFFFF;\n    display: flex;\n    align-items: center;\n    gap: 20px;\n    \n    a {\n        text-decoration: none;\n        color: #FFFFFF;\n    }\n"]))),Oc=function(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(kc,{children:[(0,t.jsxs)(jc,{href:"https://vk.com/studiosova",children:[(0,t.jsx)(Cc,{src:Nl}),(0,t.jsx)(Ec,{children:"СОВА"})]}),(0,t.jsx)(_c,{children:(0,t.jsx)("a",{href:"https://vk.com/studiosova",children:"Сайт разработан IT-студией “СОВА”"})}),(0,t.jsxs)(_c,{children:[(0,t.jsx)("a",{href:"mailto:studio-sova@inbox.ru",children:"studio-sova@inbox.ru"}),(0,t.jsx)("a",{href:"tel:+79170968750",children:"+7 (917)-096-87-50"})]})]}),(0,t.jsxs)(Sc,{children:[(0,t.jsxs)(jc,{href:"https://vk.com/studiosova",children:[(0,t.jsx)(Cc,{src:Nl}),(0,t.jsx)(Ec,{children:"СОВА"})]}),(0,t.jsx)(_c,{children:(0,t.jsx)("a",{href:"https://vk.com/studiosova",children:"Сайт разработан IT-студией “СОВА”"})}),(0,t.jsxs)(_c,{children:[(0,t.jsx)("a",{href:"mailto:studio-sova@inbox.ru",children:"studio-sova@inbox.ru"}),(0,t.jsx)("a",{href:"tel:+79170968750",children:"+7 (917)-096-87-50"})]})]})]})},Fc=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Pc=ir.footer(Ul||(Ul=Fc(["\n    background-color: #101010;\n"],["\n    background-color: #101010;\n"]))),Tc=ir.div(ql||(ql=Fc(["\n    padding: 40px 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    @media screen and (min-width: 900px) {\n        justify-content: start;\n        gap: 115px;\n    }\n\n    & svg path {\n        fill: var(--white);\n    }\n"],["\n    padding: 40px 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    @media screen and (min-width: 900px) {\n        justify-content: start;\n        gap: 115px;\n    }\n\n    & svg path {\n        fill: var(--white);\n    }\n"]))),zc=ir.div(Hl||(Hl=Fc(["\n@container wrapper (max-width: 800px) {\n    & {\n        display: none;\n    }\n}\n\n    & a {\n        text-decoration: none;\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        font-family: var(--montserrat-regular);\n        color: var(--white);\n    }\n"],["\n@container wrapper (max-width: 800px) {\n    & {\n        display: none;\n    }\n}\n\n    & a {\n        text-decoration: none;\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        font-family: var(--montserrat-regular);\n        color: var(--white);\n    }\n"]))),Ac=ir.nav(Wl||(Wl=Fc(["\n    display: flex;\n    gap: 20px;\n"],["\n    display: flex;\n    gap: 20px;\n"]))),Lc=function(){var e=Y().hash;return(0,o.useEffect)((function(){["#reviews","#advantage","#about","#feedback"].includes(e)&&document.querySelector(e).scrollIntoView({behavior:"smooth"})}),[e]),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(Ji,{}),(0,t.jsx)(go,{}),(0,t.jsx)(No,{}),(0,t.jsx)(ha,{}),(0,t.jsx)(La,{}),(0,t.jsx)(Ml,{}),(0,t.jsx)(Pc,{children:(0,t.jsx)(gr,{children:(0,t.jsxs)(Tc,{children:[(0,t.jsx)(Pr,{to:"/",children:(0,t.jsx)(ar,{width:"77",height:"20"})}),(0,t.jsx)(zc,{children:(0,t.jsx)(Ac,{children:[{title:"Главная",to:"/"},{title:"О нас",to:"/#about"},{title:"Наши преимущества",to:"/#advantage"},{title:"Отзывы",to:"/#reviews"},{title:"Каталог",to:"/catalog"},{title:"Корзина",to:"/cart"}].map((function(e,n){return(0,t.jsx)(Pr,{to:e.to,children:e.title},n)}))})})]})})}),(0,t.jsx)(Oc,{})]})},Mc=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Nc=ir.header(Gl||(Gl=Mc(["\n    background-color: #101010;\n"],["\n    background-color: #101010;\n"]))),Rc=ir.div(Yl||(Yl=Mc(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 40px auto;\n\n    & svg path {\n        fill: var(--white);\n    }\n    \n    @media screen and (min-width: 900px) {\n        justify-content: start;\n        gap: 115px;\n    }\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 40px auto;\n\n    & svg path {\n        fill: var(--white);\n    }\n    \n    @media screen and (min-width: 900px) {\n        justify-content: start;\n        gap: 115px;\n    }\n"]))),Dc=ir.div(Ql||(Ql=Mc(["\n    width: 24px;\n    height: 16px;\n    \n    @container wrapper (min-width: 800px) {\n        & {\n            display: none;\n        }\n    }\n"],["\n    width: 24px;\n    height: 16px;\n    \n    @container wrapper (min-width: 800px) {\n        & {\n            display: none;\n        }\n    }\n"]))),Bc=ir.footer(Xl||(Xl=Mc(["\n    background-color: #101010;\n"],["\n    background-color: #101010;\n"]))),Ic=ir.div(Kl||(Kl=Mc(["\n    padding: 40px 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    @media screen and (min-width: 900px) {\n        justify-content: start;\n        gap: 115px;\n    }\n    \n    & svg path {\n        fill: var(--white);\n    }\n"],["\n    padding: 40px 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    @media screen and (min-width: 900px) {\n        justify-content: start;\n        gap: 115px;\n    }\n    \n    & svg path {\n        fill: var(--white);\n    }\n"]))),Vc=ir.div(Jl||(Jl=Mc(["\n    @container wrapper (max-width: 800px) {\n        & {\n            display: none;\n        }\n    }\n\n    & a {\n        text-decoration: none;\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        font-family: var(--montserrat-regular);\n        color: var(--white);\n    }\n"],["\n    @container wrapper (max-width: 800px) {\n        & {\n            display: none;\n        }\n    }\n\n    & a {\n        text-decoration: none;\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        font-family: var(--montserrat-regular);\n        color: var(--white);\n    }\n"]))),$c=ir.nav(Zl||(Zl=Mc(["\n    display: flex;\n    gap: 20px;\n    \n"],["\n    display: flex;\n    gap: 20px;\n    \n"]))),Uc=ir.main(ec||(ec=Mc(["\n    min-height: calc(100vh - 203px);\n"],["\n    min-height: calc(100vh - 203px);\n"]))),qc=function(){var e=[{title:"Главная",to:"/"},{title:"О нас",to:"/#about"},{title:"Наши преимущества",to:"/#advantage"},{title:"Отзывы",to:"/#reviews"},{title:"Каталог",to:"/catalog"},{title:"Корзина",to:"/cart"}],n=(0,o.useState)(!1),r=n[0],i=n[1];return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(Nc,{children:(0,t.jsx)(gr,{children:(0,t.jsxs)(Rc,{children:[(0,t.jsx)(Pr,{to:"/",children:(0,t.jsx)(ar,{width:"77",height:"20"})}),(0,t.jsx)(Dc,{onClick:function(){return i(!0)},children:(0,t.jsx)(cr,{width:"24",height:"16"})}),(0,t.jsx)(Vc,{children:(0,t.jsx)($c,{children:e.map((function(e,n){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Tr,{to:e.to,style:function(e){var n=e.isActive;return{fontWeight:n?"900":"500",fontFamily:n?"var(--montserrat-bold)":"var(--montserrat-regular)"}},children:e.title},n)})}))})})]})})}),(0,t.jsx)(Uc,{children:(0,t.jsx)(ue,{})}),(0,t.jsx)(Bc,{children:(0,t.jsx)(gr,{children:(0,t.jsxs)(Ic,{children:[(0,t.jsx)(Pr,{to:"/",children:(0,t.jsx)(ar,{width:"77",height:"20"})}),(0,t.jsx)(Vc,{children:(0,t.jsx)($c,{children:e.map((function(e,n){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Pr,{to:e.to,children:e.title},n)})}))})})]})})}),(0,t.jsx)(Pi,{open:r,setOpen:i})]})},Hc=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Wc=ir.div(nc||(nc=Hc(["\n    display: block;\n\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"],["\n    display: block;\n\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"]))),Gc=ir.div(tc||(tc=Hc(["\n    background-image: url(",");\n    background-repeat: no-repeat;\n    background-size: cover;\n\n"],["\n    background-image: url(",");\n    background-repeat: no-repeat;\n    background-size: cover;\n\n"])),vr),Yc=ir.header(rc||(rc=Hc(["\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 30px 0;\n    margin-bottom: 100px;\n"],["\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 30px 0;\n    margin-bottom: 100px;\n"]))),Qc=ir.h1(ic||(ic=Hc(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    text-align: center;\n    padding-top: 74px;\n\n    & > *:first-child {\n        line-height: 40px;\n        font-size: 32px;\n        background: linear-gradient(180deg, #202020 0%, #111111 100%);\n        -webkit-background-clip: text;\n\n        span {\n            color: #0047FF;\n        }\n    }\n\n    & > *:last-child {\n        line-height: 30px;\n        font-size: 25px;\n    }\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    text-align: center;\n    padding-top: 74px;\n\n    & > *:first-child {\n        line-height: 40px;\n        font-size: 32px;\n        background: linear-gradient(180deg, #202020 0%, #111111 100%);\n        -webkit-background-clip: text;\n\n        span {\n            color: #0047FF;\n        }\n    }\n\n    & > *:last-child {\n        line-height: 30px;\n        font-size: 25px;\n    }\n"]))),Xc=ir.div(oc||(oc=Hc(["\n    padding-bottom: 74px;\n"],["\n    padding-bottom: 74px;\n"]))),Kc=(ir.h2(ac||(ac=Hc(["\n    line-height: 15px;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 12px;\n    background: linear-gradient(180deg, #202020 0%, #111111 100%);\n    -webkit-background-clip: text;\n    margin: 15px 0 5px 0;\n    text-align: center;\n"],["\n    line-height: 15px;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 12px;\n    background: linear-gradient(180deg, #202020 0%, #111111 100%);\n    -webkit-background-clip: text;\n    margin: 15px 0 5px 0;\n    text-align: center;\n"]))),ir.div(sc||(sc=Hc(["\n    width: 205px;\n    margin: 15px auto 100px auto;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    justify-content: center;\n\n    & > * {\n        flex-shrink: 0;\n    }\n"],["\n    width: 205px;\n    margin: 15px auto 100px auto;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    justify-content: center;\n\n    & > * {\n        flex-shrink: 0;\n    }\n"])))),Jc=ir.div(lc||(lc=Hc(["\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n    height: 283px;\n    position: relative;\n    overflow: hidden;\n\n    svg {\n        position: absolute;\n        right: -400px;\n        top: -300px;\n        transform: rotate(-45deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n"],["\n    background: linear-gradient(180deg, #151515 0%, #101010 100%);\n    height: 283px;\n    position: relative;\n    overflow: hidden;\n\n    svg {\n        position: absolute;\n        right: -400px;\n        top: -300px;\n        transform: rotate(-45deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n"]))),Zc=ir.img(cc||(cc=Hc(["\n    position: absolute;\n    object-fit: cover;\n    object-position: center;\n    width: 341px;\n    height: 263px;\n    top: 10px;\n    left: calc(50% - 170px);\n    border-radius: 25px;\n    border: 1px solid #999999;\n    display: block;\n"],["\n    position: absolute;\n    object-fit: cover;\n    object-position: center;\n    width: 341px;\n    height: 263px;\n    top: 10px;\n    left: calc(50% - 170px);\n    border-radius: 25px;\n    border: 1px solid #999999;\n    display: block;\n"]))),eu=ir.div(uc||(uc=Hc(['\n    position: relative;\n    display: none;\n    height: 100vh;\n    overflow: hidden;\n    background: url("','"), linear-gradient(180deg, #151515 0%, #101010 100%);\n    background-size: 70%, 30%;\n    background-repeat: no-repeat, no-repeat;\n    background-position: left, right;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n\n    & > :first-child {\n        width: 808px;\n        height: 761px;\n        position: absolute;\n        bottom: 3vw;\n        right: -200px;\n        transform: rotate(-140deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n'],['\n    position: relative;\n    display: none;\n    height: 100vh;\n    overflow: hidden;\n    background: url("','"), linear-gradient(180deg, #151515 0%, #101010 100%);\n    background-size: 70%, 30%;\n    background-repeat: no-repeat, no-repeat;\n    background-position: left, right;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n\n    & > :first-child {\n        width: 808px;\n        height: 761px;\n        position: absolute;\n        bottom: 3vw;\n        right: -200px;\n        transform: rotate(-140deg);\n\n        path {\n            stroke: #FFFFFF;\n        }\n    }\n'])),vr),nu=ir.header(dc||(dc=Hc(["\n    display: flex;\n    align-items: center;\n    gap: clamp(50px, 7vw, 115px);\n    padding: 40px 0;\n\n    & svg path {\n        fill: #18181b;\n    }\n"],["\n    display: flex;\n    align-items: center;\n    gap: clamp(50px, 7vw, 115px);\n    padding: 40px 0;\n\n    & svg path {\n        fill: #18181b;\n    }\n"]))),tu=ir.nav(pc||(pc=Hc(["\n    display: flex;\n    align-items: center;\n    gap: clamp(10px, 1.5vw, 20px);\n\n    & > :where(a:link, a:active, a:hover, a:visited) {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        color: #202020;\n        text-decoration: none;\n        //filter: invert(1);\n        mix-blend-mode: difference;\n    }\n"],["\n    display: flex;\n    align-items: center;\n    gap: clamp(10px, 1.5vw, 20px);\n\n    & > :where(a:link, a:active, a:hover, a:visited) {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 20px;\n        color: #202020;\n        text-decoration: none;\n        //filter: invert(1);\n        mix-blend-mode: difference;\n    }\n"]))),ru=ir.div(fc||(fc=Hc(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 80px 100px 160px 0;\n    position: relative;\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 80px 100px 160px 0;\n    position: relative;\n"]))),iu=ir.div(hc||(hc=Hc(["\n    width: 64%;\n"],["\n    width: 64%;\n"]))),ou=ir.img(gc||(gc=Hc(["\n    width: min(42%, 690px);\n    aspect-ratio: 690 / 774;\n    object-fit: cover;\n    object-position: center;\n    border: 1px solid #999999;\n    border-radius: 25px;\n"],["\n    width: min(42%, 690px);\n    aspect-ratio: 690 / 774;\n    object-fit: cover;\n    object-position: center;\n    border: 1px solid #999999;\n    border-radius: 25px;\n"]))),au=ir.h1(mc||(mc=Hc(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: clamp(30px, 4vw, 50px);\n    line-height: clamp(40px, 5vw, 61px);\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: clamp(30px, 4vw, 50px);\n    line-height: clamp(40px, 5vw, 61px);\n"]))),su=(ir.h2(xc||(xc=Hc(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 16px;\n    line-height: 20px;\n    margin: 20px 0 10px 0;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 900;\n    font-size: 16px;\n    line-height: 20px;\n    margin: 20px 0 10px 0;\n"]))),ir.div(vc||(vc=Hc(["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.5vw, 16px);\n    line-height: clamp(16px, 2vw, 20px);\n    font-weight: 500;\n"],["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.5vw, 16px);\n    line-height: clamp(16px, 2vw, 20px);\n    font-weight: 500;\n"]))),ir.div(yc||(yc=Hc(["\n    display: flex;\n    gap: 10px;\n    margin-top: 20px;\n\n    & > * {\n        flex-shrink: 0;\n    }\n"],["\n    display: flex;\n    gap: 10px;\n    margin-top: 20px;\n\n    & > * {\n        flex-shrink: 0;\n    }\n"])))),lu=function(){var e=X(),n=(0,o.useState)(!1),r=n[0],i=n[1];return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(Wc,{children:[(0,t.jsx)(Gc,{children:(0,t.jsx)(gr,{children:(0,t.jsxs)(Xc,{children:[(0,t.jsxs)(Yc,{children:[(0,t.jsx)(ar,{width:"77",height:"20"}),(0,t.jsx)("div",{onClick:function(){return i(!0)},children:(0,t.jsx)(cr,{width:"24",height:"16"})})]}),(0,t.jsxs)(Qc,{children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("span",{children:"404"})," "]}),(0,t.jsx)("div",{children:"Страница не найдена"})]}),(0,t.jsxs)(Kc,{children:[(0,t.jsx)("div",{onClick:function(){return e("/catalog")},children:(0,t.jsx)(xr,{text:"Смотреть каталог"})}),(0,t.jsx)(xr,{invert:!0,text:"Связаться с нами"})]})]})})}),(0,t.jsxs)(Jc,{children:[(0,t.jsx)(Hr,{width:"808",height:"761"}),(0,t.jsx)(Zc,{src:yr,alt:""})]})]}),(0,t.jsxs)(eu,{children:[(0,t.jsx)(Hr,{}),(0,t.jsxs)(gr,{children:[(0,t.jsxs)(nu,{children:[(0,t.jsx)(ar,{width:"77",height:"20"}),(0,t.jsx)(tu,{children:[{title:"Главная",to:"/"},{title:"О нас",to:"/#about"},{title:"Наши преимущества",to:"/#advantage"},{title:"Отзывы",to:"/#reviews"},{title:"Каталог",to:"/catalog"},{title:"Корзина",to:"/cart"}].map((function(e,n){return(0,t.jsx)(Tr,{to:e.to,children:e.title},n)}))})]}),(0,t.jsxs)(ru,{children:[(0,t.jsxs)(iu,{children:[(0,t.jsxs)(au,{children:[(0,t.jsx)("span",{style:{color:"var(--blue)"},children:" 404"})," страница не",(0,t.jsx)("br",{}),"найдена"]}),(0,t.jsxs)(su,{children:[(0,t.jsx)("div",{onClick:function(){return e("/catalog")},children:(0,t.jsx)(xr,{text:"Смотреть каталог"})}),(0,t.jsx)(xr,{invert:!0,text:"Связаться с нами"})]})]}),(0,t.jsx)(ou,{src:yr})]})]})]}),(0,t.jsx)(Pi,{open:r,setOpen:i})]})};function cu(){return cu=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},cu.apply(null,arguments)}const uu=function(e){return o.createElement("svg",cu({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 16 18"},e),bc||(bc=o.createElement("path",{fill:"#000",d:"M10.001 9v7.88c.04.3-.06.62-.29.83a.996.996 0 0 1-1.41 0l-2.01-2.01a.99.99 0 0 1-.29-.83V9h-.03L.211 1.62a1 1 0 0 1 .17-1.4c.19-.14.4-.22.62-.22h14c.22 0 .43.08.62.22a1 1 0 0 1 .17 1.4L10.031 9z"})))};var du,pu=function(e){var n;return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("input",{type:"checkbox",style:e.styles,id:e.id,onChange:e.setChecked,checked:null!==(n=e.checked)&&void 0!==n&&n})})};function fu(){return fu=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},fu.apply(null,arguments)}const hu=function(e){return o.createElement("svg",fu({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 13 10"},e),du||(du=o.createElement("path",{fill:"#0047FF",d:"m4.013 8.081-2.692-2.76a.764.764 0 0 0-1.094 0 .803.803 0 0 0 0 1.122L3.47 9.767a.76.76 0 0 0 1.094 0l8.21-8.413a.803.803 0 0 0 0-1.122.764.764 0 0 0-1.095 0z"})))};var gu,mu,xu,vu,yu=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},bu=ir.label(gu||(gu=yu(["\n    display: flex;\n    align-items: center;\n    justify-content: right;\n    gap: 10px;\n    flex-direction: ",";\n"],["\n    display: flex;\n    align-items: center;\n    justify-content: right;\n    gap: 10px;\n    flex-direction: ",";\n"])),(function(e){return e.$invert?"row-reverse":"row"})),wu=ir.div(mu||(mu=yu(["\n    position: absolute;\n    width: 60%;\n    height: 60%;\n    top: 20%;\n    left: 20%;\n    visibility: ",";\n"],["\n    position: absolute;\n    width: 60%;\n    height: 60%;\n    top: 20%;\n    left: 20%;\n    visibility: ",";\n"])),(function(e){return e.$checked?"visible":"hidden"})),ku=ir.div(xu||(xu=yu(["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 15px;\n    text-wrap: nowrap;\n"],["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 15px;\n    text-wrap: nowrap;\n"]))),Su=ir.div(vu||(vu=yu(["\n    display: block;\n    width: 25px;\n    height: 25px;\n    border-radius: 5px;\n    border: 1px solid #00000033;\n    position: relative;\n    flex-shrink: 0;\n"],["\n    display: block;\n    width: 25px;\n    height: 25px;\n    border-radius: 5px;\n    border: 1px solid #00000033;\n    position: relative;\n    flex-shrink: 0;\n"]))),ju=function(e){var n,r=null!==(n=e.id)&&void 0!==n?n:sl();return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(bu,{htmlFor:r,$invert:e.invert,children:[(0,t.jsx)(ku,{children:e.labelText}),(0,t.jsxs)(Su,{children:[(0,t.jsx)(pu,{styles:{display:"none"},id:r,checked:e.checked,setChecked:e.setChecked}),(0,t.jsx)(wu,{$checked:e.checked,children:(0,t.jsx)(hu,{width:"13",height:"10"})})]})]})})};function Eu(e,n){return Eu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},Eu(e,n)}const Cu=o.createContext(null);var _u="unmounted",Ou="exited",Fu="entering",Pu="entered",Tu="exiting",zu=function(e){function n(n,t){var r;r=e.call(this,n,t)||this;var i,o=t&&!t.isMounting?n.enter:n.appear;return r.appearStatus=null,n.in?o?(i=Ou,r.appearStatus=Fu):i=Pu:i=n.unmountOnExit||n.mountOnEnter?_u:Ou,r.state={status:i},r.nextCallback=null,r}var t,r;r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,Eu(t,r),n.getDerivedStateFromProps=function(e,n){return e.in&&n.status===_u?{status:Ou}:null};var i=n.prototype;return i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var n=null;if(e!==this.props){var t=this.state.status;this.props.in?t!==Fu&&t!==Pu&&(n=Fu):t!==Fu&&t!==Pu||(n=Tu)}this.updateStatus(!1,n)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,n,t,r=this.props.timeout;return e=n=t=r,null!=r&&"number"!=typeof r&&(e=r.exit,n=r.enter,t=void 0!==r.appear?r.appear:n),{exit:e,enter:n,appear:t}},i.updateStatus=function(e,n){if(void 0===e&&(e=!1),null!==n)if(this.cancelNextCallback(),n===Fu){if(this.props.unmountOnExit||this.props.mountOnEnter){var t=this.props.nodeRef?this.props.nodeRef.current:br.findDOMNode(this);t&&function(e){e.scrollTop}(t)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Ou&&this.setState({status:_u})},i.performEnter=function(e){var n=this,t=this.props.enter,r=this.context?this.context.isMounting:e,i=this.props.nodeRef?[r]:[br.findDOMNode(this),r],o=i[0],a=i[1],s=this.getTimeouts(),l=r?s.appear:s.enter;e||t?(this.props.onEnter(o,a),this.safeSetState({status:Fu},(function(){n.props.onEntering(o,a),n.onTransitionEnd(l,(function(){n.safeSetState({status:Pu},(function(){n.props.onEntered(o,a)}))}))}))):this.safeSetState({status:Pu},(function(){n.props.onEntered(o)}))},i.performExit=function(){var e=this,n=this.props.exit,t=this.getTimeouts(),r=this.props.nodeRef?void 0:br.findDOMNode(this);n?(this.props.onExit(r),this.safeSetState({status:Tu},(function(){e.props.onExiting(r),e.onTransitionEnd(t.exit,(function(){e.safeSetState({status:Ou},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Ou},(function(){e.props.onExited(r)}))},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,n){n=this.setNextCallback(n),this.setState(e,n)},i.setNextCallback=function(e){var n=this,t=!0;return this.nextCallback=function(r){t&&(t=!1,n.nextCallback=null,e(r))},this.nextCallback.cancel=function(){t=!1},this.nextCallback},i.onTransitionEnd=function(e,n){this.setNextCallback(n);var t=this.props.nodeRef?this.props.nodeRef.current:br.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(t&&!r){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[t,this.nextCallback],o=i[0],a=i[1];this.props.addEndListener(o,a)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},i.render=function(){var e=this.state.status;if(e===_u)return null;var n=this.props,t=n.children,r=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,function(e,n){if(null==e)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(n.includes(r))continue;t[r]=e[r]}return t}(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return o.createElement(Cu.Provider,{value:null},"function"==typeof t?t(e,r):o.cloneElement(o.Children.only(t),r))},n}(o.Component);function Au(){}zu.contextType=Cu,zu.propTypes={},zu.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Au,onEntering:Au,onEntered:Au,onExit:Au,onExiting:Au,onExited:Au},zu.UNMOUNTED=_u,zu.EXITED=Ou,zu.ENTERING=Fu,zu.ENTERED=Pu,zu.EXITING=Tu;const Lu=zu;var Mu,Nu,Ru,Du,Bu,Iu,Vu,$u,Uu,qu,Hu,Wu=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Gu=function(){return Gu=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},Gu.apply(this,arguments)},Yu=ir.div(Mu||(Mu=Wu(["\n    padding: 20px;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    @media screen and (min-width: 800px) {\n        & {\n            padding: 0;\n            align-items: start;\n        }\n    }\n"],["\n    padding: 20px;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    @media screen and (min-width: 800px) {\n        & {\n            padding: 0;\n            align-items: start;\n        }\n    }\n"]))),Qu=ir.div(Nu||(Nu=Wu(["\n    display: none;\n    border: 1px solid #00000040;\n    background-color: #F5F5F5;\n    border-radius: 10px;\n    box-shadow: 0 7px 15px 0 #0000001A,\n    0 27px 27px 0 #00000017,\n    0 61px 37px 0 #0000000D,\n    0 108px 43px 0 #00000003,\n    0 169px 47px 0 #00000000;\n    position: absolute;\n    right: 0;\n    \n    opacity: 0;\n    transition: 0.2s ease-in-out;\n"],["\n    display: none;\n    border: 1px solid #00000040;\n    background-color: #F5F5F5;\n    border-radius: 10px;\n    box-shadow: 0 7px 15px 0 #0000001A,\n    0 27px 27px 0 #00000017,\n    0 61px 37px 0 #0000000D,\n    0 108px 43px 0 #00000003,\n    0 169px 47px 0 #00000000;\n    position: absolute;\n    right: 0;\n    \n    opacity: 0;\n    transition: 0.2s ease-in-out;\n"]))),Xu=ir.h1(Ru||(Ru=Wu(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: clamp(24px, 4vw, 50px);\n    line-height: clamp(30px, 4.2vw, 61px);\n    color: #202020;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: clamp(24px, 4vw, 50px);\n    line-height: clamp(30px, 4.2vw, 61px);\n    color: #202020;\n"]))),Ku=ir.div(Du||(Du=Wu(["\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 30px;\n"],["\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 30px;\n"]))),Ju=ir.div(Bu||(Bu=Wu(["\n    padding: 50px 0;\n"],["\n    padding: 50px 0;\n"]))),Zu=ir.div(Iu||(Iu=Wu(["\n    cursor: pointer;\n    position: relative;\n\n    @media screen and (min-width: 800px) {\n        & {\n            display: none;\n        }\n    }\n"],["\n    cursor: pointer;\n    position: relative;\n\n    @media screen and (min-width: 800px) {\n        & {\n            display: none;\n        }\n    }\n"]))),ed=ir.div(Vu||(Vu=Wu(["\n    display: grid;\n    grid-gap: 40px 20px;\n    \n    @media screen and (min-width: 800px) {\n        & {\n            grid-template-columns: repeat(2 , 1fr);\n        }\n    }\n\n    @media screen and (min-width: 1100px) {\n        & {\n            grid-template-columns: repeat(3 , 1fr);\n        }\n    }\n"],["\n    display: grid;\n    grid-gap: 40px 20px;\n    \n    @media screen and (min-width: 800px) {\n        & {\n            grid-template-columns: repeat(2 , 1fr);\n        }\n    }\n\n    @media screen and (min-width: 1100px) {\n        & {\n            grid-template-columns: repeat(3 , 1fr);\n        }\n    }\n"]))),nd=ir.div($u||($u=Wu(["\n    display: flex;\n    align-items: start;\n    gap: 130px;\n"],["\n    display: flex;\n    align-items: start;\n    gap: 130px;\n"]))),td=ir.h2(Uu||(Uu=Wu(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    color: #202020;\n    margin-bottom: 10px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    color: #202020;\n    margin-bottom: 10px;\n"]))),rd=ir.aside(qu||(qu=Wu(["\n    display: none;\n    \n    @media screen and (min-width: 800px) {\n        & {\n            display: block;\n        }\n    }\n"],["\n    display: none;\n    \n    @media screen and (min-width: 800px) {\n        & {\n            display: block;\n        }\n    }\n"]))),id=ir.div(Hu||(Hu=Wu(["\n    flex-basis: 100%;\n"],["\n    flex-basis: 100%;\n"]))),od={entering:{display:"block",opacity:0},entered:{display:"block",opacity:1},exiting:{display:"block",opacity:1},exited:{display:"none",opacity:0}},ad=function(){var e=(0,o.useState)(!1),n=e[0],r=e[1],i=(0,o.useState)([]),a=i[0],s=i[1],l=(0,o.useState)([]),c=(l[0],l[1]),u=(0,o.useState)({600:!1,1200:!1,1800:!1,1e3:!1,1500:!1,2400:!1,2500:!1,3600:!1,5e3:!1}),d=u[0],p=u[1];(0,o.useEffect)((function(){var e,n,t,r;(e=void 0,n=void 0,t=void 0,r=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(e){switch(e.label){case 0:return[4,fetch("/api/product")];case 1:return[2,e.sent()]}}))},new(t||(t=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((r=r.apply(e,n||[])).next())}))).then((function(e){return e.json()})).then((function(e){return s(e)}))}),[]),(0,o.useEffect)((function(){var e=Object.entries(d).filter((function(e){return e[1]})).map((function(e){return+e[0]}));c(a.filter((function(n){return e.includes(n.rated_power)})))}),[d]);var f,h=(f=Object.entries(d).filter((function(e){return e[1]})).map((function(e){return+e[0]})),f.length>0?a.filter((function(e){return f.includes(e.rated_power)})):a);return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Ju,{children:(0,t.jsx)(gr,{children:(0,t.jsxs)(nd,{children:[(0,t.jsxs)(rd,{children:[(0,t.jsx)(td,{children:"Категории"}),(0,t.jsx)(Yu,{children:Object.keys(d).map((function(e,n){return(0,t.jsx)(ju,{invert:!0,labelText:"".concat(e," Ватт"),checked:d[+e],setChecked:function(n){var t;return p(Gu(Gu({},d),((t={})[+e]=n.currentTarget.checked,t)))}},n)}))})]}),(0,t.jsxs)(id,{children:[(0,t.jsxs)(Ku,{children:[(0,t.jsx)(Xu,{children:"Каталог"}),(0,t.jsxs)(Zu,{children:[(0,t.jsx)(uu,{width:"16",height:"18",onClick:function(){return r(!n)}}),(0,t.jsx)(Lu,{in:n,timeout:100,children:function(e){return(0,t.jsx)(Qu,{style:Gu({},od[e]),children:(0,t.jsx)(Yu,{children:Object.keys(d).map((function(e,n){return(0,t.jsx)(ju,{labelText:"".concat(e," Ватт"),checked:d[+e],setChecked:function(n){var t;return p(Gu(Gu({},d),((t={})[+e]=n.currentTarget.checked,t)))}},n)}))})})}})]})]}),(0,t.jsx)(ed,{children:h.map((function(e){return(0,t.jsx)(Pr,{to:"/product/"+e.id,style:{textDecoration:"none"},children:(0,t.jsx)(wa,{title:e.model,photo:Oa(e),power:+e.rated_power,capacity:e.capacity,weight:e.gross_weight,height:+e.height,length:+e.length,width:+e.width})})}))})]})]})})})})};function sd(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function ld(e,n){void 0===e&&(e={}),void 0===n&&(n={}),Object.keys(n).forEach((t=>{void 0===e[t]?e[t]=n[t]:sd(n[t])&&sd(e[t])&&Object.keys(n[t]).length>0&&ld(e[t],n[t])}))}const cd={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function ud(){const e="undefined"!=typeof document?document:{};return ld(e,cd),e}const dd={document:cd,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function pd(){const e="undefined"!=typeof window?window:{};return ld(e,dd),e}function fd(e,n){return void 0===n&&(n=0),setTimeout(e,n)}function hd(){return Date.now()}function gd(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function md(e){return"undefined"!=typeof window&&void 0!==window.HTMLElement?e instanceof HTMLElement:e&&(1===e.nodeType||11===e.nodeType)}function xd(){const e=Object(arguments.length<=0?void 0:arguments[0]),n=["__proto__","constructor","prototype"];for(let t=1;t<arguments.length;t+=1){const r=t<0||arguments.length<=t?void 0:arguments[t];if(null!=r&&!md(r)){const t=Object.keys(Object(r)).filter((e=>n.indexOf(e)<0));for(let n=0,i=t.length;n<i;n+=1){const i=t[n],o=Object.getOwnPropertyDescriptor(r,i);void 0!==o&&o.enumerable&&(gd(e[i])&&gd(r[i])?r[i].__swiper__?e[i]=r[i]:xd(e[i],r[i]):!gd(e[i])&&gd(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:xd(e[i],r[i])):e[i]=r[i])}}}return e}function vd(e,n,t){e.style.setProperty(n,t)}function yd(e){let{swiper:n,targetPosition:t,side:r}=e;const i=pd(),o=-n.translate;let a,s=null;const l=n.params.speed;n.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(n.cssModeFrameID);const c=t>o?"next":"prev",u=(e,n)=>"next"===c&&e>=n||"prev"===c&&e<=n,d=()=>{a=(new Date).getTime(),null===s&&(s=a);const e=Math.max(Math.min((a-s)/l,1),0),c=.5-Math.cos(e*Math.PI)/2;let p=o+c*(t-o);if(u(p,t)&&(p=t),n.wrapperEl.scrollTo({[r]:p}),u(p,t))return n.wrapperEl.style.overflow="hidden",n.wrapperEl.style.scrollSnapType="",setTimeout((()=>{n.wrapperEl.style.overflow="",n.wrapperEl.scrollTo({[r]:p})})),void i.cancelAnimationFrame(n.cssModeFrameID);n.cssModeFrameID=i.requestAnimationFrame(d)};d()}function bd(e,n){void 0===n&&(n="");const t=[...e.children];return e instanceof HTMLSlotElement&&t.push(...e.assignedElements()),n?t.filter((e=>e.matches(n))):t}function wd(e){try{return void console.warn(e)}catch(e){}}function kd(e,n){void 0===n&&(n=[]);const t=document.createElement(e);return t.classList.add(...Array.isArray(n)?n:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(n)),t}function Sd(e,n){return pd().getComputedStyle(e,null).getPropertyValue(n)}function jd(e){let n,t=e;if(t){for(n=0;null!==(t=t.previousSibling);)1===t.nodeType&&(n+=1);return n}}function Ed(e,n,t){const r=pd();return t?e["width"===n?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===n?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===n?"margin-left":"margin-bottom")):e.offsetWidth}let Cd,_d,Od;function Fd(){return Cd||(Cd=function(){const e=pd(),n=ud();return{smoothScroll:n.documentElement&&n.documentElement.style&&"scrollBehavior"in n.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&n instanceof e.DocumentTouch)}}()),Cd}function Pd(e){return void 0===e&&(e={}),_d||(_d=function(e){let{userAgent:n}=void 0===e?{}:e;const t=Fd(),r=pd(),i=r.navigator.platform,o=n||r.navigator.userAgent,a={ios:!1,android:!1},s=r.screen.width,l=r.screen.height,c=o.match(/(Android);?[\s\/]+([\d.]+)?/);let u=o.match(/(iPad).*OS\s([\d_]+)/);const d=o.match(/(iPod)(.*OS\s([\d_]+))?/),p=!u&&o.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===i;let h="MacIntel"===i;return!u&&h&&t.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${s}x${l}`)>=0&&(u=o.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),h=!1),c&&!f&&(a.os="android",a.android=!0),(u||p||d)&&(a.os="ios",a.ios=!0),a}(e)),_d}var Td={on(e,n,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof n)return r;const i=t?"unshift":"push";return e.split(" ").forEach((e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](n)})),r},once(e,n,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof n)return r;function i(){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];n.apply(r,o)}return i.__emitterProxy=n,r.on(e,i,t)},onAny(e,n){const t=this;if(!t.eventsListeners||t.destroyed)return t;if("function"!=typeof e)return t;const r=n?"unshift":"push";return t.eventsAnyListeners.indexOf(e)<0&&t.eventsAnyListeners[r](e),t},offAny(e){const n=this;if(!n.eventsListeners||n.destroyed)return n;if(!n.eventsAnyListeners)return n;const t=n.eventsAnyListeners.indexOf(e);return t>=0&&n.eventsAnyListeners.splice(t,1),n},off(e,n){const t=this;return!t.eventsListeners||t.destroyed?t:t.eventsListeners?(e.split(" ").forEach((e=>{void 0===n?t.eventsListeners[e]=[]:t.eventsListeners[e]&&t.eventsListeners[e].forEach(((r,i)=>{(r===n||r.__emitterProxy&&r.__emitterProxy===n)&&t.eventsListeners[e].splice(i,1)}))})),t):t},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let n,t,r;for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return"string"==typeof o[0]||Array.isArray(o[0])?(n=o[0],t=o.slice(1,o.length),r=e):(n=o[0].events,t=o[0].data,r=o[0].context||e),t.unshift(r),(Array.isArray(n)?n:n.split(" ")).forEach((n=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(r,[n,...t])})),e.eventsListeners&&e.eventsListeners[n]&&e.eventsListeners[n].forEach((e=>{e.apply(r,t)}))})),e}};const zd=(e,n,t)=>{n&&!e.classList.contains(t)?e.classList.add(t):!n&&e.classList.contains(t)&&e.classList.remove(t)},Ad=(e,n,t)=>{n&&!e.classList.contains(t)?e.classList.add(t):!n&&e.classList.contains(t)&&e.classList.remove(t)},Ld=(e,n)=>{if(!e||e.destroyed||!e.params)return;const t=n.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(t){let n=t.querySelector(`.${e.params.lazyPreloaderClass}`);!n&&e.isElement&&(t.shadowRoot?n=t.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{t.shadowRoot&&(n=t.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),n&&n.remove())}))),n&&n.remove()}},Md=(e,n)=>{if(!e.slides[n])return;const t=e.slides[n].querySelector('[loading="lazy"]');t&&t.removeAttribute("loading")},Nd=e=>{if(!e||e.destroyed||!e.params)return;let n=e.params.lazyPreloadPrevNext;const t=e.slides.length;if(!t||!n||n<0)return;n=Math.min(n,t);const r="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const t=i,o=[t-n];return o.push(...Array.from({length:n}).map(((e,n)=>t+r+n))),void e.slides.forEach(((n,t)=>{o.includes(n.column)&&Md(e,t)}))}const o=i+r-1;if(e.params.rewind||e.params.loop)for(let r=i-n;r<=o+n;r+=1){const n=(r%t+t)%t;(n<i||n>o)&&Md(e,n)}else for(let r=Math.max(i-n,0);r<=Math.min(o+n,t-1);r+=1)r!==i&&(r>o||r<i)&&Md(e,r)};var Rd={updateSize:function(){const e=this;let n,t;const r=e.el;n=void 0!==e.params.width&&null!==e.params.width?e.params.width:r.clientWidth,t=void 0!==e.params.height&&null!==e.params.height?e.params.height:r.clientHeight,0===n&&e.isHorizontal()||0===t&&e.isVertical()||(n=n-parseInt(Sd(r,"padding-left")||0,10)-parseInt(Sd(r,"padding-right")||0,10),t=t-parseInt(Sd(r,"padding-top")||0,10)-parseInt(Sd(r,"padding-bottom")||0,10),Number.isNaN(n)&&(n=0),Number.isNaN(t)&&(t=0),Object.assign(e,{width:n,height:t,size:e.isHorizontal()?n:t}))},updateSlides:function(){const e=this;function n(n,t){return parseFloat(n.getPropertyValue(e.getDirectionLabel(t))||0)}const t=e.params,{wrapperEl:r,slidesEl:i,size:o,rtlTranslate:a,wrongRTL:s}=e,l=e.virtual&&t.virtual.enabled,c=l?e.virtual.slides.length:e.slides.length,u=bd(i,`.${e.params.slideClass}, swiper-slide`),d=l?e.virtual.slides.length:u.length;let p=[];const f=[],h=[];let g=t.slidesOffsetBefore;"function"==typeof g&&(g=t.slidesOffsetBefore.call(e));let m=t.slidesOffsetAfter;"function"==typeof m&&(m=t.slidesOffsetAfter.call(e));const x=e.snapGrid.length,v=e.slidesGrid.length;let y=t.spaceBetween,b=-g,w=0,k=0;if(void 0===o)return;"string"==typeof y&&y.indexOf("%")>=0?y=parseFloat(y.replace("%",""))/100*o:"string"==typeof y&&(y=parseFloat(y)),e.virtualSize=-y,u.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),t.centeredSlides&&t.cssMode&&(vd(r,"--swiper-centered-offset-before",""),vd(r,"--swiper-centered-offset-after",""));const S=t.grid&&t.grid.rows>1&&e.grid;let j;S?e.grid.initSlides(u):e.grid&&e.grid.unsetSlides();const E="auto"===t.slidesPerView&&t.breakpoints&&Object.keys(t.breakpoints).filter((e=>void 0!==t.breakpoints[e].slidesPerView)).length>0;for(let r=0;r<d;r+=1){let i;if(j=0,u[r]&&(i=u[r]),S&&e.grid.updateSlide(r,i,u),!u[r]||"none"!==Sd(i,"display")){if("auto"===t.slidesPerView){E&&(u[r].style[e.getDirectionLabel("width")]="");const o=getComputedStyle(i),a=i.style.transform,s=i.style.webkitTransform;if(a&&(i.style.transform="none"),s&&(i.style.webkitTransform="none"),t.roundLengths)j=e.isHorizontal()?Ed(i,"width",!0):Ed(i,"height",!0);else{const e=n(o,"width"),t=n(o,"padding-left"),r=n(o,"padding-right"),a=n(o,"margin-left"),s=n(o,"margin-right"),l=o.getPropertyValue("box-sizing");if(l&&"border-box"===l)j=e+a+s;else{const{clientWidth:n,offsetWidth:o}=i;j=e+t+r+a+s+(o-n)}}a&&(i.style.transform=a),s&&(i.style.webkitTransform=s),t.roundLengths&&(j=Math.floor(j))}else j=(o-(t.slidesPerView-1)*y)/t.slidesPerView,t.roundLengths&&(j=Math.floor(j)),u[r]&&(u[r].style[e.getDirectionLabel("width")]=`${j}px`);u[r]&&(u[r].swiperSlideSize=j),h.push(j),t.centeredSlides?(b=b+j/2+w/2+y,0===w&&0!==r&&(b=b-o/2-y),0===r&&(b=b-o/2-y),Math.abs(b)<.001&&(b=0),t.roundLengths&&(b=Math.floor(b)),k%t.slidesPerGroup==0&&p.push(b),f.push(b)):(t.roundLengths&&(b=Math.floor(b)),(k-Math.min(e.params.slidesPerGroupSkip,k))%e.params.slidesPerGroup==0&&p.push(b),f.push(b),b=b+j+y),e.virtualSize+=j+y,w=j,k+=1}}if(e.virtualSize=Math.max(e.virtualSize,o)+m,a&&s&&("slide"===t.effect||"coverflow"===t.effect)&&(r.style.width=`${e.virtualSize+y}px`),t.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+y}px`),S&&e.grid.updateWrapperSize(j,p),!t.centeredSlides){const n=[];for(let r=0;r<p.length;r+=1){let i=p[r];t.roundLengths&&(i=Math.floor(i)),p[r]<=e.virtualSize-o&&n.push(i)}p=n,Math.floor(e.virtualSize-o)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-o)}if(l&&t.loop){const n=h[0]+y;if(t.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/t.slidesPerGroup),i=n*t.slidesPerGroup;for(let e=0;e<r;e+=1)p.push(p[p.length-1]+i)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===t.slidesPerGroup&&p.push(p[p.length-1]+n),f.push(f[f.length-1]+n),e.virtualSize+=n}if(0===p.length&&(p=[0]),0!==y){const n=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");u.filter(((e,n)=>!(t.cssMode&&!t.loop)||n!==u.length-1)).forEach((e=>{e.style[n]=`${y}px`}))}if(t.centeredSlides&&t.centeredSlidesBounds){let e=0;h.forEach((n=>{e+=n+(y||0)})),e-=y;const n=e-o;p=p.map((e=>e<=0?-g:e>n?n+m:e))}if(t.centerInsufficientSlides){let e=0;h.forEach((n=>{e+=n+(y||0)})),e-=y;const n=(t.slidesOffsetBefore||0)+(t.slidesOffsetAfter||0);if(e+n<o){const t=(o-e-n)/2;p.forEach(((e,n)=>{p[n]=e-t})),f.forEach(((e,n)=>{f[n]=e+t}))}}if(Object.assign(e,{slides:u,snapGrid:p,slidesGrid:f,slidesSizesGrid:h}),t.centeredSlides&&t.cssMode&&!t.centeredSlidesBounds){vd(r,"--swiper-centered-offset-before",-p[0]+"px"),vd(r,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const n=-e.snapGrid[0],t=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+n)),e.slidesGrid=e.slidesGrid.map((e=>e+t))}if(d!==c&&e.emit("slidesLengthChange"),p.length!==x&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==v&&e.emit("slidesGridLengthChange"),t.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(l||t.cssMode||"slide"!==t.effect&&"fade"!==t.effect)){const n=`${t.containerModifierClass}backface-hidden`,r=e.el.classList.contains(n);d<=t.maxBackfaceHiddenSlides?r||e.el.classList.add(n):r&&e.el.classList.remove(n)}},updateAutoHeight:function(e){const n=this,t=[],r=n.virtual&&n.params.virtual.enabled;let i,o=0;"number"==typeof e?n.setTransition(e):!0===e&&n.setTransition(n.params.speed);const a=e=>r?n.slides[n.getSlideIndexByData(e)]:n.slides[e];if("auto"!==n.params.slidesPerView&&n.params.slidesPerView>1)if(n.params.centeredSlides)(n.visibleSlides||[]).forEach((e=>{t.push(e)}));else for(i=0;i<Math.ceil(n.params.slidesPerView);i+=1){const e=n.activeIndex+i;if(e>n.slides.length&&!r)break;t.push(a(e))}else t.push(a(n.activeIndex));for(i=0;i<t.length;i+=1)if(void 0!==t[i]){const e=t[i].offsetHeight;o=e>o?e:o}(o||0===o)&&(n.wrapperEl.style.height=`${o}px`)},updateSlidesOffset:function(){const e=this,n=e.slides,t=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<n.length;r+=1)n[r].swiperSlideOffset=(e.isHorizontal()?n[r].offsetLeft:n[r].offsetTop)-t-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const n=this,t=n.params,{slides:r,rtlTranslate:i,snapGrid:o}=n;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&n.updateSlidesOffset();let a=-e;i&&(a=e),n.visibleSlidesIndexes=[],n.visibleSlides=[];let s=t.spaceBetween;"string"==typeof s&&s.indexOf("%")>=0?s=parseFloat(s.replace("%",""))/100*n.size:"string"==typeof s&&(s=parseFloat(s));for(let e=0;e<r.length;e+=1){const l=r[e];let c=l.swiperSlideOffset;t.cssMode&&t.centeredSlides&&(c-=r[0].swiperSlideOffset);const u=(a+(t.centeredSlides?n.minTranslate():0)-c)/(l.swiperSlideSize+s),d=(a-o[0]+(t.centeredSlides?n.minTranslate():0)-c)/(l.swiperSlideSize+s),p=-(a-c),f=p+n.slidesSizesGrid[e],h=p>=0&&p<=n.size-n.slidesSizesGrid[e],g=p>=0&&p<n.size-1||f>1&&f<=n.size||p<=0&&f>=n.size;g&&(n.visibleSlides.push(l),n.visibleSlidesIndexes.push(e)),zd(l,g,t.slideVisibleClass),zd(l,h,t.slideFullyVisibleClass),l.progress=i?-u:u,l.originalProgress=i?-d:d}},updateProgress:function(e){const n=this;if(void 0===e){const t=n.rtlTranslate?-1:1;e=n&&n.translate&&n.translate*t||0}const t=n.params,r=n.maxTranslate()-n.minTranslate();let{progress:i,isBeginning:o,isEnd:a,progressLoop:s}=n;const l=o,c=a;if(0===r)i=0,o=!0,a=!0;else{i=(e-n.minTranslate())/r;const t=Math.abs(e-n.minTranslate())<1,s=Math.abs(e-n.maxTranslate())<1;o=t||i<=0,a=s||i>=1,t&&(i=0),s&&(i=1)}if(t.loop){const t=n.getSlideIndexByData(0),r=n.getSlideIndexByData(n.slides.length-1),i=n.slidesGrid[t],o=n.slidesGrid[r],a=n.slidesGrid[n.slidesGrid.length-1],l=Math.abs(e);s=l>=i?(l-i)/a:(l+a-o)/a,s>1&&(s-=1)}Object.assign(n,{progress:i,progressLoop:s,isBeginning:o,isEnd:a}),(t.watchSlidesProgress||t.centeredSlides&&t.autoHeight)&&n.updateSlidesProgress(e),o&&!l&&n.emit("reachBeginning toEdge"),a&&!c&&n.emit("reachEnd toEdge"),(l&&!o||c&&!a)&&n.emit("fromEdge"),n.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:n,params:t,slidesEl:r,activeIndex:i}=e,o=e.virtual&&t.virtual.enabled,a=e.grid&&t.grid&&t.grid.rows>1,s=e=>bd(r,`.${t.slideClass}${e}, swiper-slide${e}`)[0];let l,c,u;if(o)if(t.loop){let n=i-e.virtual.slidesBefore;n<0&&(n=e.virtual.slides.length+n),n>=e.virtual.slides.length&&(n-=e.virtual.slides.length),l=s(`[data-swiper-slide-index="${n}"]`)}else l=s(`[data-swiper-slide-index="${i}"]`);else a?(l=n.filter((e=>e.column===i))[0],u=n.filter((e=>e.column===i+1))[0],c=n.filter((e=>e.column===i-1))[0]):l=n[i];l&&(a||(u=function(e,n){const t=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;n?r.matches(n)&&t.push(r):t.push(r),e=r}return t}(l,`.${t.slideClass}, swiper-slide`)[0],t.loop&&!u&&(u=n[0]),c=function(e,n){const t=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;n?r.matches(n)&&t.push(r):t.push(r),e=r}return t}(l,`.${t.slideClass}, swiper-slide`)[0],t.loop&&0===!c&&(c=n[n.length-1]))),n.forEach((e=>{Ad(e,e===l,t.slideActiveClass),Ad(e,e===u,t.slideNextClass),Ad(e,e===c,t.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const n=this,t=n.rtlTranslate?n.translate:-n.translate,{snapGrid:r,params:i,activeIndex:o,realIndex:a,snapIndex:s}=n;let l,c=e;const u=e=>{let t=e-n.virtual.slidesBefore;return t<0&&(t=n.virtual.slides.length+t),t>=n.virtual.slides.length&&(t-=n.virtual.slides.length),t};if(void 0===c&&(c=function(e){const{slidesGrid:n,params:t}=e,r=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<n.length;e+=1)void 0!==n[e+1]?r>=n[e]&&r<n[e+1]-(n[e+1]-n[e])/2?i=e:r>=n[e]&&r<n[e+1]&&(i=e+1):r>=n[e]&&(i=e);return t.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(n)),r.indexOf(t)>=0)l=r.indexOf(t);else{const e=Math.min(i.slidesPerGroupSkip,c);l=e+Math.floor((c-e)/i.slidesPerGroup)}if(l>=r.length&&(l=r.length-1),c===o&&!n.params.loop)return void(l!==s&&(n.snapIndex=l,n.emit("snapIndexChange")));if(c===o&&n.params.loop&&n.virtual&&n.params.virtual.enabled)return void(n.realIndex=u(c));const d=n.grid&&i.grid&&i.grid.rows>1;let p;if(n.virtual&&i.virtual.enabled&&i.loop)p=u(c);else if(d){const e=n.slides.filter((e=>e.column===c))[0];let t=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(t)&&(t=Math.max(n.slides.indexOf(e),0)),p=Math.floor(t/i.grid.rows)}else if(n.slides[c]){const e=n.slides[c].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):c}else p=c;Object.assign(n,{previousSnapIndex:s,snapIndex:l,previousRealIndex:a,realIndex:p,previousIndex:o,activeIndex:c}),n.initialized&&Nd(n),n.emit("activeIndexChange"),n.emit("snapIndexChange"),(n.initialized||n.params.runCallbacksOnInit)&&(a!==p&&n.emit("realIndexChange"),n.emit("slideChange"))},updateClickedSlide:function(e,n){const t=this,r=t.params;let i=e.closest(`.${r.slideClass}, swiper-slide`);!i&&t.isElement&&n&&n.length>1&&n.includes(e)&&[...n.slice(n.indexOf(e)+1,n.length)].forEach((e=>{!i&&e.matches&&e.matches(`.${r.slideClass}, swiper-slide`)&&(i=e)}));let o,a=!1;if(i)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===i){a=!0,o=e;break}if(!i||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):t.clickedIndex=o,r.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},Dd={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:n,rtlTranslate:t,translate:r,wrapperEl:i}=this;if(n.virtualTranslate)return t?-r:r;if(n.cssMode)return r;let o=function(e,n){void 0===n&&(n="x");const t=pd();let r,i,o;const a=function(e){const n=pd();let t;return n.getComputedStyle&&(t=n.getComputedStyle(e,null)),!t&&e.currentStyle&&(t=e.currentStyle),t||(t=e.style),t}(e);return t.WebKitCSSMatrix?(i=a.transform||a.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),o=new t.WebKitCSSMatrix("none"===i?"":i)):(o=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=o.toString().split(",")),"x"===n&&(i=t.WebKitCSSMatrix?o.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===n&&(i=t.WebKitCSSMatrix?o.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),i||0}(i,e);return o+=this.cssOverflowAdjustment(),t&&(o=-o),o||0},setTranslate:function(e,n){const t=this,{rtlTranslate:r,params:i,wrapperEl:o,progress:a}=t;let s,l=0,c=0;t.isHorizontal()?l=r?-e:e:c=e,i.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),t.previousTranslate=t.translate,t.translate=t.isHorizontal()?l:c,i.cssMode?o[t.isHorizontal()?"scrollLeft":"scrollTop"]=t.isHorizontal()?-l:-c:i.virtualTranslate||(t.isHorizontal()?l-=t.cssOverflowAdjustment():c-=t.cssOverflowAdjustment(),o.style.transform=`translate3d(${l}px, ${c}px, 0px)`);const u=t.maxTranslate()-t.minTranslate();s=0===u?0:(e-t.minTranslate())/u,s!==a&&t.updateProgress(e),t.emit("setTranslate",t.translate,n)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,n,t,r,i){void 0===e&&(e=0),void 0===n&&(n=this.params.speed),void 0===t&&(t=!0),void 0===r&&(r=!0);const o=this,{params:a,wrapperEl:s}=o;if(o.animating&&a.preventInteractionOnTransition)return!1;const l=o.minTranslate(),c=o.maxTranslate();let u;if(u=r&&e>l?l:r&&e<c?c:e,o.updateProgress(u),a.cssMode){const e=o.isHorizontal();if(0===n)s[e?"scrollLeft":"scrollTop"]=-u;else{if(!o.support.smoothScroll)return yd({swiper:o,targetPosition:-u,side:e?"left":"top"}),!0;s.scrollTo({[e?"left":"top"]:-u,behavior:"smooth"})}return!0}return 0===n?(o.setTransition(0),o.setTranslate(u),t&&(o.emit("beforeTransitionStart",n,i),o.emit("transitionEnd"))):(o.setTransition(n),o.setTranslate(u),t&&(o.emit("beforeTransitionStart",n,i),o.emit("transitionStart")),o.animating||(o.animating=!0,o.onTranslateToWrapperTransitionEnd||(o.onTranslateToWrapperTransitionEnd=function(e){o&&!o.destroyed&&e.target===this&&(o.wrapperEl.removeEventListener("transitionend",o.onTranslateToWrapperTransitionEnd),o.onTranslateToWrapperTransitionEnd=null,delete o.onTranslateToWrapperTransitionEnd,o.animating=!1,t&&o.emit("transitionEnd"))}),o.wrapperEl.addEventListener("transitionend",o.onTranslateToWrapperTransitionEnd))),!0}};function Bd(e){let{swiper:n,runCallbacks:t,direction:r,step:i}=e;const{activeIndex:o,previousIndex:a}=n;let s=r;if(s||(s=o>a?"next":o<a?"prev":"reset"),n.emit(`transition${i}`),t&&o!==a){if("reset"===s)return void n.emit(`slideResetTransition${i}`);n.emit(`slideChangeTransition${i}`),"next"===s?n.emit(`slideNextTransition${i}`):n.emit(`slidePrevTransition${i}`)}}var Id={slideTo:function(e,n,t,r,i){void 0===e&&(e=0),void 0===t&&(t=!0),"string"==typeof e&&(e=parseInt(e,10));const o=this;let a=e;a<0&&(a=0);const{params:s,snapGrid:l,slidesGrid:c,previousIndex:u,activeIndex:d,rtlTranslate:p,wrapperEl:f,enabled:h}=o;if(!h&&!r&&!i||o.destroyed||o.animating&&s.preventInteractionOnTransition)return!1;void 0===n&&(n=o.params.speed);const g=Math.min(o.params.slidesPerGroupSkip,a);let m=g+Math.floor((a-g)/o.params.slidesPerGroup);m>=l.length&&(m=l.length-1);const x=-l[m];if(s.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const n=-Math.floor(100*x),t=Math.floor(100*c[e]),r=Math.floor(100*c[e+1]);void 0!==c[e+1]?n>=t&&n<r-(r-t)/2?a=e:n>=t&&n<r&&(a=e+1):n>=t&&(a=e)}if(o.initialized&&a!==d){if(!o.allowSlideNext&&(p?x>o.translate&&x>o.minTranslate():x<o.translate&&x<o.minTranslate()))return!1;if(!o.allowSlidePrev&&x>o.translate&&x>o.maxTranslate()&&(d||0)!==a)return!1}let v;if(a!==(u||0)&&t&&o.emit("beforeSlideChangeStart"),o.updateProgress(x),v=a>d?"next":a<d?"prev":"reset",p&&-x===o.translate||!p&&x===o.translate)return o.updateActiveIndex(a),s.autoHeight&&o.updateAutoHeight(),o.updateSlidesClasses(),"slide"!==s.effect&&o.setTranslate(x),"reset"!==v&&(o.transitionStart(t,v),o.transitionEnd(t,v)),!1;if(s.cssMode){const e=o.isHorizontal(),t=p?x:-x;if(0===n){const n=o.virtual&&o.params.virtual.enabled;n&&(o.wrapperEl.style.scrollSnapType="none",o._immediateVirtual=!0),n&&!o._cssModeVirtualInitialSet&&o.params.initialSlide>0?(o._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[e?"scrollLeft":"scrollTop"]=t}))):f[e?"scrollLeft":"scrollTop"]=t,n&&requestAnimationFrame((()=>{o.wrapperEl.style.scrollSnapType="",o._immediateVirtual=!1}))}else{if(!o.support.smoothScroll)return yd({swiper:o,targetPosition:t,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:t,behavior:"smooth"})}return!0}return o.setTransition(n),o.setTranslate(x),o.updateActiveIndex(a),o.updateSlidesClasses(),o.emit("beforeTransitionStart",n,r),o.transitionStart(t,v),0===n?o.transitionEnd(t,v):o.animating||(o.animating=!0,o.onSlideToWrapperTransitionEnd||(o.onSlideToWrapperTransitionEnd=function(e){o&&!o.destroyed&&e.target===this&&(o.wrapperEl.removeEventListener("transitionend",o.onSlideToWrapperTransitionEnd),o.onSlideToWrapperTransitionEnd=null,delete o.onSlideToWrapperTransitionEnd,o.transitionEnd(t,v))}),o.wrapperEl.addEventListener("transitionend",o.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,n,t,r){void 0===e&&(e=0),void 0===t&&(t=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;if(i.destroyed)return;void 0===n&&(n=i.params.speed);const o=i.grid&&i.params.grid&&i.params.grid.rows>1;let a=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)a+=i.virtual.slidesBefore;else{let e;if(o){const n=a*i.params.grid.rows;e=i.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===n))[0].column}else e=i.getSlideIndexByData(a);const n=o?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:t}=i.params;let s=i.params.slidesPerView;"auto"===s?s=i.slidesPerViewDynamic():(s=Math.ceil(parseFloat(i.params.slidesPerView,10)),t&&s%2==0&&(s+=1));let l=n-e<s;if(t&&(l=l||e<Math.ceil(s/2)),r&&t&&"auto"!==i.params.slidesPerView&&!o&&(l=!1),l){const r=t?e<i.activeIndex?"prev":"next":e-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?e+1:e-n+1,slideRealIndex:"next"===r?i.realIndex:void 0})}if(o){const e=a*i.params.grid.rows;a=i.slides.filter((n=>1*n.getAttribute("data-swiper-slide-index")===e))[0].column}else a=i.getSlideIndexByData(a)}return requestAnimationFrame((()=>{i.slideTo(a,n,t,r)})),i},slideNext:function(e,n,t){void 0===n&&(n=!0);const r=this,{enabled:i,params:o,animating:a}=r;if(!i||r.destroyed)return r;void 0===e&&(e=r.params.speed);let s=o.slidesPerGroup;"auto"===o.slidesPerView&&1===o.slidesPerGroup&&o.slidesPerGroupAuto&&(s=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<o.slidesPerGroupSkip?1:s,c=r.virtual&&o.virtual.enabled;if(o.loop){if(a&&!c&&o.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&o.cssMode)return requestAnimationFrame((()=>{r.slideTo(r.activeIndex+l,e,n,t)})),!0}return o.rewind&&r.isEnd?r.slideTo(0,e,n,t):r.slideTo(r.activeIndex+l,e,n,t)},slidePrev:function(e,n,t){void 0===n&&(n=!0);const r=this,{params:i,snapGrid:o,slidesGrid:a,rtlTranslate:s,enabled:l,animating:c}=r;if(!l||r.destroyed)return r;void 0===e&&(e=r.params.speed);const u=r.virtual&&i.virtual.enabled;if(i.loop){if(c&&!u&&i.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=d(s?r.translate:-r.translate),f=o.map((e=>d(e)));let h=o[f.indexOf(p)-1];if(void 0===h&&i.cssMode){let e;o.forEach(((n,t)=>{p>=n&&(e=t)})),void 0!==e&&(h=o[e>0?e-1:e])}let g=0;if(void 0!==h&&(g=a.indexOf(h),g<0&&(g=r.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(g=g-r.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),i.rewind&&r.isBeginning){const i=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(i,e,n,t)}return i.loop&&0===r.activeIndex&&i.cssMode?(requestAnimationFrame((()=>{r.slideTo(g,e,n,t)})),!0):r.slideTo(g,e,n,t)},slideReset:function(e,n,t){void 0===n&&(n=!0);const r=this;if(!r.destroyed)return void 0===e&&(e=r.params.speed),r.slideTo(r.activeIndex,e,n,t)},slideToClosest:function(e,n,t,r){void 0===n&&(n=!0),void 0===r&&(r=.5);const i=this;if(i.destroyed)return;void 0===e&&(e=i.params.speed);let o=i.activeIndex;const a=Math.min(i.params.slidesPerGroupSkip,o),s=a+Math.floor((o-a)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;if(l>=i.snapGrid[s]){const e=i.snapGrid[s];l-e>(i.snapGrid[s+1]-e)*r&&(o+=i.params.slidesPerGroup)}else{const e=i.snapGrid[s-1];l-e<=(i.snapGrid[s]-e)*r&&(o-=i.params.slidesPerGroup)}return o=Math.max(o,0),o=Math.min(o,i.slidesGrid.length-1),i.slideTo(o,e,n,t)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:n,slidesEl:t}=e,r="auto"===n.slidesPerView?e.slidesPerViewDynamic():n.slidesPerView;let i,o=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${n.slideClass}`;if(n.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),n.centeredSlides?o<e.loopedSlides-r/2||o>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),o=e.getSlideIndex(bd(t,`${a}[data-swiper-slide-index="${i}"]`)[0]),fd((()=>{e.slideTo(o)}))):e.slideTo(o):o>e.slides.length-r?(e.loopFix(),o=e.getSlideIndex(bd(t,`${a}[data-swiper-slide-index="${i}"]`)[0]),fd((()=>{e.slideTo(o)}))):e.slideTo(o)}else e.slideTo(o)}},Vd={loopCreate:function(e){const n=this,{params:t,slidesEl:r}=n;if(!t.loop||n.virtual&&n.params.virtual.enabled)return;const i=()=>{bd(r,`.${t.slideClass}, swiper-slide`).forEach(((e,n)=>{e.setAttribute("data-swiper-slide-index",n)}))},o=n.grid&&t.grid&&t.grid.rows>1,a=t.slidesPerGroup*(o?t.grid.rows:1),s=n.slides.length%a!=0,l=o&&n.slides.length%t.grid.rows!=0,c=e=>{for(let r=0;r<e;r+=1){const e=n.isElement?kd("swiper-slide",[t.slideBlankClass]):kd("div",[t.slideClass,t.slideBlankClass]);n.slidesEl.append(e)}};s?(t.loopAddBlankSlides?(c(a-n.slides.length%a),n.recalcSlides(),n.updateSlides()):wd("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),i()):l?(t.loopAddBlankSlides?(c(t.grid.rows-n.slides.length%t.grid.rows),n.recalcSlides(),n.updateSlides()):wd("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),i()):i(),n.loopFix({slideRealIndex:e,direction:t.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:n,slideTo:t=!0,direction:r,setTranslate:i,activeSlideIndex:o,byController:a,byMousewheel:s}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:c,allowSlidePrev:u,allowSlideNext:d,slidesEl:p,params:f}=l,{centeredSlides:h}=f;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&f.virtual.enabled)return t&&(f.centeredSlides||0!==l.snapIndex?f.centeredSlides&&l.snapIndex<f.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=u,l.allowSlideNext=d,void l.emit("loopFix");let g=f.slidesPerView;"auto"===g?g=l.slidesPerViewDynamic():(g=Math.ceil(parseFloat(f.slidesPerView,10)),h&&g%2==0&&(g+=1));const m=f.slidesPerGroupAuto?g:f.slidesPerGroup;let x=m;x%m!=0&&(x+=m-x%m),x+=f.loopAdditionalSlides,l.loopedSlides=x;const v=l.grid&&f.grid&&f.grid.rows>1;c.length<g+x?wd("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):v&&"row"===f.grid.fill&&wd("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const y=[],b=[];let w=l.activeIndex;void 0===o?o=l.getSlideIndex(c.filter((e=>e.classList.contains(f.slideActiveClass)))[0]):w=o;const k="next"===r||!r,S="prev"===r||!r;let j=0,E=0;const C=v?Math.ceil(c.length/f.grid.rows):c.length,_=(v?c[o].column:o)+(h&&void 0===i?-g/2+.5:0);if(_<x){j=Math.max(x-_,m);for(let e=0;e<x-_;e+=1){const n=e-Math.floor(e/C)*C;if(v){const e=C-n-1;for(let n=c.length-1;n>=0;n-=1)c[n].column===e&&y.push(n)}else y.push(C-n-1)}}else if(_+g>C-x){E=Math.max(_-(C-2*x),m);for(let e=0;e<E;e+=1){const n=e-Math.floor(e/C)*C;v?c.forEach(((e,t)=>{e.column===n&&b.push(t)})):b.push(n)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),S&&y.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),k&&b.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.append(c[e]),c[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===f.slidesPerView?l.updateSlides():v&&(y.length>0&&S||b.length>0&&k)&&l.slides.forEach(((e,n)=>{l.grid.updateSlide(n,e,l.slides)})),f.watchSlidesProgress&&l.updateSlidesOffset(),t)if(y.length>0&&S){if(void 0===n){const e=l.slidesGrid[w],n=l.slidesGrid[w+j]-e;s?l.setTranslate(l.translate-n):(l.slideTo(w+Math.ceil(j),0,!1,!0),i&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-n,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-n))}else if(i){const e=v?y.length/f.grid.rows:y.length;l.slideTo(l.activeIndex+e,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(b.length>0&&k)if(void 0===n){const e=l.slidesGrid[w],n=l.slidesGrid[w-E]-e;s?l.setTranslate(l.translate-n):(l.slideTo(w-E,0,!1,!0),i&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-n,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-n))}else{const e=v?b.length/f.grid.rows:b.length;l.slideTo(l.activeIndex-e,0,!1,!0)}if(l.allowSlidePrev=u,l.allowSlideNext=d,l.controller&&l.controller.control&&!a){const e={slideRealIndex:n,direction:r,setTranslate:i,activeSlideIndex:o,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((n=>{!n.destroyed&&n.params.loop&&n.loopFix({...e,slideTo:n.params.slidesPerView===f.slidesPerView&&t})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===f.slidesPerView&&t})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:n,slidesEl:t}=e;if(!n.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach((e=>{const n=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;r[n]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),r.forEach((e=>{t.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function $d(e,n,t){const r=pd(),{params:i}=e,o=i.edgeSwipeDetection,a=i.edgeSwipeThreshold;return!o||!(t<=a||t>=r.innerWidth-a)||"prevent"===o&&(n.preventDefault(),!0)}function Ud(e){const n=this,t=ud();let r=e;r.originalEvent&&(r=r.originalEvent);const i=n.touchEventsData;if("pointerdown"===r.type){if(null!==i.pointerId&&i.pointerId!==r.pointerId)return;i.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(i.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void $d(n,r,r.targetTouches[0].pageX);const{params:o,touches:a,enabled:s}=n;if(!s)return;if(!o.simulateTouch&&"mouse"===r.pointerType)return;if(n.animating&&o.preventInteractionOnTransition)return;!n.animating&&o.cssMode&&o.loop&&n.loopFix();let l=r.target;if("wrapper"===o.touchEventsTarget&&!function(e,n){const t=n.contains(e);return!t&&n instanceof HTMLSlotElement?[...n.assignedElements()].includes(e):t}(l,n.wrapperEl))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;const c=!!o.noSwipingClass&&""!==o.noSwipingClass,u=r.composedPath?r.composedPath():r.path;c&&r.target&&r.target.shadowRoot&&u&&(l=u[0]);const d=o.noSwipingSelector?o.noSwipingSelector:`.${o.noSwipingClass}`,p=!(!r.target||!r.target.shadowRoot);if(o.noSwiping&&(p?function(e,n){return void 0===n&&(n=this),function n(t){if(!t||t===ud()||t===pd())return null;t.assignedSlot&&(t=t.assignedSlot);const r=t.closest(e);return r||t.getRootNode?r||n(t.getRootNode().host):null}(n)}(d,l):l.closest(d)))return void(n.allowClick=!0);if(o.swipeHandler&&!l.closest(o.swipeHandler))return;a.currentX=r.pageX,a.currentY=r.pageY;const f=a.currentX,h=a.currentY;if(!$d(n,r,f))return;Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=f,a.startY=h,i.touchStartTime=hd(),n.allowClick=!0,n.updateSize(),n.swipeDirection=void 0,o.threshold>0&&(i.allowThresholdMove=!1);let g=!0;l.matches(i.focusableElements)&&(g=!1,"SELECT"===l.nodeName&&(i.isTouched=!1)),t.activeElement&&t.activeElement.matches(i.focusableElements)&&t.activeElement!==l&&t.activeElement.blur();const m=g&&n.allowTouchMove&&o.touchStartPreventDefault;!o.touchStartForcePreventDefault&&!m||l.isContentEditable||r.preventDefault(),o.freeMode&&o.freeMode.enabled&&n.freeMode&&n.animating&&!o.cssMode&&n.freeMode.onTouchStart(),n.emit("touchStart",r)}function qd(e){const n=ud(),t=this,r=t.touchEventsData,{params:i,touches:o,rtlTranslate:a,enabled:s}=t;if(!s)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let l,c=e;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==r.touchId)return;if(c.pointerId!==r.pointerId)return}if("touchmove"===c.type){if(l=[...c.changedTouches].filter((e=>e.identifier===r.touchId))[0],!l||l.identifier!==r.touchId)return}else l=c;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&t.emit("touchMoveOpposite",c));const u=l.pageX,d=l.pageY;if(c.preventedByNestedSwiper)return o.startX=u,void(o.startY=d);if(!t.allowTouchMove)return c.target.matches(r.focusableElements)||(t.allowClick=!1),void(r.isTouched&&(Object.assign(o,{startX:u,startY:d,currentX:u,currentY:d}),r.touchStartTime=hd()));if(i.touchReleaseOnEdges&&!i.loop)if(t.isVertical()){if(d<o.startY&&t.translate<=t.maxTranslate()||d>o.startY&&t.translate>=t.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(u<o.startX&&t.translate<=t.maxTranslate()||u>o.startX&&t.translate>=t.minTranslate())return;if(n.activeElement&&c.target===n.activeElement&&c.target.matches(r.focusableElements))return r.isMoved=!0,void(t.allowClick=!1);r.allowTouchCallbacks&&t.emit("touchMove",c),o.previousX=o.currentX,o.previousY=o.currentY,o.currentX=u,o.currentY=d;const p=o.currentX-o.startX,f=o.currentY-o.startY;if(t.params.threshold&&Math.sqrt(p**2+f**2)<t.params.threshold)return;if(void 0===r.isScrolling){let e;t.isHorizontal()&&o.currentY===o.startY||t.isVertical()&&o.currentX===o.startX?r.isScrolling=!1:p*p+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(p))/Math.PI,r.isScrolling=t.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(r.isScrolling&&t.emit("touchMoveOpposite",c),void 0===r.startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===c.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;t.allowClick=!1,!i.cssMode&&c.cancelable&&c.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&c.stopPropagation();let h=t.isHorizontal()?p:f,g=t.isHorizontal()?o.currentX-o.previousX:o.currentY-o.previousY;i.oneWayMovement&&(h=Math.abs(h)*(a?1:-1),g=Math.abs(g)*(a?1:-1)),o.diff=h,h*=i.touchRatio,a&&(h=-h,g=-g);const m=t.touchesDirection;t.swipeDirection=h>0?"prev":"next",t.touchesDirection=g>0?"prev":"next";const x=t.params.loop&&!i.cssMode,v="next"===t.touchesDirection&&t.allowSlideNext||"prev"===t.touchesDirection&&t.allowSlidePrev;if(!r.isMoved){if(x&&v&&t.loopFix({direction:t.swipeDirection}),r.startTranslate=t.getTranslate(),t.setTransition(0),t.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});t.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!i.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",c)}if((new Date).getTime(),r.isMoved&&r.allowThresholdMove&&m!==t.touchesDirection&&x&&v&&Math.abs(h)>=1)return Object.assign(o,{startX:u,startY:d,currentX:u,currentY:d,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);t.emit("sliderMove",c),r.isMoved=!0,r.currentTranslate=h+r.startTranslate;let y=!0,b=i.resistanceRatio;if(i.touchReleaseOnEdges&&(b=0),h>0?(x&&v&&r.allowThresholdMove&&r.currentTranslate>(i.centeredSlides?t.minTranslate()-t.slidesSizesGrid[t.activeIndex+1]-("auto"!==i.slidesPerView&&t.slides.length-i.slidesPerView>=2?t.slidesSizesGrid[t.activeIndex+1]+t.params.spaceBetween:0)-t.params.spaceBetween:t.minTranslate())&&t.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>t.minTranslate()&&(y=!1,i.resistance&&(r.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+r.startTranslate+h)**b))):h<0&&(x&&v&&r.allowThresholdMove&&r.currentTranslate<(i.centeredSlides?t.maxTranslate()+t.slidesSizesGrid[t.slidesSizesGrid.length-1]+t.params.spaceBetween+("auto"!==i.slidesPerView&&t.slides.length-i.slidesPerView>=2?t.slidesSizesGrid[t.slidesSizesGrid.length-1]+t.params.spaceBetween:0):t.maxTranslate())&&t.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:t.slides.length-("auto"===i.slidesPerView?t.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),r.currentTranslate<t.maxTranslate()&&(y=!1,i.resistance&&(r.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-r.startTranslate-h)**b))),y&&(c.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),t.allowSlidePrev||t.allowSlideNext||(r.currentTranslate=r.startTranslate),i.threshold>0){if(!(Math.abs(h)>i.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,r.currentTranslate=r.startTranslate,void(o.diff=t.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&t.freeMode||i.watchSlidesProgress)&&(t.updateActiveIndex(),t.updateSlidesClasses()),i.freeMode&&i.freeMode.enabled&&t.freeMode&&t.freeMode.onTouchMove(),t.updateProgress(r.currentTranslate),t.setTranslate(r.currentTranslate))}function Hd(e){const n=this,t=n.touchEventsData;let r,i=e;if(i.originalEvent&&(i=i.originalEvent),"touchend"===i.type||"touchcancel"===i.type){if(r=[...i.changedTouches].filter((e=>e.identifier===t.touchId))[0],!r||r.identifier!==t.touchId)return}else{if(null!==t.touchId)return;if(i.pointerId!==t.pointerId)return;r=i}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(i.type)&&(!["pointercancel","contextmenu"].includes(i.type)||!n.browser.isSafari&&!n.browser.isWebView))return;t.pointerId=null,t.touchId=null;const{params:o,touches:a,rtlTranslate:s,slidesGrid:l,enabled:c}=n;if(!c)return;if(!o.simulateTouch&&"mouse"===i.pointerType)return;if(t.allowTouchCallbacks&&n.emit("touchEnd",i),t.allowTouchCallbacks=!1,!t.isTouched)return t.isMoved&&o.grabCursor&&n.setGrabCursor(!1),t.isMoved=!1,void(t.startMoving=!1);o.grabCursor&&t.isMoved&&t.isTouched&&(!0===n.allowSlideNext||!0===n.allowSlidePrev)&&n.setGrabCursor(!1);const u=hd(),d=u-t.touchStartTime;if(n.allowClick){const e=i.path||i.composedPath&&i.composedPath();n.updateClickedSlide(e&&e[0]||i.target,e),n.emit("tap click",i),d<300&&u-t.lastClickTime<300&&n.emit("doubleTap doubleClick",i)}if(t.lastClickTime=hd(),fd((()=>{n.destroyed||(n.allowClick=!0)})),!t.isTouched||!t.isMoved||!n.swipeDirection||0===a.diff&&!t.loopSwapReset||t.currentTranslate===t.startTranslate&&!t.loopSwapReset)return t.isTouched=!1,t.isMoved=!1,void(t.startMoving=!1);let p;if(t.isTouched=!1,t.isMoved=!1,t.startMoving=!1,p=o.followFinger?s?n.translate:-n.translate:-t.currentTranslate,o.cssMode)return;if(o.freeMode&&o.freeMode.enabled)return void n.freeMode.onTouchEnd({currentPos:p});const f=p>=-n.maxTranslate()&&!n.params.loop;let h=0,g=n.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<o.slidesPerGroupSkip?1:o.slidesPerGroup){const n=e<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;void 0!==l[e+n]?(f||p>=l[e]&&p<l[e+n])&&(h=e,g=l[e+n]-l[e]):(f||p>=l[e])&&(h=e,g=l[l.length-1]-l[l.length-2])}let m=null,x=null;o.rewind&&(n.isBeginning?x=o.virtual&&o.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1:n.isEnd&&(m=0));const v=(p-l[h])/g,y=h<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;if(d>o.longSwipesMs){if(!o.longSwipes)return void n.slideTo(n.activeIndex);"next"===n.swipeDirection&&(v>=o.longSwipesRatio?n.slideTo(o.rewind&&n.isEnd?m:h+y):n.slideTo(h)),"prev"===n.swipeDirection&&(v>1-o.longSwipesRatio?n.slideTo(h+y):null!==x&&v<0&&Math.abs(v)>o.longSwipesRatio?n.slideTo(x):n.slideTo(h))}else{if(!o.shortSwipes)return void n.slideTo(n.activeIndex);!n.navigation||i.target!==n.navigation.nextEl&&i.target!==n.navigation.prevEl?("next"===n.swipeDirection&&n.slideTo(null!==m?m:h+y),"prev"===n.swipeDirection&&n.slideTo(null!==x?x:h)):i.target===n.navigation.nextEl?n.slideTo(h+y):n.slideTo(h)}}function Wd(){const e=this,{params:n,el:t}=e;if(t&&0===t.offsetWidth)return;n.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:o}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const s=a&&n.loop;!("auto"===n.slidesPerView||n.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||s?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&o!==e.snapGrid&&e.checkOverflow()}function Gd(e){const n=this;n.enabled&&(n.allowClick||(n.params.preventClicks&&e.preventDefault(),n.params.preventClicksPropagation&&n.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Yd(){const e=this,{wrapperEl:n,rtlTranslate:t,enabled:r}=e;if(!r)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-n.scrollLeft:e.translate=-n.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const o=e.maxTranslate()-e.minTranslate();i=0===o?0:(e.translate-e.minTranslate())/o,i!==e.progress&&e.updateProgress(t?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function Qd(e){const n=this;Ld(n,e.target),n.params.cssMode||"auto"!==n.params.slidesPerView&&!n.params.autoHeight||n.update()}function Xd(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const Kd=(e,n)=>{const t=ud(),{params:r,el:i,wrapperEl:o,device:a}=e,s=!!r.nested,l="on"===n?"addEventListener":"removeEventListener",c=n;i&&"string"!=typeof i&&(t[l]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:s}),i[l]("touchstart",e.onTouchStart,{passive:!1}),i[l]("pointerdown",e.onTouchStart,{passive:!1}),t[l]("touchmove",e.onTouchMove,{passive:!1,capture:s}),t[l]("pointermove",e.onTouchMove,{passive:!1,capture:s}),t[l]("touchend",e.onTouchEnd,{passive:!0}),t[l]("pointerup",e.onTouchEnd,{passive:!0}),t[l]("pointercancel",e.onTouchEnd,{passive:!0}),t[l]("touchcancel",e.onTouchEnd,{passive:!0}),t[l]("pointerout",e.onTouchEnd,{passive:!0}),t[l]("pointerleave",e.onTouchEnd,{passive:!0}),t[l]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&i[l]("click",e.onClick,!0),r.cssMode&&o[l]("scroll",e.onScroll),r.updateOnWindowResize?e[c](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",Wd,!0):e[c]("observerUpdate",Wd,!0),i[l]("load",e.onLoad,{capture:!0}))},Jd=(e,n)=>e.grid&&n.grid&&n.grid.rows>1;var Zd={setBreakpoint:function(){const e=this,{realIndex:n,initialized:t,params:r,el:i}=e,o=r.breakpoints;if(!o||o&&0===Object.keys(o).length)return;const a=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const s=(a in o?o[a]:void 0)||e.originalParams,l=Jd(e,r),c=Jd(e,s),u=e.params.grabCursor,d=s.grabCursor,p=r.enabled;l&&!c?(i.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!l&&c&&(i.classList.add(`${r.containerModifierClass}grid`),(s.grid.fill&&"column"===s.grid.fill||!s.grid.fill&&"column"===r.grid.fill)&&i.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),u&&!d?e.unsetGrabCursor():!u&&d&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((n=>{if(void 0===s[n])return;const t=r[n]&&r[n].enabled,i=s[n]&&s[n].enabled;t&&!i&&e[n].disable(),!t&&i&&e[n].enable()}));const f=s.direction&&s.direction!==r.direction,h=r.loop&&(s.slidesPerView!==r.slidesPerView||f),g=r.loop;f&&t&&e.changeDirection(),xd(e.params,s);const m=e.params.enabled,x=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),p&&!m?e.disable():!p&&m&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",s),t&&(h?(e.loopDestroy(),e.loopCreate(n),e.updateSlides()):!g&&x?(e.loopCreate(n),e.updateSlides()):g&&!x&&e.loopDestroy()),e.emit("breakpoint",s)},getBreakpoint:function(e,n,t){if(void 0===n&&(n="window"),!e||"container"===n&&!t)return;let r=!1;const i=pd(),o="window"===n?i.innerHeight:t.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const n=parseFloat(e.substr(1));return{value:o*n,point:e}}return{value:e,point:e}}));a.sort(((e,n)=>parseInt(e.value,10)-parseInt(n.value,10)));for(let e=0;e<a.length;e+=1){const{point:o,value:s}=a[e];"window"===n?i.matchMedia(`(min-width: ${s}px)`).matches&&(r=o):s<=t.clientWidth&&(r=o)}return r||"max"}},ep={addClasses:function(){const e=this,{classNames:n,params:t,rtl:r,el:i,device:o}=e,a=function(e,n){const t=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((r=>{e[r]&&t.push(n+r)})):"string"==typeof e&&t.push(n+e)})),t}(["initialized",t.direction,{"free-mode":e.params.freeMode&&t.freeMode.enabled},{autoheight:t.autoHeight},{rtl:r},{grid:t.grid&&t.grid.rows>1},{"grid-column":t.grid&&t.grid.rows>1&&"column"===t.grid.fill},{android:o.android},{ios:o.ios},{"css-mode":t.cssMode},{centered:t.cssMode&&t.centeredSlides},{"watch-progress":t.watchSlidesProgress}],t.containerModifierClass);n.push(...a),i.classList.add(...n),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:n}=this;e&&"string"!=typeof e&&(e.classList.remove(...n),this.emitContainerClasses())}},np={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function tp(e,n){return function(t){void 0===t&&(t={});const r=Object.keys(t)[0],i=t[r];"object"==typeof i&&null!==i?(!0===e[r]&&(e[r]={enabled:!0}),"navigation"===r&&e[r]&&e[r].enabled&&!e[r].prevEl&&!e[r].nextEl&&(e[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&e[r]&&e[r].enabled&&!e[r].el&&(e[r].auto=!0),r in e&&"enabled"in i?("object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),xd(n,t)):xd(n,t)):xd(n,t)}}const rp={eventsEmitter:Td,update:Rd,translate:Dd,transition:{setTransition:function(e,n){const t=this;t.params.cssMode||(t.wrapperEl.style.transitionDuration=`${e}ms`,t.wrapperEl.style.transitionDelay=0===e?"0ms":""),t.emit("setTransition",e,n)},transitionStart:function(e,n){void 0===e&&(e=!0);const t=this,{params:r}=t;r.cssMode||(r.autoHeight&&t.updateAutoHeight(),Bd({swiper:t,runCallbacks:e,direction:n,step:"Start"}))},transitionEnd:function(e,n){void 0===e&&(e=!0);const t=this,{params:r}=t;t.animating=!1,r.cssMode||(t.setTransition(0),Bd({swiper:t,runCallbacks:e,direction:n,step:"End"}))}},slide:Id,loop:Vd,grabCursor:{setGrabCursor:function(e){const n=this;if(!n.params.simulateTouch||n.params.watchOverflow&&n.isLocked||n.params.cssMode)return;const t="container"===n.params.touchEventsTarget?n.el:n.wrapperEl;n.isElement&&(n.__preventObserver__=!0),t.style.cursor="move",t.style.cursor=e?"grabbing":"grab",n.isElement&&requestAnimationFrame((()=>{n.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:n}=e;e.onTouchStart=Ud.bind(e),e.onTouchMove=qd.bind(e),e.onTouchEnd=Hd.bind(e),e.onDocumentTouchStart=Xd.bind(e),n.cssMode&&(e.onScroll=Yd.bind(e)),e.onClick=Gd.bind(e),e.onLoad=Qd.bind(e),Kd(e,"on")},detachEvents:function(){Kd(this,"off")}},breakpoints:Zd,checkOverflow:{checkOverflow:function(){const e=this,{isLocked:n,params:t}=e,{slidesOffsetBefore:r}=t;if(r){const n=e.slides.length-1,t=e.slidesGrid[n]+e.slidesSizesGrid[n]+2*r;e.isLocked=e.size>t}else e.isLocked=1===e.snapGrid.length;!0===t.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===t.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),n&&n!==e.isLocked&&(e.isEnd=!1),n!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:ep},ip={};class op{constructor(){let e,n;for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?n=r[0]:[e,n]=r,n||(n={}),n=xd({},n),e&&!n.el&&(n.el=e);const o=ud();if(n.el&&"string"==typeof n.el&&o.querySelectorAll(n.el).length>1){const e=[];return o.querySelectorAll(n.el).forEach((t=>{const r=xd({},n,{el:t});e.push(new op(r))})),e}const a=this;a.__swiper__=!0,a.support=Fd(),a.device=Pd({userAgent:n.userAgent}),a.browser=(Od||(Od=function(){const e=pd(),n=Pd();let t=!1;function r(){const n=e.navigator.userAgent.toLowerCase();return n.indexOf("safari")>=0&&n.indexOf("chrome")<0&&n.indexOf("android")<0}if(r()){const n=String(e.navigator.userAgent);if(n.includes("Version/")){const[e,r]=n.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&r<2}}const i=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),o=r();return{isSafari:t||o,needPerspectiveFix:t,need3dFix:o||i&&n.ios,isWebView:i}}()),Od),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],n.modules&&Array.isArray(n.modules)&&a.modules.push(...n.modules);const s={};a.modules.forEach((e=>{e({params:n,swiper:a,extendParams:tp(n,s),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const l=xd({},np,s);return a.params=xd({},l,ip,n),a.originalParams=xd({},a.params),a.passedParams=xd({},n),a.params&&a.params.on&&Object.keys(a.params.on).forEach((e=>{a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===a.params.direction,isVertical:()=>"vertical"===a.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:n,params:t}=this,r=jd(bd(n,`.${t.slideClass}, swiper-slide`)[0]);return jd(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((n=>1*n.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:n}=this;this.slides=bd(e,`.${n.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,n){const t=this;e=Math.min(Math.max(e,0),1);const r=t.minTranslate(),i=(t.maxTranslate()-r)*e+r;t.translateTo(i,void 0===n?0:n),t.updateActiveIndex(),t.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const n=e.el.className.split(" ").filter((n=>0===n.indexOf("swiper")||0===n.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",n.join(" "))}getSlideClasses(e){const n=this;return n.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(n.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const n=[];e.slides.forEach((t=>{const r=e.getSlideClasses(t);n.push({slideEl:t,classNames:r}),e.emit("_slideClass",t,r)})),e.emit("_slideClasses",n)}slidesPerViewDynamic(e,n){void 0===e&&(e="current"),void 0===n&&(n=!1);const{params:t,slides:r,slidesGrid:i,slidesSizesGrid:o,size:a,activeIndex:s}=this;let l=1;if("number"==typeof t.slidesPerView)return t.slidesPerView;if(t.centeredSlides){let e,n=r[s]?Math.ceil(r[s].swiperSlideSize):0;for(let t=s+1;t<r.length;t+=1)r[t]&&!e&&(n+=Math.ceil(r[t].swiperSlideSize),l+=1,n>a&&(e=!0));for(let t=s-1;t>=0;t-=1)r[t]&&!e&&(n+=r[t].swiperSlideSize,l+=1,n>a&&(e=!0))}else if("current"===e)for(let e=s+1;e<r.length;e+=1)(n?i[e]+o[e]-i[s]<a:i[e]-i[s]<a)&&(l+=1);else for(let e=s-1;e>=0;e-=1)i[s]-i[e]<a&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:n,params:t}=e;function r(){const n=e.rtlTranslate?-1*e.translate:e.translate,t=Math.min(Math.max(n,e.maxTranslate()),e.minTranslate());e.setTranslate(t),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(t.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((n=>{n.complete&&Ld(e,n)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),t.freeMode&&t.freeMode.enabled&&!t.cssMode)r(),t.autoHeight&&e.updateAutoHeight();else{if(("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!t.centeredSlides){const n=e.virtual&&t.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(n.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||r()}t.watchOverflow&&n!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,n){void 0===n&&(n=!0);const t=this,r=t.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(t.el.classList.remove(`${t.params.containerModifierClass}${r}`),t.el.classList.add(`${t.params.containerModifierClass}${e}`),t.emitContainerClasses(),t.params.direction=e,t.slides.forEach((n=>{"vertical"===e?n.style.width="":n.style.height=""})),t.emit("changeDirection"),n&&t.update()),t}changeLanguageDirection(e){const n=this;n.rtl&&"rtl"===e||!n.rtl&&"ltr"===e||(n.rtl="rtl"===e,n.rtlTranslate="horizontal"===n.params.direction&&n.rtl,n.rtl?(n.el.classList.add(`${n.params.containerModifierClass}rtl`),n.el.dir="rtl"):(n.el.classList.remove(`${n.params.containerModifierClass}rtl`),n.el.dir="ltr"),n.update())}mount(e){const n=this;if(n.mounted)return!0;let t=e||n.params.el;if("string"==typeof t&&(t=document.querySelector(t)),!t)return!1;t.swiper=n,t.parentNode&&t.parentNode.host&&t.parentNode.host.nodeName===n.params.swiperElementNodeName.toUpperCase()&&(n.isElement=!0);const r=()=>`.${(n.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=t&&t.shadowRoot&&t.shadowRoot.querySelector?t.shadowRoot.querySelector(r()):bd(t,r())[0];return!i&&n.params.createElements&&(i=kd("div",n.params.wrapperClass),t.append(i),bd(t,`.${n.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(n,{el:t,wrapperEl:i,slidesEl:n.isElement&&!t.parentNode.host.slideSlots?t.parentNode.host:i,hostEl:n.isElement?t.parentNode.host:t,mounted:!0,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===Sd(t,"direction"),rtlTranslate:"horizontal"===n.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===Sd(t,"direction")),wrongRTL:"-webkit-box"===Sd(i,"display")}),!0}init(e){const n=this;if(n.initialized)return n;if(!1===n.mount(e))return n;n.emit("beforeInit"),n.params.breakpoints&&n.setBreakpoint(),n.addClasses(),n.updateSize(),n.updateSlides(),n.params.watchOverflow&&n.checkOverflow(),n.params.grabCursor&&n.enabled&&n.setGrabCursor(),n.params.loop&&n.virtual&&n.params.virtual.enabled?n.slideTo(n.params.initialSlide+n.virtual.slidesBefore,0,n.params.runCallbacksOnInit,!1,!0):n.slideTo(n.params.initialSlide,0,n.params.runCallbacksOnInit,!1,!0),n.params.loop&&n.loopCreate(),n.attachEvents();const t=[...n.el.querySelectorAll('[loading="lazy"]')];return n.isElement&&t.push(...n.hostEl.querySelectorAll('[loading="lazy"]')),t.forEach((e=>{e.complete?Ld(n,e):e.addEventListener("load",(e=>{Ld(n,e.target)}))})),Nd(n),n.initialized=!0,Nd(n),n.emit("init"),n.emit("afterInit"),n}destroy(e,n){void 0===e&&(e=!0),void 0===n&&(n=!0);const t=this,{params:r,el:i,wrapperEl:o,slides:a}=t;return void 0===t.params||t.destroyed||(t.emit("beforeDestroy"),t.initialized=!1,t.detachEvents(),r.loop&&t.loopDestroy(),n&&(t.removeClasses(),i&&"string"!=typeof i&&i.removeAttribute("style"),o&&o.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),t.emit("destroy"),Object.keys(t.eventsListeners).forEach((e=>{t.off(e)})),!1!==e&&(t.el&&"string"!=typeof t.el&&(t.el.swiper=null),function(e){const n=e;Object.keys(n).forEach((e=>{try{n[e]=null}catch(e){}try{delete n[e]}catch(e){}}))}(t)),t.destroyed=!0),null}static extendDefaults(e){xd(ip,e)}static get extendedDefaults(){return ip}static get defaults(){return np}static installModule(e){op.prototype.__modules__||(op.prototype.__modules__=[]);const n=op.prototype.__modules__;"function"==typeof e&&n.indexOf(e)<0&&n.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>op.installModule(e))),op):(op.installModule(e),op)}}Object.keys(rp).forEach((e=>{Object.keys(rp[e]).forEach((n=>{op.prototype[n]=rp[e][n]}))})),op.use([function(e){let{swiper:n,on:t,emit:r}=e;const i=pd();let o=null,a=null;const s=()=>{n&&!n.destroyed&&n.initialized&&(r("beforeResize"),r("resize"))},l=()=>{n&&!n.destroyed&&n.initialized&&r("orientationchange")};t("init",(()=>{n.params.resizeObserver&&void 0!==i.ResizeObserver?n&&!n.destroyed&&n.initialized&&(o=new ResizeObserver((e=>{a=i.requestAnimationFrame((()=>{const{width:t,height:r}=n;let i=t,o=r;e.forEach((e=>{let{contentBoxSize:t,contentRect:r,target:a}=e;a&&a!==n.el||(i=r?r.width:(t[0]||t).inlineSize,o=r?r.height:(t[0]||t).blockSize)})),i===t&&o===r||s()}))})),o.observe(n.el)):(i.addEventListener("resize",s),i.addEventListener("orientationchange",l))})),t("destroy",(()=>{a&&i.cancelAnimationFrame(a),o&&o.unobserve&&n.el&&(o.unobserve(n.el),o=null),i.removeEventListener("resize",s),i.removeEventListener("orientationchange",l)}))},function(e){let{swiper:n,extendParams:t,on:r,emit:i}=e;const o=[],a=pd(),s=function(e,t){void 0===t&&(t={});const r=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(n.__preventObserver__)return;if(1===e.length)return void i("observerUpdate",e[0]);const t=function(){i("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(t):a.setTimeout(t,0)}));r.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:n.isElement||(void 0===t.childList||t).childList,characterData:void 0===t.characterData||t.characterData}),o.push(r)};t({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(n.params.observer){if(n.params.observeParents){const e=function(e){const n=[];let t=e.parentElement;for(;t;)n.push(t),t=t.parentElement;return n}(n.hostEl);for(let n=0;n<e.length;n+=1)s(e[n])}s(n.hostEl,{childList:n.params.observeSlideChildren}),s(n.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{o.forEach((e=>{e.disconnect()})),o.splice(0,o.length)}))}]);const ap=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","swiperElementNodeName","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function sp(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)&&!e.__swiper__}function lp(e,n){const t=["__proto__","constructor","prototype"];Object.keys(n).filter((e=>t.indexOf(e)<0)).forEach((t=>{void 0===e[t]?e[t]=n[t]:sp(n[t])&&sp(e[t])&&Object.keys(n[t]).length>0?n[t].__swiper__?e[t]=n[t]:lp(e[t],n[t]):e[t]=n[t]}))}function cp(e){return void 0===e&&(e={}),e.navigation&&void 0===e.navigation.nextEl&&void 0===e.navigation.prevEl}function up(e){return void 0===e&&(e={}),e.pagination&&void 0===e.pagination.el}function dp(e){return void 0===e&&(e={}),e.scrollbar&&void 0===e.scrollbar.el}function pp(e){void 0===e&&(e="");const n=e.split(" ").map((e=>e.trim())).filter((e=>!!e)),t=[];return n.forEach((e=>{t.indexOf(e)<0&&t.push(e)})),t.join(" ")}function fp(e){return void 0===e&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function hp(){return hp=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},hp.apply(this,arguments)}function gp(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function mp(e){const n=[];return o.Children.toArray(e).forEach((e=>{gp(e)?n.push(e):e.props&&e.props.children&&mp(e.props.children).forEach((e=>n.push(e)))})),n}function xp(e){const n=[],t={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return o.Children.toArray(e).forEach((e=>{if(gp(e))n.push(e);else if(e.props&&e.props.slot&&t[e.props.slot])t[e.props.slot].push(e);else if(e.props&&e.props.children){const r=mp(e.props.children);r.length>0?r.forEach((e=>n.push(e))):t["container-end"].push(e)}else t["container-end"].push(e)})),{slides:n,slots:t}}function vp(e,n){return"undefined"==typeof window?(0,o.useEffect)(e,n):(0,o.useLayoutEffect)(e,n)}const yp=(0,o.createContext)(null),bp=(0,o.createContext)(null),wp=(0,o.forwardRef)((function(e,n){let{className:t,tag:r="div",wrapperTag:i="div",children:a,onSwiper:s,...l}=void 0===e?{}:e,c=!1;const[u,d]=(0,o.useState)("swiper"),[p,f]=(0,o.useState)(null),[h,g]=(0,o.useState)(!1),m=(0,o.useRef)(!1),x=(0,o.useRef)(null),v=(0,o.useRef)(null),y=(0,o.useRef)(null),b=(0,o.useRef)(null),w=(0,o.useRef)(null),k=(0,o.useRef)(null),S=(0,o.useRef)(null),j=(0,o.useRef)(null),{params:E,passedParams:C,rest:_,events:O}=function(e,n){void 0===e&&(e={}),void 0===n&&(n=!0);const t={on:{}},r={},i={};lp(t,np),t._emitClasses=!0,t.init=!1;const o={},a=ap.map((e=>e.replace(/_/,""))),s=Object.assign({},e);return Object.keys(s).forEach((s=>{void 0!==e[s]&&(a.indexOf(s)>=0?sp(e[s])?(t[s]={},i[s]={},lp(t[s],e[s]),lp(i[s],e[s])):(t[s]=e[s],i[s]=e[s]):0===s.search(/on[A-Z]/)&&"function"==typeof e[s]?n?r[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:t.on[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:o[s]=e[s])})),["navigation","pagination","scrollbar"].forEach((e=>{!0===t[e]&&(t[e]={}),!1===t[e]&&delete t[e]})),{params:t,passedParams:i,rest:o,events:r}}(l),{slides:F,slots:P}=xp(a),T=()=>{g(!h)};Object.assign(E.on,{_containerClasses(e,n){d(n)}});const z=()=>{Object.assign(E.on,O),c=!0;const e={...E};if(delete e.wrapperClass,v.current=new op(e),v.current.virtual&&v.current.params.virtual.enabled){v.current.virtual.slides=F;const e={cache:!1,slides:F,renderExternal:f,renderExternalUpdate:!1};lp(v.current.params.virtual,e),lp(v.current.originalParams.virtual,e)}};return x.current||z(),v.current&&v.current.on("_beforeBreakpoint",T),(0,o.useEffect)((()=>()=>{v.current&&v.current.off("_beforeBreakpoint",T)})),(0,o.useEffect)((()=>{!m.current&&v.current&&(v.current.emitSlidesClasses(),m.current=!0)})),vp((()=>{if(n&&(n.current=x.current),x.current)return v.current.destroyed&&z(),function(e,n){let{el:t,nextEl:r,prevEl:i,paginationEl:o,scrollbarEl:a,swiper:s}=e;cp(n)&&r&&i&&(s.params.navigation.nextEl=r,s.originalParams.navigation.nextEl=r,s.params.navigation.prevEl=i,s.originalParams.navigation.prevEl=i),up(n)&&o&&(s.params.pagination.el=o,s.originalParams.pagination.el=o),dp(n)&&a&&(s.params.scrollbar.el=a,s.originalParams.scrollbar.el=a),s.init(t)}({el:x.current,nextEl:w.current,prevEl:k.current,paginationEl:S.current,scrollbarEl:j.current,swiper:v.current},E),s&&!v.current.destroyed&&s(v.current),()=>{v.current&&!v.current.destroyed&&v.current.destroy(!0,!1)}}),[]),vp((()=>{!c&&O&&v.current&&Object.keys(O).forEach((e=>{v.current.on(e,O[e])}));const e=function(e,n,t,r,i){const o=[];if(!n)return o;const a=e=>{o.indexOf(e)<0&&o.push(e)};if(t&&r){const e=r.map(i),n=t.map(i);e.join("")!==n.join("")&&a("children"),r.length!==t.length&&a("children")}return ap.filter((e=>"_"===e[0])).map((e=>e.replace(/_/,""))).forEach((t=>{if(t in e&&t in n)if(sp(e[t])&&sp(n[t])){const r=Object.keys(e[t]),i=Object.keys(n[t]);r.length!==i.length?a(t):(r.forEach((r=>{e[t][r]!==n[t][r]&&a(t)})),i.forEach((r=>{e[t][r]!==n[t][r]&&a(t)})))}else e[t]!==n[t]&&a(t)})),o}(C,y.current,F,b.current,(e=>e.key));return y.current=C,b.current=F,e.length&&v.current&&!v.current.destroyed&&function(e){let{swiper:n,slides:t,passedParams:r,changedParams:i,nextEl:o,prevEl:a,scrollbarEl:s,paginationEl:l}=e;const c=i.filter((e=>"children"!==e&&"direction"!==e&&"wrapperClass"!==e)),{params:u,pagination:d,navigation:p,scrollbar:f,virtual:h,thumbs:g}=n;let m,x,v,y,b,w,k,S;i.includes("thumbs")&&r.thumbs&&r.thumbs.swiper&&u.thumbs&&!u.thumbs.swiper&&(m=!0),i.includes("controller")&&r.controller&&r.controller.control&&u.controller&&!u.controller.control&&(x=!0),i.includes("pagination")&&r.pagination&&(r.pagination.el||l)&&(u.pagination||!1===u.pagination)&&d&&!d.el&&(v=!0),i.includes("scrollbar")&&r.scrollbar&&(r.scrollbar.el||s)&&(u.scrollbar||!1===u.scrollbar)&&f&&!f.el&&(y=!0),i.includes("navigation")&&r.navigation&&(r.navigation.prevEl||a)&&(r.navigation.nextEl||o)&&(u.navigation||!1===u.navigation)&&p&&!p.prevEl&&!p.nextEl&&(b=!0);const j=e=>{n[e]&&(n[e].destroy(),"navigation"===e?(n.isElement&&(n[e].prevEl.remove(),n[e].nextEl.remove()),u[e].prevEl=void 0,u[e].nextEl=void 0,n[e].prevEl=void 0,n[e].nextEl=void 0):(n.isElement&&n[e].el.remove(),u[e].el=void 0,n[e].el=void 0))};i.includes("loop")&&n.isElement&&(u.loop&&!r.loop?w=!0:!u.loop&&r.loop?k=!0:S=!0),c.forEach((e=>{if(sp(u[e])&&sp(r[e]))Object.assign(u[e],r[e]),"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e||!("enabled"in r[e])||r[e].enabled||j(e);else{const n=r[e];!0!==n&&!1!==n||"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e?u[e]=r[e]:!1===n&&j(e)}})),c.includes("controller")&&!x&&n.controller&&n.controller.control&&u.controller&&u.controller.control&&(n.controller.control=u.controller.control),i.includes("children")&&t&&h&&u.virtual.enabled?(h.slides=t,h.update(!0)):i.includes("virtual")&&h&&u.virtual.enabled&&(t&&(h.slides=t),h.update(!0)),i.includes("children")&&t&&u.loop&&(S=!0),m&&g.init()&&g.update(!0),x&&(n.controller.control=u.controller.control),v&&(!n.isElement||l&&"string"!=typeof l||(l=document.createElement("div"),l.classList.add("swiper-pagination"),l.part.add("pagination"),n.el.appendChild(l)),l&&(u.pagination.el=l),d.init(),d.render(),d.update()),y&&(!n.isElement||s&&"string"!=typeof s||(s=document.createElement("div"),s.classList.add("swiper-scrollbar"),s.part.add("scrollbar"),n.el.appendChild(s)),s&&(u.scrollbar.el=s),f.init(),f.updateSize(),f.setTranslate()),b&&(n.isElement&&(o&&"string"!=typeof o||(o=document.createElement("div"),o.classList.add("swiper-button-next"),o.innerHTML=n.hostEl.constructor.nextButtonSvg,o.part.add("button-next"),n.el.appendChild(o)),a&&"string"!=typeof a||(a=document.createElement("div"),a.classList.add("swiper-button-prev"),a.innerHTML=n.hostEl.constructor.prevButtonSvg,a.part.add("button-prev"),n.el.appendChild(a))),o&&(u.navigation.nextEl=o),a&&(u.navigation.prevEl=a),p.init(),p.update()),i.includes("allowSlideNext")&&(n.allowSlideNext=r.allowSlideNext),i.includes("allowSlidePrev")&&(n.allowSlidePrev=r.allowSlidePrev),i.includes("direction")&&n.changeDirection(r.direction,!1),(w||S)&&n.loopDestroy(),(k||S)&&n.loopCreate(),n.update()}({swiper:v.current,slides:F,passedParams:C,changedParams:e,nextEl:w.current,prevEl:k.current,scrollbarEl:j.current,paginationEl:S.current}),()=>{O&&v.current&&Object.keys(O).forEach((e=>{v.current.off(e,O[e])}))}})),vp((()=>{var e;!(e=v.current)||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())}),[p]),o.createElement(r,hp({ref:x,className:pp(`${u}${t?` ${t}`:""}`)},_),o.createElement(bp.Provider,{value:v.current},P["container-start"],o.createElement(i,{className:fp(E.wrapperClass)},P["wrapper-start"],E.virtual?function(e,n,t){if(!t)return null;const r=e=>{let t=e;return e<0?t=n.length+e:t>=n.length&&(t-=n.length),t},i=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${t.offset}px`}:{top:`${t.offset}px`},{from:a,to:s}=t,l=e.params.loop?-n.length:0,c=e.params.loop?2*n.length:n.length,u=[];for(let e=l;e<c;e+=1)e>=a&&e<=s&&u.push(n[r(e)]);return u.map(((n,t)=>o.cloneElement(n,{swiper:e,style:i,key:n.props.virtualIndex||n.key||`slide-${t}`})))}(v.current,F,p):F.map(((e,n)=>o.cloneElement(e,{swiper:v.current,swiperSlideIndex:n}))),P["wrapper-end"]),cp(E)&&o.createElement(o.Fragment,null,o.createElement("div",{ref:k,className:"swiper-button-prev"}),o.createElement("div",{ref:w,className:"swiper-button-next"})),dp(E)&&o.createElement("div",{ref:j,className:"swiper-scrollbar"}),up(E)&&o.createElement("div",{ref:S,className:"swiper-pagination"}),P["container-end"]))}));wp.displayName="Swiper";const kp=(0,o.forwardRef)((function(e,n){let{tag:t="div",children:r,className:i="",swiper:a,zoom:s,lazy:l,virtualIndex:c,swiperSlideIndex:u,...d}=void 0===e?{}:e;const p=(0,o.useRef)(null),[f,h]=(0,o.useState)("swiper-slide"),[g,m]=(0,o.useState)(!1);function x(e,n,t){n===p.current&&h(t)}vp((()=>{if(void 0!==u&&(p.current.swiperSlideIndex=u),n&&(n.current=p.current),p.current&&a){if(!a.destroyed)return a.on("_slideClass",x),()=>{a&&a.off("_slideClass",x)};"swiper-slide"!==f&&h("swiper-slide")}})),vp((()=>{a&&p.current&&!a.destroyed&&h(a.getSlideClasses(p.current))}),[a]);const v={isActive:f.indexOf("swiper-slide-active")>=0,isVisible:f.indexOf("swiper-slide-visible")>=0,isPrev:f.indexOf("swiper-slide-prev")>=0,isNext:f.indexOf("swiper-slide-next")>=0},y=()=>"function"==typeof r?r(v):r;return o.createElement(t,hp({ref:p,className:pp(`${f}${i?` ${i}`:""}`),"data-swiper-slide-index":c,onLoad:()=>{m(!0)}},d),s&&o.createElement(yp.Provider,{value:v},o.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":"number"==typeof s?s:void 0},y(),l&&!g&&o.createElement("div",{className:"swiper-lazy-preloader"}))),!s&&o.createElement(yp.Provider,{value:v},y(),l&&!g&&o.createElement("div",{className:"swiper-lazy-preloader"})))}));kp.displayName="SwiperSlide";var Sp,jp,Ep,Cp,_p,Op,Fp,Pp,Tp,zp,Ap,Lp,Mp,Np,Rp,Dp,Bp,Ip,Vp,$p,Up,qp,Hp,Wp,Gp,Yp,Qp,Xp,Kp,Jp,Zp,ef,nf,tf,rf,of,af=function(e){return n=void 0,t=void 0,i=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(n){switch(n.label){case 0:return[4,fetch("/api/product/".concat(e))];case 1:return[2,n.sent()]}}))},new((r=void 0)||(r=Promise))((function(e,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof r?e:new r((function(n){n(e)}))}(n.value).then(a,s)}l((i=i.apply(n,t||[])).next())}));var n,t,r,i},sf=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},lf=ir.div(Sp||(Sp=sf(["\n    padding: 50px 0 60px 0;\n"],["\n    padding: 50px 0 60px 0;\n"]))),cf=ir.div(jp||(jp=sf(["\n    align-self: center;\n    display: flex;\n    flex-direction: column;\n\n    @media screen and (min-width: 900px) {\n        flex-direction: column-reverse;\n        align-self: auto;\n    }\n"],["\n    align-self: center;\n    display: flex;\n    flex-direction: column;\n\n    @media screen and (min-width: 900px) {\n        flex-direction: column-reverse;\n        align-self: auto;\n    }\n"]))),uf=ir.img(Ep||(Ep=sf(["\n    width: clamp(340px, 40vw, 690px);\n    aspect-ratio: 520 / 293;\n    border-radius: 25px;\n    border: 1px solid #00000040;\n    object-position: center;\n    object-fit: contain;\n    margin-bottom: 10px;\n    transition: .3s ease;\n"],["\n    width: clamp(340px, 40vw, 690px);\n    aspect-ratio: 520 / 293;\n    border-radius: 25px;\n    border: 1px solid #00000040;\n    object-position: center;\n    object-fit: contain;\n    margin-bottom: 10px;\n    transition: .3s ease;\n"]))),df=ir.div(Cp||(Cp=sf(["\n    width: clamp(340px, 40vw, 690px);\n    overflow: hidden;\n"],["\n    width: clamp(340px, 40vw, 690px);\n    overflow: hidden;\n"]))),pf=ir.div(_p||(_p=sf(["\n    overflow: hidden;\n    .swiper-slide {\n        width: auto !important;\n        margin-right: 20px;\n    }\n\n    .swiper {\n        margin: 0;\n    }\n"],["\n    overflow: hidden;\n    .swiper-slide {\n        width: auto !important;\n        margin-right: 20px;\n    }\n\n    .swiper {\n        margin: 0;\n    }\n"]))),ff=ir.img(Op||(Op=sf(["\n    width: clamp(160px, 12vw, 212px);\n    height: clamp(128px, 9.5vw, 169px);\n    object-position: center;\n    object-fit: contain;\n    border: 1px solid #00000040;\n    border-radius: 10px;\n    opacity: ",";\n    transition: .3s ease;\n"],["\n    width: clamp(160px, 12vw, 212px);\n    height: clamp(128px, 9.5vw, 169px);\n    object-position: center;\n    object-fit: contain;\n    border: 1px solid #00000040;\n    border-radius: 10px;\n    opacity: ",";\n    transition: .3s ease;\n"])),(function(e){return e.$current?1:.5})),hf=ir.h1(Fp||(Fp=sf(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    color: #202020;\n    margin: 10px 0;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    color: #202020;\n    margin: 10px 0;\n"]))),gf=ir.div(Pp||(Pp=sf(["\n    width: clamp(340px, 30vw, 548px);\n    padding: 30px 22px;\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: 0 10px 16px 0 #0000000D,\n    0 14px 29px 0 #0000000A,\n    0 37px 40px 0 #00000008,\n    0 84px 47px 0 #00000003;\n\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-bottom: 10px;\n    align-self: center;\n\n    @media screen and (min-width: 900px) {\n        order: 9;\n        align-self: auto;\n    }\n"],["\n    width: clamp(340px, 30vw, 548px);\n    padding: 30px 22px;\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: 0 10px 16px 0 #0000000D,\n    0 14px 29px 0 #0000000A,\n    0 37px 40px 0 #00000008,\n    0 84px 47px 0 #00000003;\n\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-bottom: 10px;\n    align-self: center;\n\n    @media screen and (min-width: 900px) {\n        order: 9;\n        align-self: auto;\n    }\n"]))),mf=ir.div(Tp||(Tp=sf(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 32px;\n    line-height: 39px;\n    color: #202020;\n    text-align: center;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 32px;\n    line-height: 39px;\n    color: #202020;\n    text-align: center;\n"]))),xf=ir.div(zp||(zp=sf(["\n    @media screen and (min-width: 900px) {\n        width: min(27vw, 406px);\n    }\n"],["\n    @media screen and (min-width: 900px) {\n        width: min(27vw, 406px);\n    }\n"]))),vf=ir.div(Ap||(Ap=sf(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    & > *:first-child {\n        font-family: var(--montserrat-regular);\n        font-size: clamp(14px, 1vw, 16px);\n        line-height: 16px;\n        font-weight: 600;\n        width: 37%;\n    }\n\n    & > *:last-child {\n        font-family: var(--montserrat-regular);\n        font-size: clamp(12px, 1vw, 16px);\n        line-height: 16px;\n        font-weight: 500;\n        text-align: right;\n    }\n\n    margin-bottom: 5px;\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    & > *:first-child {\n        font-family: var(--montserrat-regular);\n        font-size: clamp(14px, 1vw, 16px);\n        line-height: 16px;\n        font-weight: 600;\n        width: 37%;\n    }\n\n    & > *:last-child {\n        font-family: var(--montserrat-regular);\n        font-size: clamp(12px, 1vw, 16px);\n        line-height: 16px;\n        font-weight: 500;\n        text-align: right;\n    }\n\n    margin-bottom: 5px;\n"]))),yf=ir.div(Lp||(Lp=sf(["\n    display: flex;\n    flex-direction: column;\n    gap: clamp(10px, 2vw, 20px);\n\n    @media screen and (min-width: 900px) {\n        flex-direction: row;\n        align-items: start;\n    }\n"],["\n    display: flex;\n    flex-direction: column;\n    gap: clamp(10px, 2vw, 20px);\n\n    @media screen and (min-width: 900px) {\n        flex-direction: row;\n        align-items: start;\n    }\n"]))),bf=ir.div(Mp||(Mp=sf(["\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"],["\n    @media screen and (min-width: 900px) {\n        display: none;\n    }\n"]))),wf=ir.div(Np||(Np=sf(["\n    font-weight: 800;\n    font-family: var(--montserrat-extrabold);\n    font-size: 32px;\n    line-height: 39px;\n    color: #202020;\n    margin-bottom: 20px;\n    display: none;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n"],["\n    font-weight: 800;\n    font-family: var(--montserrat-extrabold);\n    font-size: 32px;\n    line-height: 39px;\n    color: #202020;\n    margin-bottom: 20px;\n    display: none;\n\n    @media screen and (min-width: 900px) {\n        display: block;\n    }\n"]))),kf=ir.div(Rp||(Rp=sf(["\n    max-width: 207px;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    & > * > * {\n        font-size: 16px;\n        line-height: 20px;\n        padding: 13px 35px;\n    }\n\n    & > button {\n        padding: 0;\n    }\n"],["\n    max-width: 207px;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    & > * > * {\n        font-size: 16px;\n        line-height: 20px;\n        padding: 13px 35px;\n    }\n\n    & > button {\n        padding: 0;\n    }\n"]))),Sf=ir.div(Dp||(Dp=sf(["\n    display: ",";\n"],["\n    display: ",";\n"])),(function(e){return e.$open?"block":"none"})),jf=ir.div(Bp||(Bp=sf(["\n    transition: all 0.3s ease;\n\n"],["\n    transition: all 0.3s ease;\n\n"]))),Ef=ir.div(Ip||(Ip=sf(["\n    display: ",";\n    margin: 10px auto 0 auto;\n    justify-content: center;\n"],["\n    display: ",";\n    margin: 10px auto 0 auto;\n    justify-content: center;\n"])),(function(e){return e.$open?"none":"flex"})),Cf=ir.div(Vp||(Vp=sf(["\n    cursor: pointer;\n    font-family: var(--montserrat-regular);\n    color: #0047FF;\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 20px;\n    text-align: center;\n"],["\n    cursor: pointer;\n    font-family: var(--montserrat-regular);\n    color: #0047FF;\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 20px;\n    text-align: center;\n"]))),_f=ir.button($p||($p=sf(["\n    border: none;\n    border-radius: 23px;\n\n    & > * {\n        width: 100%;\n        height: 100%;\n    }\n"],["\n    border: none;\n    border-radius: 23px;\n\n    & > * {\n        width: 100%;\n        height: 100%;\n    }\n"]))),Of=ir.button(Up||(Up=sf(["\n    border: none;\n    border-radius: 23px;\n\n    & > * {\n        width: 100%;\n        height: 100%;\n    }\n"],["\n    border: none;\n    border-radius: 23px;\n\n    & > * {\n        width: 100%;\n        height: 100%;\n    }\n"]))),Ff=function(){var e=J().id,n=X(),r=(0,o.useState)(null),i=r[0],a=r[1];(0,o.useEffect)((function(){var t,r,i,o;t=void 0,r=void 0,o=function(){var t,r;return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(i){switch(i.label){case 0:return[4,af(+e)];case 1:return 404===(t=i.sent()).status&&n("/not-found"),[4,t.json()];case 2:return(r=i.sent()).photos.length<1&&r.photos.push({product_id:+e,source:Oa(r),id:0}),a(r),[2]}}))},new((i=void 0)||(i=Promise))((function(e,n){function a(e){try{l(o.next(e))}catch(e){n(e)}}function s(e){try{l(o.throw(e))}catch(e){n(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof i?e:new i((function(n){n(e)}))}(n.value).then(a,s)}l((o=o.apply(t,r||[])).next())}))}),[]);var s=(0,o.useState)(!1),l=s[0],c=s[1],u=(0,o.useState)(0),d=u[0],p=u[1],f=localStorage.getItem("cart"),h=f?JSON.parse(f):[],g=(0,o.useState)(h),m=g[0],x=g[1];return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(lf,{children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(wf,{children:null==i?void 0:i.model}),(0,t.jsxs)(yf,{children:[(0,t.jsx)(cf,{children:(0,t.jsxs)(df,{children:[(0,t.jsx)(uf,{src:i?0===i.photos[0].id?i.photos[0].source:"/api/public/"+i.photos[d].source:""}),(0,t.jsx)(pf,{children:(0,t.jsx)(wp,{slidesPerView:"auto",children:null==i?void 0:i.photos.map((function(e,n){return(0,t.jsx)(kp,{children:(0,t.jsx)(ff,{onClick:function(){return p(n)},$current:d===n,src:0===e.id?e.source:"/api/public/"+e.source},e.id)})}))})})]})}),(0,t.jsx)(bf,{children:(0,t.jsx)(hf,{children:null==i?void 0:i.model})}),(0,t.jsxs)(gf,{children:[(0,t.jsxs)(mf,{children:[null==i?void 0:i.price,"₽"]}),(0,t.jsxs)(kf,{children:[(0,t.jsx)(_f,{onClick:function(){var n,t=+e;n=m.includes(t)?m.filter((function(e){return e!==t})):m.concat(t),localStorage.setItem("cart",JSON.stringify(n)),x(n)},children:(0,t.jsx)(xr,{invert:!0,text:m.includes(+e)?"В корзине":"В корзину"})}),(0,t.jsx)(Of,{onClick:function(){m.includes(+e)||localStorage.setItem("cart",JSON.stringify(m.concat(+e))),n("/cart")},children:(0,t.jsx)(xr,{text:"Оформить заказ"})})]})]}),(0,t.jsxs)(xf,{children:[(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Модель"}),(0,t.jsx)("div",{children:null==i?void 0:i.model})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Емкость батареи"}),(0,t.jsx)("div",{children:null==i?void 0:i.capacity})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Номинальная мощность"}),(0,t.jsxs)("div",{children:[null==i?void 0:i.rated_power," Вт"]})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Пиковая мощность"}),(0,t.jsxs)("div",{children:[null==i?void 0:i.peak_power," Вт"]})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Тип батареи"}),(0,t.jsx)("div",{children:null==i?void 0:i.battery_type})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Адаптер"}),(0,t.jsx)("div",{children:null==i?void 0:i.adapter})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Вход для зарядки авто"}),(0,t.jsx)("div",{children:null==i?void 0:i.car_charge_input})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Солнечная зарядка"}),(0,t.jsx)("div",{children:null==i?void 0:i.sun_charge})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Рабочая температура"}),(0,t.jsx)("div",{children:null==i?void 0:i.work_temp})]}),(0,t.jsxs)(jf,{children:[(0,t.jsxs)(Sf,{$open:l,children:[(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Выход переменного тока"}),(0,t.jsx)("div",{children:null==i?void 0:i.ac_output})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"USB-выход"}),(0,t.jsx)("div",{children:null==i?void 0:i.usb_output})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Выход"}),(0,t.jsx)("div",{children:null==i?void 0:i.output})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Выход постоянного тока"}),(0,t.jsx)("div",{children:null==i?void 0:i.dc_output})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Выход type-c"}),(0,t.jsx)("div",{children:null==i?void 0:i.type_c_output})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Выходной сигнал"}),(0,t.jsx)("div",{children:null==i?void 0:i.output_signal})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Вес брутто"}),(0,t.jsx)("div",{children:null==i?void 0:i.gross_weight})]}),(0,t.jsxs)(vf,{children:[(0,t.jsx)("div",{children:"Размер"}),(0,t.jsxs)("div",{children:[null==i?void 0:i.height,"х",null==i?void 0:i.width,"х",null==i?void 0:i.length]})]})]}),(0,t.jsx)(Ef,{$open:l,children:(0,t.jsx)(Cf,{onClick:function(){return c(!0)},children:"Смотреть далее"})})]})]})]})]})})})},Pf=(0,o.createContext)(null),Tf=function(){var e=rs().formState;return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(ul,{type:"text",label:"Область/Район",placeholder:"Введите облать/район",registerOpts:{name:"region",options:{required:!0}},errored:Boolean(e.errors.region)}),(0,t.jsx)(ul,{type:"text",label:"Город",placeholder:"Введите город",registerOpts:{name:"city",options:{required:!0}},errored:Boolean(e.errors.city)}),(0,t.jsx)(ul,{type:"text",label:"Адрес",placeholder:"Введите адрес",registerOpts:{name:"address",options:{required:!0}},errored:Boolean(e.errors.address)}),(0,t.jsx)(ul,{type:"text",label:"Квартира",placeholder:"Введите свою квартиру",registerOpts:{name:"apartment",options:{required:!0}},errored:Boolean(e.errors.apartment)})]})},zf=function(){var e=rs().formState;return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(ul,{type:"text",label:"Ваше имя",placeholder:"Введите имя",registerOpts:{name:"name",options:{required:!0}},errored:Boolean(e.errors.name)}),(0,t.jsx)(ul,{type:"text",label:"Ваше фамилия",placeholder:"Введите фамилию",registerOpts:{name:"surname",options:{required:!0}},errored:Boolean(e.errors.surname)}),(0,t.jsx)(ul,{type:"text",label:"Ваше отчество",placeholder:"Введите отчество",registerOpts:{name:"patronymic",options:{required:!0}},errored:Boolean(e.errors.patronymic)}),(0,t.jsx)(ul,{type:"email",label:"Ваша электронная почта",placeholder:"Введите e-mail",registerOpts:{name:"email",options:{required:!0}},errored:Boolean(e.errors.email)}),(0,t.jsx)(Cl,{type:"text",label:"Ваш номер телефона",placeholder:"Введите номер телефона",registerOpts:{name:"phone",options:{required:!0,pattern:/^\+7\(\d{3}\)-\d{3}-\d{2}-\d{2}$/}},errored:Boolean(e.errors.phone)})]})},Af=function(){var e=rs().formState;return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(ul,{type:"text",label:"Название организации",placeholder:"Введите название организации",registerOpts:{name:"organization",options:{required:!0}},errored:Boolean(e.errors.organization)}),(0,t.jsx)(ul,{type:"text",label:"Ваш ИИН",placeholder:"Введите ИИН",registerOpts:{name:"iin",options:{required:!0}},errored:Boolean(e.errors.iin)}),(0,t.jsx)(ul,{type:"text",label:"Ваш КПП",placeholder:"Введите КПП",registerOpts:{name:"kpp",options:{required:!0}},errored:Boolean(e.errors.kpp)}),(0,t.jsx)(ul,{type:"email",label:"Ваша электронная почта",placeholder:"Введите e-mail",registerOpts:{name:"email",options:{required:!0}},errored:Boolean(e.errors.email)}),(0,t.jsx)(Cl,{type:"text",label:"Ваш номер телефона",placeholder:"Введите номер телефона",registerOpts:{name:"phone",options:{required:!0,pattern:/^\+7\(\d{3}\)-\d{3}-\d{2}-\d{2}$/}},errored:Boolean(e.errors.phone)})]})},Lf=function(){var e=rs().formState;return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(ul,{type:"text",label:"Область/Район",placeholder:"Введите облать/район",registerOpts:{name:"region",options:{required:!0}},errored:Boolean(e.errors.name)}),(0,t.jsx)(ul,{type:"text",label:"Город",placeholder:"Введите город",registerOpts:{name:"city",options:{required:!0}},errored:Boolean(e.errors.name)}),(0,t.jsx)(ul,{type:"text",label:"Адрес",placeholder:"Введите адрес",registerOpts:{name:"address",options:{required:!0}},errored:Boolean(e.errors.name)})]})},Mf=function(){var e=(0,o.useContext)(Pf);return"juridical"===e.type?e.stage<2?(0,t.jsx)(Af,{}):(0,t.jsx)(Lf,{}):e.stage<2?(0,t.jsx)(zf,{}):(0,t.jsx)(Tf,{})},Nf=function(){return Nf=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},Nf.apply(this,arguments)},Rf=function(e,n){return t=void 0,r=void 0,o=function(){var t,r,i;return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(o){switch(o.label){case 0:return(t=null!=n?n:{}).headers=Nf(Nf({},t.headers),{Authorization:"Bearer ".concat(localStorage.getItem("access_token"))}),[4,fetch(e,t)];case 1:return r=o.sent(),(i=r.headers.get("x-new-access-token"))&&(console.group("new token has been set!!!"),console.log((new Date).toLocaleDateString("ru-RU")),console.log(typeof i),console.log(Boolean(i)),console.log(i),console.log(r.headers),console.groupEnd(),localStorage.setItem("access_token",i)),[2,r]}}))},new((i=void 0)||(i=Promise))((function(e,n){function a(e){try{l(o.next(e))}catch(e){n(e)}}function s(e){try{l(o.throw(e))}catch(e){n(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof i?e:new i((function(n){n(e)}))}(n.value).then(a,s)}l((o=o.apply(t,r||[])).next())}));var t,r,i,o},Df=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Bf=ir.div(qp||(qp=Df(["\n    width: 210px;\n    aspect-ratio: 1;\n    background-color: #0047FF;\n    border-radius: 50%;\n    position: relative;\n    animation: growMain 1s linear forwards;\n\n    & svg {\n        position: absolute;\n        width: 121px;\n        height: 91px;\n        top: calc(50% - 45px);\n        left: calc(50% - 60px);\n        z-index: 2;\n        animation: growMask 1s linear forwards;\n\n        path {\n            fill: #FFFFFF;\n        }\n    }\n\n    &::before {\n        content: '';\n        position: absolute;\n        display: block;\n        width: 274px;\n        aspect-ratio: 1;\n        background-color: #0047FF80;\n        border-radius: 50%;\n        left: calc((274px - 210px) / -2);\n        top: calc((274px - 210px) / -2);\n        z-index: 1;\n        animation: growBefore 1.5s ease-in forwards;\n    }\n\n    &::after {\n        position: absolute;\n        content: '';\n        display: block;\n        width: 338px;\n        aspect-ratio: 1;\n        background-color: #0047FF40;\n        border-radius: 50%;\n        left: calc((338px - 210px) / -2);\n        top: calc((338px - 210px) / -2);\n        z-index: 1;\n        animation: growAfter 1.7s ease-in forwards;\n    }\n\n    @keyframes growBefore {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 274px;\n            left: calc((274px - 210px) / -2);\n            top: calc((274px - 210px) / -2);\n        }\n    }\n\n    @keyframes growAfter {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 338px;\n            left: calc((338px - 210px) / -2);\n            top: calc((338px - 210px) / -2);\n        }\n    }\n\n    @keyframes growMain {\n        0% {\n            width: 0;\n        }\n        100% {\n            width: 210px;\n        }\n    }\n    \n    @keyframes growMask {\n        0% {\n            width: 0;\n            height: 0;\n            top: 50%;\n            left: 50%;\n        }\n        100% {\n            width: 121px;\n            height: 91px;\n            top: calc(50% - 45px);\n            left: calc(50% - 60px);\n        }\n    }\n"],["\n    width: 210px;\n    aspect-ratio: 1;\n    background-color: #0047FF;\n    border-radius: 50%;\n    position: relative;\n    animation: growMain 1s linear forwards;\n\n    & svg {\n        position: absolute;\n        width: 121px;\n        height: 91px;\n        top: calc(50% - 45px);\n        left: calc(50% - 60px);\n        z-index: 2;\n        animation: growMask 1s linear forwards;\n\n        path {\n            fill: #FFFFFF;\n        }\n    }\n\n    &::before {\n        content: '';\n        position: absolute;\n        display: block;\n        width: 274px;\n        aspect-ratio: 1;\n        background-color: #0047FF80;\n        border-radius: 50%;\n        left: calc((274px - 210px) / -2);\n        top: calc((274px - 210px) / -2);\n        z-index: 1;\n        animation: growBefore 1.5s ease-in forwards;\n    }\n\n    &::after {\n        position: absolute;\n        content: '';\n        display: block;\n        width: 338px;\n        aspect-ratio: 1;\n        background-color: #0047FF40;\n        border-radius: 50%;\n        left: calc((338px - 210px) / -2);\n        top: calc((338px - 210px) / -2);\n        z-index: 1;\n        animation: growAfter 1.7s ease-in forwards;\n    }\n\n    @keyframes growBefore {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 274px;\n            left: calc((274px - 210px) / -2);\n            top: calc((274px - 210px) / -2);\n        }\n    }\n\n    @keyframes growAfter {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 338px;\n            left: calc((338px - 210px) / -2);\n            top: calc((338px - 210px) / -2);\n        }\n    }\n\n    @keyframes growMain {\n        0% {\n            width: 0;\n        }\n        100% {\n            width: 210px;\n        }\n    }\n    \n    @keyframes growMask {\n        0% {\n            width: 0;\n            height: 0;\n            top: 50%;\n            left: 50%;\n        }\n        100% {\n            width: 121px;\n            height: 91px;\n            top: calc(50% - 45px);\n            left: calc(50% - 60px);\n        }\n    }\n"]))),If=ir.div(Hp||(Hp=Df(["\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    min-height: calc(100vh - 203px);\n"],["\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    min-height: calc(100vh - 203px);\n"]))),Vf=ir.h2(Wp||(Wp=Df(["\n    font-family: var(--montserrat-bold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 5vw, 61px);\n    text-align: center;\n    margin-top: 70px;\n    color: #202020;\n    animation: growFont 1.3s ease-in forwards;\n    \n    @keyframes growFont {\n        0% {\n            opacity: 0;\n            font-size: 0;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(24px, 4vw, 50px);\n        }\n    }\n"],["\n    font-family: var(--montserrat-bold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 5vw, 61px);\n    text-align: center;\n    margin-top: 70px;\n    color: #202020;\n    animation: growFont 1.3s ease-in forwards;\n    \n    @keyframes growFont {\n        0% {\n            opacity: 0;\n            font-size: 0;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(24px, 4vw, 50px);\n        }\n    }\n"]))),$f=ir.div(Gp||(Gp=Df(["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.3vw, 20px);\n    font-weight: 600;\n    line-height: clamp(14px, 1.8vw, 24px);\n    text-align: center;   \n    margin-top: 20px;\n    color: #202020;\n    animation: growText 1.3s ease-in forwards;\n    \n    @keyframes growText {\n        0% {\n            opacity: 0;\n            font-size: 0;\n            margin-top: -40px;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(12px, 1.3vw, 20px);\n            margin-top: 20px;\n        }\n    }\n"],["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.3vw, 20px);\n    font-weight: 600;\n    line-height: clamp(14px, 1.8vw, 24px);\n    text-align: center;   \n    margin-top: 20px;\n    color: #202020;\n    animation: growText 1.3s ease-in forwards;\n    \n    @keyframes growText {\n        0% {\n            opacity: 0;\n            font-size: 0;\n            margin-top: -40px;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(12px, 1.3vw, 20px);\n            margin-top: 20px;\n        }\n    }\n"]))),Uf=function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(If,{children:[(0,t.jsx)(Bf,{children:(0,t.jsx)(hu,{})}),(0,t.jsx)(Vf,{children:"Заказ оформлен"}),(0,t.jsx)($f,{children:"На вашу почту был отправлен счет на оплату"})]})})},qf=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Hf=ir.div(Yp||(Yp=qf(["\n    width: 210px;\n    aspect-ratio: 1;\n    background-color: #0047FF;\n    border-radius: 50%;\n    position: relative;\n    animation: growMain 1s linear forwards;\n\n    & svg {\n        position: absolute;\n        width: 121px;\n        height: 91px;\n        top: calc(50% - 45px);\n        left: calc(50% - 60px);\n        z-index: 2;\n        animation: growMask 1s linear forwards;\n\n        path {\n            fill: #FFFFFF;\n        }\n    }\n\n    &::before {\n        content: '';\n        position: absolute;\n        display: block;\n        width: 274px;\n        aspect-ratio: 1;\n        background-color: #0047FF80;\n        border-radius: 50%;\n        left: calc((274px - 210px) / -2);\n        top: calc((274px - 210px) / -2);\n        z-index: 1;\n        animation: growBefore 1.5s ease-in forwards;\n    }\n\n    &::after {\n        position: absolute;\n        content: '';\n        display: block;\n        width: 338px;\n        aspect-ratio: 1;\n        background-color: #0047FF40;\n        border-radius: 50%;\n        left: calc((338px - 210px) / -2);\n        top: calc((338px - 210px) / -2);\n        z-index: 1;\n        animation: growAfter 1.7s ease-in forwards;\n    }\n\n    @keyframes growBefore {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 274px;\n            left: calc((274px - 210px) / -2);\n            top: calc((274px - 210px) / -2);\n        }\n    }\n\n    @keyframes growAfter {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 338px;\n            left: calc((338px - 210px) / -2);\n            top: calc((338px - 210px) / -2);\n        }\n    }\n\n    @keyframes growMain {\n        0% {\n            width: 0;\n        }\n        100% {\n            width: 210px;\n        }\n    }\n    \n    @keyframes growMask {\n        0% {\n            width: 0;\n            height: 0;\n            top: 50%;\n            left: 50%;\n        }\n        100% {\n            width: 121px;\n            height: 91px;\n            top: calc(50% - 45px);\n            left: calc(50% - 60px);\n        }\n    }\n"],["\n    width: 210px;\n    aspect-ratio: 1;\n    background-color: #0047FF;\n    border-radius: 50%;\n    position: relative;\n    animation: growMain 1s linear forwards;\n\n    & svg {\n        position: absolute;\n        width: 121px;\n        height: 91px;\n        top: calc(50% - 45px);\n        left: calc(50% - 60px);\n        z-index: 2;\n        animation: growMask 1s linear forwards;\n\n        path {\n            fill: #FFFFFF;\n        }\n    }\n\n    &::before {\n        content: '';\n        position: absolute;\n        display: block;\n        width: 274px;\n        aspect-ratio: 1;\n        background-color: #0047FF80;\n        border-radius: 50%;\n        left: calc((274px - 210px) / -2);\n        top: calc((274px - 210px) / -2);\n        z-index: 1;\n        animation: growBefore 1.5s ease-in forwards;\n    }\n\n    &::after {\n        position: absolute;\n        content: '';\n        display: block;\n        width: 338px;\n        aspect-ratio: 1;\n        background-color: #0047FF40;\n        border-radius: 50%;\n        left: calc((338px - 210px) / -2);\n        top: calc((338px - 210px) / -2);\n        z-index: 1;\n        animation: growAfter 1.7s ease-in forwards;\n    }\n\n    @keyframes growBefore {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 274px;\n            left: calc((274px - 210px) / -2);\n            top: calc((274px - 210px) / -2);\n        }\n    }\n\n    @keyframes growAfter {\n        0% {\n            left: calc(50% - 4px);\n            top: calc(50% - 4px);\n            width: 0;\n        }\n        100% {\n            width: 338px;\n            left: calc((338px - 210px) / -2);\n            top: calc((338px - 210px) / -2);\n        }\n    }\n\n    @keyframes growMain {\n        0% {\n            width: 0;\n        }\n        100% {\n            width: 210px;\n        }\n    }\n    \n    @keyframes growMask {\n        0% {\n            width: 0;\n            height: 0;\n            top: 50%;\n            left: 50%;\n        }\n        100% {\n            width: 121px;\n            height: 91px;\n            top: calc(50% - 45px);\n            left: calc(50% - 60px);\n        }\n    }\n"]))),Wf=ir.div(Qp||(Qp=qf(["\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    min-height: calc(100vh - 203px);\n"],["\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    min-height: calc(100vh - 203px);\n"]))),Gf=ir.h2(Xp||(Xp=qf(["\n    font-family: var(--montserrat-bold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 5vw, 61px);\n    text-align: center;\n    margin-top: 70px;\n    color: #202020;\n    animation: growFont 1.3s ease-in forwards;\n\n    @keyframes growFont {\n        0% {\n            opacity: 0;\n            font-size: 0;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(24px, 4vw, 50px);\n        }\n    }\n"],["\n    font-family: var(--montserrat-bold);\n    font-size: clamp(24px, 4vw, 50px);\n    font-weight: 800;\n    line-height: clamp(29px, 5vw, 61px);\n    text-align: center;\n    margin-top: 70px;\n    color: #202020;\n    animation: growFont 1.3s ease-in forwards;\n\n    @keyframes growFont {\n        0% {\n            opacity: 0;\n            font-size: 0;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(24px, 4vw, 50px);\n        }\n    }\n"]))),Yf=ir.div(Kp||(Kp=qf(["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.3vw, 20px);\n    font-weight: 600;\n    line-height: clamp(14px, 1.8vw, 24px);\n    text-align: center;\n    margin-top: 20px;\n    color: #202020;\n    animation: growText 1.3s ease-in forwards;\n\n    @keyframes growText {\n        0% {\n            opacity: 0;\n            font-size: 0;\n            margin-top: -40px;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(12px, 1.3vw, 20px);\n            margin-top: 20px;\n        }\n    }\n"],["\n    font-family: var(--montserrat-regular);\n    font-size: clamp(12px, 1.3vw, 20px);\n    font-weight: 600;\n    line-height: clamp(14px, 1.8vw, 24px);\n    text-align: center;\n    margin-top: 20px;\n    color: #202020;\n    animation: growText 1.3s ease-in forwards;\n\n    @keyframes growText {\n        0% {\n            opacity: 0;\n            font-size: 0;\n            margin-top: -40px;\n        }\n        100% {\n            opacity: 1;\n            font-size: clamp(12px, 1.3vw, 20px);\n            margin-top: 20px;\n        }\n    }\n"]))),Qf=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(Wf,{children:[(0,t.jsx)(Hf,{children:(0,t.jsx)(Nr,{})}),(0,t.jsx)(Gf,{children:"Произошла ошибка при оформлении заказа"}),(0,t.jsx)(Yf,{children:e.text})]})})},Xf=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Kf=function(){return Kf=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},Kf.apply(this,arguments)},Jf=ir.h1(Jp||(Jp=Xf(["\n    font-family: var(--montserrat-extrabold);\n    font-size: 24px;\n    font-weight: 800;\n    line-height: 29px;\n    text-align: center;\n    margin-bottom: 30px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-size: 24px;\n    font-weight: 800;\n    line-height: 29px;\n    text-align: center;\n    margin-bottom: 30px;\n"]))),Zf=ir.div(Zp||(Zp=Xf(["\n    padding: 50px 0;\n"],["\n    padding: 50px 0;\n"]))),eh=ir.form(ef||(ef=Xf(["\n    padding: clamp(20px, 3.5vw, 37px) clamp(20px, 4vw, 45px);\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    border-radius: 25px;\n    max-width: 520px;\n    margin: 0 auto;\n    \n    & > * {\n        margin-bottom: 10px;\n    }\n    \n    & input {\n        border: 1px solid #0000001A;\n        box-shadow: \n                1px 9px 20px 0 #00000008,\n                4px 36px 37px 0 #00000005,\n                10px 82px 50px 0 #00000003;\n        border-radius: 5px;\n    }\n    \n    & label {\n        color: #202020;\n    }\n"],["\n    padding: clamp(20px, 3.5vw, 37px) clamp(20px, 4vw, 45px);\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    border-radius: 25px;\n    max-width: 520px;\n    margin: 0 auto;\n    \n    & > * {\n        margin-bottom: 10px;\n    }\n    \n    & input {\n        border: 1px solid #0000001A;\n        box-shadow: \n                1px 9px 20px 0 #00000008,\n                4px 36px 37px 0 #00000005,\n                10px 82px 50px 0 #00000003;\n        border-radius: 5px;\n    }\n    \n    & label {\n        color: #202020;\n    }\n"]))),nh=ir.button(nf||(nf=Xf(["\n    padding: 0;\n    border-radius: 23px;\n    border: none;\n    margin: 0 auto;\n"],["\n    padding: 0;\n    border-radius: 23px;\n    border: none;\n    margin: 0 auto;\n"]))),th=ir.div(tf||(tf=Xf(["\n    display: flex;\n    align-items: center;\n    margin-top: 20px;\n    gap: 10px;\n    \n    & > * {\n        width: 50%;\n        \n        > * {\n            width: 100%;\n        }\n    }\n    \n"],["\n    display: flex;\n    align-items: center;\n    margin-top: 20px;\n    gap: 10px;\n    \n    & > * {\n        width: 50%;\n        \n        > * {\n            width: 100%;\n        }\n    }\n    \n"]))),rh=function(){var e=Ks(),n=(0,o.useState)("none"),r=n[0],i=n[1],a=(0,o.useState)(""),s=a[0],l=a[1],c=(0,o.useState)({stage:1,type:"juridical"}),u=c[0],d=c[1];return"success"===r?(0,t.jsx)(Uf,{}):"failure"===r?(0,t.jsx)(Qf,{text:s}):(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Zf,{children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(Jf,{children:"Оформление заказа"}),(0,t.jsx)(is,Kf({},e,{children:(0,t.jsxs)(eh,{onSubmit:e.handleSubmit((function(e,n){return t=void 0,r=void 0,a=function(){var t,r,o;return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(a){switch(a.label){case 0:if(n.preventDefault(),u.stage<2)return d(Kf(Kf({},u),{stage:2})),[2];if(!(t=sessionStorage.getItem("order")))return[3,7];a.label=1;case 1:return a.trys.push([1,6,,7]),[4,Rf("/api/order",{method:"POST",body:JSON.stringify(Kf(Kf({},e),{order_type:u.type,products:JSON.parse(t)})),headers:{"Content-Type":"application/json"}})];case 2:return(r=a.sent()).ok?(setTimeout((function(){return i("success")}),3e3),[3,5]):[3,3];case 3:return[4,r.json()];case 4:o=a.sent(),l(o.message),setTimeout((function(){return i("failure")}),3e3),a.label=5;case 5:return[3,7];case 6:return a.sent(),l("неизвестная ошибка"),i("failure"),[3,7];case 7:return[2]}}))},new((o=void 0)||(o=Promise))((function(e,n){function i(e){try{l(a.next(e))}catch(e){n(e)}}function s(e){try{l(a.throw(e))}catch(e){n(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof o?e:new o((function(n){n(e)}))}(n.value).then(i,s)}l((a=a.apply(t,r||[])).next())}));var t,r,o,a})),children:[(0,t.jsx)(Pf.Provider,{value:u,children:(0,t.jsx)(Mf,{})}),(0,t.jsxs)(th,{children:[(0,t.jsx)(nh,{type:"submit",children:(0,t.jsx)(xr,{text:"Продолжить"})}),1===u.stage?(0,t.jsx)(nh,{onClick:function(){d(Kf(Kf({},u),{type:"juridical"===u.type?"physical":"juridical"}))},type:"button",children:(0,t.jsx)(xr,{invert:!0,text:"physical"===u.type?"Я юр. лицо":"Я физ. лицо"})}):(0,t.jsx)(nh,{onClick:function(){return d(Kf(Kf({},u),{stage:1}))},type:"button",children:(0,t.jsx)(xr,{invert:!0,text:"Назад"})})]})]})}))]})})})},ih=function(e){var n=(0,o.useState)(1),r=n[0],i=n[1];return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("input",{type:"number",value:e.value,onChange:function(n){var t=n.currentTarget.value.length>0?n.currentTarget.value.length:1;i(t),e.onChange(n)},size:r})})},oh=function(){return oh=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},oh.apply(this,arguments)},ah=ir.div(rf||(rf=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    display: inline-block;\n    overflow: hidden;\n    \n    & input {\n        appearance: textfield;\n        -moz-appearance: textfield;\n        -o-appearance: textfield;\n        width: fit-content;\n        text-align: center;\n        padding: 11px 6px;\n        background-color: transparent;\n        border-radius: 8px;\n        border: 1px solid #00000040;\n        outline: none;\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        font-weight: 400;\n        line-height: 24px;\n        color: #0047FF;\n        max-width: 40px;\n        \n        &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n        }\n    }\n"],["\n    display: inline-block;\n    overflow: hidden;\n    \n    & input {\n        appearance: textfield;\n        -moz-appearance: textfield;\n        -o-appearance: textfield;\n        width: fit-content;\n        text-align: center;\n        padding: 11px 6px;\n        background-color: transparent;\n        border-radius: 8px;\n        border: 1px solid #00000040;\n        outline: none;\n        font-family: var(--montserrat-regular);\n        font-size: 16px;\n        font-weight: 400;\n        line-height: 24px;\n        color: #0047FF;\n        max-width: 40px;\n        \n        &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n        }\n    }\n"]))),sh=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(ah,{children:(0,t.jsx)(ih,oh({},e))})})};function lh(){return lh=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},lh.apply(null,arguments)}const ch=function(e){return o.createElement("svg",lh({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 16 18"},e),of||(of=o.createElement("path",{stroke:"#0047FF",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M3.324 9h9.307"})))};var uh;function dh(){return dh=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},dh.apply(null,arguments)}const ph=function(e){return o.createElement("svg",dh({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 17 18"},e),uh||(uh=o.createElement("path",{stroke:"#0047FF",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M8.84 3.75v10.5M4.188 9h9.306"})))};var fh,hh,gh,mh,xh,vh,yh,bh,wh,kh,Sh,jh,Eh,Ch,_h,Oh,Fh,Ph,Th,zh,Ah,Lh,Mh,Nh,Rh,Dh=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Bh=function(){return Bh=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},Bh.apply(this,arguments)},Ih=ir.div(fh||(fh=Dh(["\n    display: flex;\n    flex-shrink: 0;\n    gap: 14px;\n    align-items: center;\n"],["\n    display: flex;\n    flex-shrink: 0;\n    gap: 14px;\n    align-items: center;\n"]))),Vh=ir.button(hh||(hh=Dh(["\n    display: block;\n    padding: 0;\n    width: 16px;\n    height: 18px;\n    margin: 0;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n"],["\n    display: block;\n    padding: 0;\n    width: 16px;\n    height: 18px;\n    margin: 0;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n"]))),$h=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(Ih,{children:[(0,t.jsx)(Vh,{onClick:function(){e.value>0&&e.setCount(e.value-1)},children:(0,t.jsx)(ch,{width:"16",height:"18px"})}),(0,t.jsx)(sh,Bh({},e,{value:e.value,onChange:e.onChange})),(0,t.jsx)(Vh,{onClick:function(){return e.setCount(e.value+1)},children:(0,t.jsx)(ph,{width:"16",height:"18px"})})]})})},Uh=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},qh=ir.div(gh||(gh=Uh(["\n    background-color: #F5F5F5;\n    border-radius: 10px;\n    padding: 20px;\n    display: flex;\n    gap: 10px;\n    flex-direction: column;\n    \n    @media screen and (min-width: 800px) {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n"],["\n    background-color: #F5F5F5;\n    border-radius: 10px;\n    padding: 20px;\n    display: flex;\n    gap: 10px;\n    flex-direction: column;\n    \n    @media screen and (min-width: 800px) {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n"]))),Hh=ir.div(mh||(mh=Uh(["\n    display: flex;\n    gap: 34px;\n    align-items: center;\n"],["\n    display: flex;\n    gap: 34px;\n    align-items: center;\n"]))),Wh=ir.div(xh||(xh=Uh(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 116px;\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 116px;\n"]))),Gh=ir.img(vh||(vh=Uh(["\n    width: 86px;\n    height: 80px;\n    border-radius: 8px;\n    border: 1px solid #00000040;\n    object-fit: contain;\n    object-position: center;\n"],["\n    width: 86px;\n    height: 80px;\n    border-radius: 8px;\n    border: 1px solid #00000040;\n    object-fit: contain;\n    object-position: center;\n"]))),Yh=ir.h3(yh||(yh=Uh(["\n    font-family: var(--montserrat-regular);\n    font-weight: 600;\n    font-size: 18px;\n    line-height: 26px;\n    color: #202020;\n"],["\n    font-family: var(--montserrat-regular);\n    font-weight: 600;\n    font-size: 18px;\n    line-height: 26px;\n    color: #202020;\n"]))),Qh=ir.div(bh||(bh=Uh(["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 24px;\n    color: #202020;\n"],["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 24px;\n    color: #202020;\n"]))),Xh=ir.div(wh||(wh=Uh(["\n    font-family: var(--montserrat-bold);\n    font-weight: 700;\n    font-size: 18px;\n    line-height: 26px;\n    text-align: right;\n    color: #202020;\n"],["\n    font-family: var(--montserrat-bold);\n    font-weight: 700;\n    font-size: 18px;\n    line-height: 26px;\n    text-align: right;\n    color: #202020;\n"]))),Kh=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(qh,{children:[(0,t.jsxs)(Hh,{children:[(0,t.jsx)(Pr,{to:"/product/".concat(e.id),children:(0,t.jsx)(Gh,{src:e.photo,alt:""})}),(0,t.jsxs)("div",{children:[(0,t.jsx)(Yh,{children:e.title}),(0,t.jsxs)(Qh,{children:[e.price,"₽"]})]})]}),(0,t.jsxs)(Wh,{children:[(0,t.jsx)($h,{onChange:function(n){return e.setCount(+n.currentTarget.value)},setCount:e.setCount,value:e.count}),(0,t.jsxs)(Xh,{children:[e.price,"₽"]})]})]})})},Jh=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Zh=ir.div(kh||(kh=Jh(["\n    padding: 50px 0;\n"],["\n    padding: 50px 0;\n"]))),eg=ir.h1(Sh||(Sh=Jh(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    text-align: center;\n    color: #202020;\n    margin-bottom: 30px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    text-align: center;\n    color: #202020;\n    margin-bottom: 30px;\n"]))),ng=ir.div(jh||(jh=Jh(["\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    @media screen and (min-width: 900px) {\n        width: 67%;\n    }\n"],["\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    @media screen and (min-width: 900px) {\n        width: 67%;\n    }\n"]))),tg=ir.div(Eh||(Eh=Jh(["\n    padding: 15px 20px;\n    background-color: #F5F5F5;\n    border-radius: 10px;\n\n    @media screen and (min-width: 900px) {\n        background-color: transparent;\n        width: 33%;\n        padding: 0;\n    }\n    \n"],["\n    padding: 15px 20px;\n    background-color: #F5F5F5;\n    border-radius: 10px;\n\n    @media screen and (min-width: 900px) {\n        background-color: transparent;\n        width: 33%;\n        padding: 0;\n    }\n    \n"]))),rg=ir.div(Ch||(Ch=Jh(["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 18px;\n    line-height: 32px;\n    color: #000000BF;\n    margin-bottom: 32px;\n"],["\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    font-size: 18px;\n    line-height: 32px;\n    color: #000000BF;\n    margin-bottom: 32px;\n"]))),ig=ir.div(_h||(_h=Jh(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n    \n    & > *:first-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: clamp(12px, 2vw, 16px);\n        line-height: 24px;\n        color: #000000A6;\n    }\n\n    & > *:last-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: clamp(12px, 2vw, 16px);\n        line-height: 24px;\n        color: #000000;\n    }\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n    \n    & > *:first-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: clamp(12px, 2vw, 16px);\n        line-height: 24px;\n        color: #000000A6;\n    }\n\n    & > *:last-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 500;\n        font-size: clamp(12px, 2vw, 16px);\n        line-height: 24px;\n        color: #000000;\n    }\n"]))),og=ir.hr(Oh||(Oh=Jh(["\n    color: #00000026;\n"],["\n    color: #00000026;\n"]))),ag=ir.button(Fh||(Fh=Jh(["\n    display: flex;\n    width: 100%;\n    border: none;\n    border-radius: 23px;\n    padding: 0;\n    margin-top: 20px;\n    \n    & div {\n        width: 100%;\n    }\n"],["\n    display: flex;\n    width: 100%;\n    border: none;\n    border-radius: 23px;\n    padding: 0;\n    margin-top: 20px;\n    \n    & div {\n        width: 100%;\n    }\n"]))),sg=ir.div(Ph||(Ph=Jh(["\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n    \n    @media screen and (min-width: 900px) {\n        flex-direction: row;\n        align-items: start;\n    }\n"],["\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n    \n    @media screen and (min-width: 900px) {\n        flex-direction: row;\n        align-items: start;\n    }\n"]))),lg=function(){var e,n=(e=localStorage.getItem("cart"))?JSON.parse(e):[],r=(0,o.useState)(n),i=r[0],a=(r[1],(0,o.useState)([])),s=a[0],l=a[1],c=X();return(0,o.useEffect)((function(){var e=[],n=i.map((function(n){return new Promise((function(t,r){return i=void 0,o=void 0,s=function(){var i,o;return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(a){switch(a.label){case 0:return[4,af(n)];case 1:return(i=a.sent()).ok||r(),[4,i.json()];case 2:return(o=a.sent()).photos.length<0&&o.photos.push({product_id:o.id,source:Oa(o),id:0}),o.count=1,e.push(o),t(!0),[2]}}))},new((a=void 0)||(a=Promise))((function(e,n){function t(e){try{l(s.next(e))}catch(e){n(e)}}function r(e){try{l(s.throw(e))}catch(e){n(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof a?e:new a((function(n){n(e)}))}(n.value).then(t,r)}l((s=s.apply(i,o||[])).next())}));var i,o,a,s}))}));Promise.all(n).then((function(){return l(e)}))}),[]),(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Zh,{children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(eg,{children:"Корзина"}),(0,t.jsxs)(sg,{children:[(0,t.jsx)(ng,{children:s.map((function(e){return(0,t.jsx)(Kh,{photo:Oa(e),id:e.id,title:e.model,price:e.price,count:e.count,setCount:function(n){var t=s.map((function(t){return t.id===e.id&&(t.count=n),t}));l(t)}},e.id)}))}),(0,t.jsxs)(tg,{children:[(0,t.jsx)(rg,{children:"Сумма заказа"}),s.filter((function(e){return e.count>0})).map((function(e){return(0,t.jsxs)(ig,{children:[(0,t.jsx)("div",{children:e.model}),(0,t.jsxs)("div",{children:[e.count,"x",e.price,"₽"]})]})})),(0,t.jsx)(og,{}),(0,t.jsxs)(ig,{children:[(0,t.jsx)("div",{children:"Итого"}),(0,t.jsxs)("div",{children:[s.reduce((function(e,n){return e+ +n.price*n.count}),0),"₽"]})]}),(0,t.jsx)(ag,{onClick:function(){var e=s.filter((function(e){return e.count>0})).map((function(e){return{product_id:e.id,count:e.count}}));sessionStorage.setItem("order",JSON.stringify(e)),c("/order")},children:(0,t.jsx)(xr,{text:"Оформить заказ"})})]})]})]})})})},cg=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},ug=function(){return ug=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},ug.apply(this,arguments)},dg=ir.div(Th||(Th=cg(["\n    width: 100%;\n    min-height: inherit;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n"],["\n    width: 100%;\n    min-height: inherit;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n"]))),pg=ir.form(zh||(zh=cg(["\n    width: 100%;\n    \n    & label {\n        color: #202020;\n    }\n    \n    & input {\n        border: 1px solid #0000001A;\n        border-radius: 5px;\n        box-shadow: \n            1px 9px 20px 0 #00000008,\n            4px 36px 37px 0 #00000005,\n            10px 82px 50px 0 #00000003;\n    }\n    \n    & > *:first-child {\n        margin-bottom: 10px;\n    }\n"],["\n    width: 100%;\n    \n    & label {\n        color: #202020;\n    }\n    \n    & input {\n        border: 1px solid #0000001A;\n        border-radius: 5px;\n        box-shadow: \n            1px 9px 20px 0 #00000008,\n            4px 36px 37px 0 #00000005,\n            10px 82px 50px 0 #00000003;\n    }\n    \n    & > *:first-child {\n        margin-bottom: 10px;\n    }\n"]))),fg=ir.h1(Ah||(Ah=cg(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 32px;\n    line-height: 39px;\n    color: #202020;\n    margin-bottom: 20px;\n    text-align: center;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 32px;\n    line-height: 39px;\n    color: #202020;\n    margin-bottom: 20px;\n    text-align: center;\n"]))),hg=ir.button(Lh||(Lh=cg(["\n    border-radius: 23px;\n    padding: 0;\n    border: none;\n    margin: 20px auto 0 auto;\n    display: block;\n    \n    & > div {\n        width: 226px;\n    }\n"],["\n    border-radius: 23px;\n    padding: 0;\n    border: none;\n    margin: 20px auto 0 auto;\n    display: block;\n    \n    & > div {\n        width: 226px;\n    }\n"]))),gg=ir.div(Mh||(Mh=cg(["\n    width: 430px;\n"],["\n    width: 430px;\n"]))),mg=function(){var e=X(),n=Ks(),r=(0,o.useState)(""),i=r[0],a=r[1];return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(dg,{children:(0,t.jsxs)(gg,{children:[(0,t.jsx)(fg,{children:"Вход"}),(0,t.jsx)(is,ug({},n,{children:(0,t.jsxs)(pg,{action:"/api/login",method:"POST",onSubmit:n.handleSubmit((function(n,t){return r=void 0,i=void 0,s=function(){var r,i;return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(o){switch(o.label){case 0:return t.preventDefault(),[4,fetch("/api/login",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}})];case 1:return 200!==(r=o.sent()).status?(a("Неверно"),[2]):[4,r.json()];case 2:return i=o.sent(),localStorage.setItem("access_token",i.access_token),e("/admin/stat"),[2]}}))},new((o=void 0)||(o=Promise))((function(e,n){function t(e){try{l(s.next(e))}catch(e){n(e)}}function a(e){try{l(s.throw(e))}catch(e){n(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof o?e:new o((function(n){n(e)}))}(n.value).then(t,a)}l((s=s.apply(r,i||[])).next())}));var r,i,o,s})),children:[(0,t.jsx)("div",{children:(0,t.jsx)(ul,{type:"text",label:(0,t.jsxs)("span",{children:["Ваш логин ",i.length>0&&(0,t.jsx)("span",{style:{color:"#FF0000"},children:i})]}),placeholder:"Ввелите логин",registerOpts:{name:"login",options:{required:!0}},errored:Boolean(n.formState.errors.login)})}),(0,t.jsx)("div",{children:(0,t.jsx)(ul,{type:"password",label:"Ваш пароль",placeholder:"Ввелите пароль",registerOpts:{name:"password",options:{required:!0}},errored:Boolean(n.formState.errors.password)})}),(0,t.jsx)(hg,{type:"submit",children:(0,t.jsx)(xr,{text:"Продолжить"})})]})}))]})})})},xg=ir.main(Nh||(Nh=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    min-width: 100vw;\n    min-height: 100vh;\n    background-color: #F5F5F5;\n"],["\n    min-width: 100vw;\n    min-height: 100vh;\n    background-color: #F5F5F5;\n"]))),vg=function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(xg,{children:(0,t.jsx)(ue,{})})})};function yg(){return yg=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},yg.apply(null,arguments)}const bg=function(e){return o.createElement("svg",yg({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 13 13"},e),Rh||(Rh=o.createElement("path",{fill:"#0047FF",d:"M1.444 11.556h1.03l7.06-7.06-1.03-1.03-7.06 7.06zM0 13V9.93L9.533.416a1.6 1.6 0 0 1 .48-.307q.26-.108.55-.108.287 0 .56.108.27.109.469.325l.993 1.011q.216.2.316.47a1.55 1.55 0 0 1 0 1.093 1.3 1.3 0 0 1-.316.478L3.069 13zm9.01-9.01-.506-.523 1.03 1.029z"})))};var wg;function kg(){return kg=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},kg.apply(null,arguments)}const Sg=function(e){return o.createElement("svg",kg({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 12 13"},e),wg||(wg=o.createElement("path",{fill:"red",d:"M2.25 13q-.62 0-1.059-.424a1.37 1.37 0 0 1-.441-1.02v-9.39H0V.723h3.75V0h4.5v.722H12v1.445h-.75v9.389q0 .595-.44 1.02A1.47 1.47 0 0 1 9.75 13zm7.5-10.833h-7.5v9.389h7.5zm-6 7.944h1.5v-6.5h-1.5zm3 0h1.5v-6.5h-1.5z"})))};var jg;function Eg(){return Eg=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Eg.apply(null,arguments)}const Cg=function(e){return o.createElement("svg",Eg({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 12 15"},e),jg||(jg=o.createElement("path",{fill:"#909090",d:"M8 14.5V.5h4v14zm-8 0V.5h4v14z"})))};var _g;function Og(){return Og=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Og.apply(null,arguments)}const Fg=function(e){return o.createElement("svg",Og({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 12 15"},e),_g||(_g=o.createElement("path",{fill:"#fff",d:"M12 7.5 0 14.428V.572z"})))};var Pg,Tg,zg,Ag,Lg,Mg,Ng,Rg,Dg,Bg,Ig,Vg,$g,Ug,qg,Hg,Wg,Gg,Yg,Qg,Xg,Kg,Jg,Zg,em,nm,tm,rm,im,om,am,sm,lm,cm,um,dm,pm,fm,hm,gm,mm,xm,vm,ym,bm,wm,km,Sm,jm,Em,Cm,_m,Om,Fm,Pm,Tm,zm,Am,Lm,Mm=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Nm=ir.div(Pg||(Pg=Mm(["\n    min-width: 250px;\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: 0 10px 16px 0 #0000000D,\n    0 14px 29px 0 #0000000A,\n    0 37px 40px 0 #00000008,\n    0 84px 47px 0 #00000003;\n\n    border-radius: 10px;\n    overflow: hidden;\n"],["\n    min-width: 250px;\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: 0 10px 16px 0 #0000000D,\n    0 14px 29px 0 #0000000A,\n    0 37px 40px 0 #00000008,\n    0 84px 47px 0 #00000003;\n\n    border-radius: 10px;\n    overflow: hidden;\n"]))),Rm=ir.img(Tg||(Tg=Mm(["\n    width: 100%;\n    height: 148px;\n    object-position: center;\n    object-fit: contain;\n    background-color: #FFFFFF;\n"],["\n    width: 100%;\n    height: 148px;\n    object-position: center;\n    object-fit: contain;\n    background-color: #FFFFFF;\n"]))),Dm=ir.div(zg||(zg=Mm(["\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    gap: 2px;\n"],["\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    gap: 2px;\n"]))),Bm=ir.h3(Ag||(Ag=Mm(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 14px;\n    line-height: 17px;\n    color: #202020;\n    margin-bottom: 10px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 14px;\n    line-height: 17px;\n    color: #202020;\n    margin-bottom: 10px;\n"]))),Im=ir.button(Lg||(Lg=Mm(["\n    display: flex;\n    align-items: center;\n    border: 1px solid ",";\n    color: ",";\n    border-radius: 23px;\n    padding: 10px 20px;\n    gap: 5px;\n    background-color: transparent;\n    cursor: pointer;\n\n    & svg path {\n        fill: ",";\n    }\n"],["\n    display: flex;\n    align-items: center;\n    border: 1px solid ",";\n    color: ",";\n    border-radius: 23px;\n    padding: 10px 20px;\n    gap: 5px;\n    background-color: transparent;\n    cursor: pointer;\n\n    & svg path {\n        fill: ",";\n    }\n"])),(function(e){return e.$color}),(function(e){return e.$color}),(function(e){return e.$color})),Vm=ir.button(Mg||(Mg=Mm(["\n    display: flex;\n    align-items: center;\n    border: 1px solid #0047FF;\n    background-color: #0047FF;\n    color: #FFF;\n    border-radius: 23px;\n    padding: 10px 20px;\n    gap: 5px;\n    cursor: pointer;\n"],["\n    display: flex;\n    align-items: center;\n    border: 1px solid #0047FF;\n    background-color: #0047FF;\n    color: #FFF;\n    border-radius: 23px;\n    padding: 10px 20px;\n    gap: 5px;\n    cursor: pointer;\n"]))),$m=function(e){var n=X();return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(Nm,{children:[(0,t.jsx)(Pr,{to:"/product/"+e.id,children:(0,t.jsx)(Rm,{src:e.image,alt:""})}),(0,t.jsxs)(Dm,{children:[(0,t.jsx)(Bm,{children:e.title}),(0,t.jsxs)(Im,{$color:"#0047FF",onClick:function(){return n("/admin/product/".concat(e.id,"/edit"))},children:[(0,t.jsx)(bg,{}),(0,t.jsx)("div",{children:"Изменить"})]}),(0,t.jsxs)(Im,{$color:"#FF0000",onClick:function(){return e.deleteAction()},children:[(0,t.jsx)(Sg,{}),(0,t.jsx)("div",{children:"Удалить"})]}),e.stopped?(0,t.jsxs)(Vm,{onClick:function(){return e.stopAction()},children:[(0,t.jsx)(Fg,{}),(0,t.jsx)("div",{children:"Включить"})]}):(0,t.jsxs)(Im,{$color:"#909090",onClick:function(){return e.stopAction()},children:[(0,t.jsx)(Cg,{}),(0,t.jsx)("div",{children:"Остановить"})]})]})]})})},Um=ir.div(Ng||(Ng=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    min-width: 250px;\n    height: 100%;\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: 0 10px 16px 0 #0000000D,\n    0 14px 29px 0 #0000000A,\n    0 37px 40px 0 #00000008,\n    0 84px 47px 0 #00000003;\n\n    border-radius: 10px;\n    overflow: hidden;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 128px;\n    color: #0047FF;\n    cursor: pointer;\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n"],["\n    min-width: 250px;\n    height: 100%;\n    background-color: #F5F5F5;\n    border: 1px solid #B8B8B8;\n    box-shadow: 0 10px 16px 0 #0000000D,\n    0 14px 29px 0 #0000000A,\n    0 37px 40px 0 #00000008,\n    0 84px 47px 0 #00000003;\n\n    border-radius: 10px;\n    overflow: hidden;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 128px;\n    color: #0047FF;\n    cursor: pointer;\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n"]))),qm=function(){var e=X();return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Um,{onClick:function(){return e("/admin/product")},children:(0,t.jsx)("div",{children:"+"})})})},Hm=function(e){return(0,br.createPortal)(e.children,document.getElementById("portal"))},Wm=ir.div(Rg||(Rg=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}(["\n    position: absolute;\n    z-index: 98;\n    background-color: #00000080;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n"],["\n    position: absolute;\n    z-index: 98;\n    background-color: #00000080;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n"]))),Gm=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(Hm,{children:[(0,t.jsx)(Wm,{}),e.children]})})},Ym=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Qm=ir.div(Dg||(Dg=Ym(["\n    width: 687px;\n    height: 191px;\n    position: absolute;\n    left: calc(50% - 343px);\n    top: calc(50% - 95px);\n    border-radius: 10px;\n    border: 1px solid #00000033;\n    background-color: #FFFFFF;\n    padding: 40px;\n    z-index: 99;\n"],["\n    width: 687px;\n    height: 191px;\n    position: absolute;\n    left: calc(50% - 343px);\n    top: calc(50% - 95px);\n    border-radius: 10px;\n    border: 1px solid #00000033;\n    background-color: #FFFFFF;\n    padding: 40px;\n    z-index: 99;\n"]))),Xm=ir.h2(Bg||(Bg=Ym(["\n    font-family: var(--montserrat-bold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    text-align: center;\n    margin-bottom: 20px;\n"],["\n    font-family: var(--montserrat-bold);\n    font-weight: 800;\n    font-size: 24px;\n    line-height: 29px;\n    text-align: center;\n    margin-bottom: 20px;\n"]))),Km=ir.div(Ig||(Ig=Ym(["\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n"],["\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n"]))),Jm=ir.button(Vg||(Vg=Ym(["\n    border: 1px solid #FF0000;\n    top: 118px;\n    left: 223px;\n    padding: 8px 20px 8px 20px;\n    gap: 5px;\n    border-radius: 23px;\n    display: flex;\n    justify-content: center;\n    outline: none;\n    background-color: transparent;\n\n    span {\n        color: #FF0000;\n        font-family: var(--montserrat-regular);\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 17px;\n        text-align: left;\n    }\n"],["\n    border: 1px solid #FF0000;\n    top: 118px;\n    left: 223px;\n    padding: 8px 20px 8px 20px;\n    gap: 5px;\n    border-radius: 23px;\n    display: flex;\n    justify-content: center;\n    outline: none;\n    background-color: transparent;\n\n    span {\n        color: #FF0000;\n        font-family: var(--montserrat-regular);\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 17px;\n        text-align: left;\n    }\n"]))),Zm=ir.button($g||($g=Ym(["\n    top: 118px;\n    left: 363px;\n    padding: 8px 20px 8px 20px;\n    gap: 5px;\n    border-radius: 23px;\n    font-family: var(--montserrat-regular);\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 17px;\n    text-align: left;\n    background-color: #0047FF;\n    color: #FFFFFF;\n    outline: none;\n    border: 1px solid #0047FF;\n"],["\n    top: 118px;\n    left: 363px;\n    padding: 8px 20px 8px 20px;\n    gap: 5px;\n    border-radius: 23px;\n    font-family: var(--montserrat-regular);\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 17px;\n    text-align: left;\n    background-color: #0047FF;\n    color: #FFFFFF;\n    outline: none;\n    border: 1px solid #0047FF;\n"]))),ex=function(e){return e.open&&(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Gm,{children:(0,t.jsxs)(Qm,{children:[(0,t.jsxs)(Xm,{children:['Точно требуется удалить "',e.product?e.product.model:"",'"']}),(0,t.jsxs)(Km,{children:[(0,t.jsxs)(Jm,{onClick:function(){return n=void 0,t=void 0,i=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(n){switch(n.label){case 0:return[4,Rf("/api/product/".concat(e.product.id),{method:"DELETE"})];case 1:return n.sent().ok?(e.setOpen({product:e.product,open:!1}),e.onDelete()):console.log("error on deleting product"),[2]}}))},new((r=void 0)||(r=Promise))((function(e,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof r?e:new r((function(n){n(e)}))}(n.value).then(a,s)}l((i=i.apply(n,t||[])).next())}));var n,t,r,i},children:[(0,t.jsx)(Sg,{}),(0,t.jsx)("span",{children:"Удалить"})]}),(0,t.jsx)(Zm,{onClick:function(){e.setOpen({product:e.product,open:!1})},children:"Оставить"})]})]})})})},nx=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},tx=function(e,n,t,r){return new(t||(t=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((r=r.apply(e,n||[])).next())}))},rx=function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},ix=ir.h1(Ug||(Ug=nx(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    color: #202020;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    color: #202020;\n"]))),ox=ir.div(qg||(qg=nx(["\n    display: flex;\n    gap: 36px;\n    align-items: center;\n    margin-bottom: 40px;\n"],["\n    display: flex;\n    gap: 36px;\n    align-items: center;\n    margin-bottom: 40px;\n"]))),ax=ir.nav(Hg||(Hg=nx(["\n    display: flex;\n    align-items: center;\n    gap: 20px;\n\n    & a {\n        font-family: var(--montserrat-extrabold);\n        font-weight: 800;\n        font-size: 16px;\n        line-height: 20px;\n        color: #0047FF;\n        text-decoration: none;\n    }\n"],["\n    display: flex;\n    align-items: center;\n    gap: 20px;\n\n    & a {\n        font-family: var(--montserrat-extrabold);\n        font-weight: 800;\n        font-size: 16px;\n        line-height: 20px;\n        color: #0047FF;\n        text-decoration: none;\n    }\n"]))),sx=ir.div(Wg||(Wg=nx(["\n    padding: 70px 0;\n"],["\n    padding: 70px 0;\n"]))),lx=ir.div(Gg||(Gg=nx(["\n    display: grid;\n    grid-gap: 10px 20px;\n    grid-template-columns: repeat(4, 1fr);\n"],["\n    display: grid;\n    grid-gap: 10px 20px;\n    grid-template-columns: repeat(4, 1fr);\n"]))),cx=function(){var e=(0,o.useState)([]),n=e[0],r=e[1],i=(0,o.useState)({open:!1}),a=i[0],s=i[1];return(0,o.useEffect)((function(){var e,n,t,i;(e=void 0,n=void 0,t=void 0,i=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(e){switch(e.label){case 0:return[4,Rf("/api/product/all")];case 1:return[2,e.sent()]}}))},new(t||(t=Promise))((function(r,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){e.done?r(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((i=i.apply(e,n||[])).next())}))).then((function(e){return e.json()})).then((function(e){return r(e)}))}),[]),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(sx,{children:(0,t.jsxs)(gr,{children:[(0,t.jsxs)(ox,{children:[(0,t.jsx)(ix,{children:"Изменить каталог"}),(0,t.jsx)(ax,{children:(0,t.jsx)(Pr,{to:"/admin/stat",children:"Статистика"})})]}),(0,t.jsxs)(lx,{children:[n.map((function(e){return(0,t.jsx)($m,{id:e.id,image:Oa(e),title:e.model,deleteAction:function(){return t=e.id,tx(void 0,void 0,void 0,(function(){var e;return rx(this,(function(r){return e=n.find((function(e){return e.id===t})),s({open:!0,product:e}),[2]}))}));var t},stopAction:function(){return t=e.id,tx(void 0,void 0,void 0,(function(){var e;return rx(this,(function(i){switch(i.label){case 0:return e=n.find((function(e){return e.id===t})),[4,Rf("/api/product/".concat(t,"/stop"),{method:"PUT",body:JSON.stringify({value:(!e.stopped).toString()}),headers:{"Content-Type":"application/json"}})];case 1:return i.sent().ok&&r(n.map((function(e){return e.id===t&&(e.stopped=!e.stopped),e}))),[2]}}))}));var t},stopped:e.stopped},e.id)})),(0,t.jsx)(qm,{})]})]})}),(0,t.jsx)(ex,{open:a.open,setOpen:s,product:a.product,onDelete:function(){r(n.filter((function(e){return e.id!==a.product.id})))}})]})},ux=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},dx=ir.img(Yg||(Yg=ux(["\n    width: inherit;\n    height: inherit;\n    object-fit: cover;\n    object-position: center;\n    display: ",";\n"],["\n    width: inherit;\n    height: inherit;\n    object-fit: cover;\n    object-position: center;\n    display: ",";\n"])),(function(e){return e.$show?"block":"none"})),px=ir.div(Qg||(Qg=ux(["\n    width: 210px;\n    aspect-ratio: 1;\n    border-radius: 10px;\n    background-color: #D9D9D9;\n    overflow: hidden;\n"],["\n    width: 210px;\n    aspect-ratio: 1;\n    border-radius: 10px;\n    background-color: #D9D9D9;\n    overflow: hidden;\n"]))),fx=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(px,{children:(0,t.jsx)(dx,{$show:Boolean(e.src),src:e.src,alt:""})})})},hx=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},gx=ir.label(Xg||(Xg=hx(["\n    width: 210px;\n    height: 210px;\n    background-color: #D9D9D9;\n\n    border-radius: 10px;\n    overflow: hidden;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 128px;\n    color: #0047FF;\n    cursor: pointer;\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n"],["\n    width: 210px;\n    height: 210px;\n    background-color: #D9D9D9;\n\n    border-radius: 10px;\n    overflow: hidden;\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 128px;\n    color: #0047FF;\n    cursor: pointer;\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n"]))),mx=ir.input(Kg||(Kg=hx(["\n    display: none;\n"],["\n    display: none;\n"]))),xx=function(e){var n=sl();return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(gx,{htmlFor:n,children:[(0,t.jsx)("div",{children:"+"}),(0,t.jsx)(mx,{id:n,type:"file",accept:"image/*",onChange:e.onChange})]})})},vx=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},yx=ir.div(Jg||(Jg=vx(["\n    width: 687px;\n    height: 399px;\n    padding: 20px;\n    position: absolute;\n    top: calc(50% - 200px);\n    left: calc(50% - 343px);\n    background-color: #FFF;\n    border: 1px solid #00000033;\n    border-radius: 10px;\n    z-index: 99;\n"],["\n    width: 687px;\n    height: 399px;\n    padding: 20px;\n    position: absolute;\n    top: calc(50% - 200px);\n    left: calc(50% - 343px);\n    background-color: #FFF;\n    border: 1px solid #00000033;\n    border-radius: 10px;\n    z-index: 99;\n"]))),bx=ir.h2(Zg||(Zg=vx(["\n    font-family: var(--montserrat-bold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    text-align: center;\n    color: #202020;\n    margin: 17px 0 20px 0;\n"],["\n    font-family: var(--montserrat-bold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    text-align: center;\n    color: #202020;\n    margin: 17px 0 20px 0;\n"]))),wx=ir.div(em||(em=vx(["\n    height: 261px;\n    background-color: #F5F5F5;\n    border: 1px solid #0000001A;\n    border-radius: 10px;\n    line-height: 261px;\n    text-align: center;\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    color: #202020;\n"],["\n    height: 261px;\n    background-color: #F5F5F5;\n    border: 1px solid #0000001A;\n    border-radius: 10px;\n    line-height: 261px;\n    text-align: center;\n    font-family: var(--montserrat-regular);\n    font-weight: 500;\n    color: #202020;\n"]))),kx=(ir.div(nm||(nm=vx(["\n    position: absolute;\n    z-index: 98;\n    background-color: #00000080;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n"],["\n    position: absolute;\n    z-index: 98;\n    background-color: #00000080;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n"]))),function(e){var n=document.body;return n.ondragenter=function(n){n.preventDefault(),e.setOpen(!0)},n.ondragover=function(n){n.preventDefault(),e.setOpen(!0)},n.ondragleave=function(n){n.preventDefault(),e.setOpen(!1)},n.ondrop=function(n){n.preventDefault(),e.setOpen(!1)},e.open&&(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(Gm,{children:(0,t.jsxs)(yx,{children:[(0,t.jsx)(bx,{children:"Загрузить"}),(0,t.jsx)(wx,{onDrop:e.onDrop,children:"Переместите изображение в эту область"})]})})})}),Sx=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},jx=function(){return jx=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},jx.apply(this,arguments)},Ex=ir.div(tm||(tm=Sx(["\n    padding: 70px 0;\n"],["\n    padding: 70px 0;\n"]))),Cx=ir.h2(rm||(rm=Sx(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    color: #202020;\n    padding-bottom: 40px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    color: #202020;\n    padding-bottom: 40px;\n"]))),_x=ir.div(im||(im=Sx(["\n    display: flex;\n    padding: 20px;\n    gap: 20px;\n    border-radius: 10px;\n    border: 1px solid #B8B8B8;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n    .swiper-slide {\n        width: 210px!important;\n        margin-right: 20px;\n    }\n    \n    .swiper {\n        margin: 0;\n    }\n"],["\n    display: flex;\n    padding: 20px;\n    gap: 20px;\n    border-radius: 10px;\n    border: 1px solid #B8B8B8;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n    .swiper-slide {\n        width: 210px!important;\n        margin-right: 20px;\n    }\n    \n    .swiper {\n        margin: 0;\n    }\n"]))),Ox=ir.div(om||(om=Sx(["\n    margin-top: 40px;\n"],["\n    margin-top: 40px;\n"]))),Fx=ir.div(am||(am=Sx(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 5px;\n    border-bottom: 1px solid ",";\n    \n    & > :first-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 600;\n        font-size: 14px;\n        line-height: 16px;\n        color: #202020;\n        flex-shrink: 0;\n        text-wrap: wrap;\n        width: 30%;\n    }\n    \n    & > *:last-child {\n        box-shadow: none;\n        border-radius: 0;\n        line-height: normal;\n        height: auto;\n        width: 70%;\n        border: none;\n        flex-shrink: 0;\n        outline: none;\n        background-color: transparent;\n        text-align: end;\n        font-size: 14px;\n        font-family: var(--montserrat-regular);\n        padding: 0;\n        \n        & input {\n            outline: none;\n            border: none;\n            background-color: transparent;\n            padding: 0;\n            text-align: end;\n            font-size: 14px;\n            text-wrap: wrap;\n        }\n    }\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 5px;\n    border-bottom: 1px solid ",";\n    \n    & > :first-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 600;\n        font-size: 14px;\n        line-height: 16px;\n        color: #202020;\n        flex-shrink: 0;\n        text-wrap: wrap;\n        width: 30%;\n    }\n    \n    & > *:last-child {\n        box-shadow: none;\n        border-radius: 0;\n        line-height: normal;\n        height: auto;\n        width: 70%;\n        border: none;\n        flex-shrink: 0;\n        outline: none;\n        background-color: transparent;\n        text-align: end;\n        font-size: 14px;\n        font-family: var(--montserrat-regular);\n        padding: 0;\n        \n        & input {\n            outline: none;\n            border: none;\n            background-color: transparent;\n            padding: 0;\n            text-align: end;\n            font-size: 14px;\n            text-wrap: wrap;\n        }\n    }\n"])),(function(e){return e.$errored?"#FF0000":"transparent"})),Px=ir.div(sm||(sm=Sx(["\n    width: 250px;\n"],["\n    width: 250px;\n"]))),Tx=ir.form(lm||(lm=Sx(["\n    display: flex;\n    gap: 20px;\n    align-items: start;\n"],["\n    display: flex;\n    gap: 20px;\n    align-items: start;\n"]))),zx=ir.button(cm||(cm=Sx(["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n"],["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n"]))),Ax=ir.button(um||(um=Sx(["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n    \n    & > * {\n        background-color: #FF0000;\n        border-color: #FF0000;\n        width: 100%;\n    }\n"],["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n    \n    & > * {\n        background-color: #FF0000;\n        border-color: #FF0000;\n        width: 100%;\n    }\n"]))),Lx=ir.div(dm||(dm=Sx(["\n    align-self: end;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n"],["\n    align-self: end;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n"]))),Mx=function(){var e=Ks(),n=X(),r=(0,o.useState)([]),i=r[0],a=r[1],s=(0,o.useState)([]),l=s[0],c=s[1],u=(0,o.useState)(!1),d=u[0],p=u[1];return(0,o.useEffect)((function(){var e=new FileReader,n=[],t=function(r){r<l.length?(e.readAsDataURL(l[r]),e.onload=function(e){n.push(e.target.result.toString()),t(r+1)}):r===l.length&&a(n)};t(0)}),[l]),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(Ex,{children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(Cx,{children:"Галерея"}),(0,t.jsx)(_x,{children:(0,t.jsxs)(wp,{slidesPerView:5,children:[i.map((function(e,n){return(0,t.jsx)(kp,{children:(0,t.jsx)("div",{onDoubleClick:function(){return c(l.filter((function(e,t){return t!==n})))},children:(0,t.jsx)(fx,{src:e},n)})})})),(0,t.jsx)(kp,{children:(0,t.jsx)(xx,{onChange:function(e){var n=e.currentTarget.files[0];c(l.concat(n))}})})]})}),(0,t.jsxs)(Ox,{children:[(0,t.jsx)(Cx,{children:"Характеристики"}),(0,t.jsx)(is,jx({},e,{children:(0,t.jsxs)(Tx,{onSubmit:e.handleSubmit((function(e,t){return r=void 0,i=void 0,a=function(){var r;return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(i){switch(i.label){case 0:return t.preventDefault(),r=new FormData,Object.entries(e).forEach((function(e){var n=e[0],t=e[1];r.set(n,t)})),l.forEach((function(e){r.append("photos",e)})),[4,Rf("/api/product",{method:"POST",body:r})];case 1:return i.sent().ok&&n("/admin/catalog"),[2]}}))},new((o=void 0)||(o=Promise))((function(e,n){function t(e){try{l(a.next(e))}catch(e){n(e)}}function s(e){try{l(a.throw(e))}catch(e){n(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof o?e:new o((function(n){n(e)}))}(n.value).then(t,s)}l((a=a.apply(r,i||[])).next())}));var r,i,o,a})),children:[(0,t.jsxs)(Px,{children:[(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.model),children:[(0,t.jsx)("div",{children:"Модель"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"model",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.capacity),children:[(0,t.jsx)("div",{children:"Емкость батареи"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"capacity",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.rated_power),children:[(0,t.jsx)("div",{children:"Номинальная мощность"}),(0,t.jsx)(wl(),jx({mask:"99999 Вт",type:"text",placeholder:"Нет инфо"},e.register("rated_power",{required:!0})))]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.peak_power),children:[(0,t.jsx)("div",{children:"Пиковая мощность"}),(0,t.jsx)(wl(),jx({mask:"99999 Вт",type:"text",placeholder:"Нет инфо"},e.register("peak_power",{required:!0})))]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.battery_type),children:[(0,t.jsx)("div",{children:"Тип батареи"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"battery_type",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.adapter),children:[(0,t.jsx)("div",{children:"Адаптер"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"adapter",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.car_charge_input),children:[(0,t.jsx)("div",{children:"Вход для зарядки авто"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"car_charge_input",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.sun_charge),children:[(0,t.jsx)("div",{children:"Солнечная зарядка"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"sun_charge",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.work_temp),children:[(0,t.jsx)("div",{children:"Рабочая температура"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"work_temp",options:{required:!0}}})]})]}),(0,t.jsxs)(Px,{children:[(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.ac_output),children:[(0,t.jsx)("div",{children:"Выход переменного тока"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"ac_output",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.usb_output),children:[(0,t.jsx)("div",{children:"USB-выход"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"usb_output",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.output),children:[(0,t.jsx)("div",{children:"Выход"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"output",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.dc_output),children:[(0,t.jsx)("div",{children:"Выход постоянного тока"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"dc_output",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.type_c_output),children:[(0,t.jsx)("div",{children:"Выход type-c"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"type_c_output",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.output_signal),children:[(0,t.jsx)("div",{children:"Выходной сигнал"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"output_signal",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.gross_weight),children:[(0,t.jsx)("div",{children:"Вес брутто"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"gross_weight",options:{required:!0}}})]}),(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.size),children:[(0,t.jsx)("div",{children:"Размер"}),(0,t.jsx)(wl(),jx({type:"text",mask:"999x999x999",placeholder:"Нет инфо"},e.register("size",{required:!0})))]})]}),(0,t.jsx)(Px,{children:(0,t.jsxs)(Fx,{$errored:Boolean(e.formState.errors.price),children:[(0,t.jsx)("div",{children:"Цена"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"price",options:{required:!0}}})]})}),(0,t.jsxs)(Lx,{children:[(0,t.jsx)(zx,{type:"submit",children:(0,t.jsx)(xr,{text:"Добавить товар"})}),(0,t.jsx)(Ax,{type:"button",onClick:function(){return n(-1)},children:(0,t.jsx)(xr,{text:"Назад"})})]})]})}))]})]})}),(0,t.jsx)(kx,{open:d,setOpen:p,onDrop:function(e){e.preventDefault();var n=/image\/[a-z]*/,t=Array.from(e.dataTransfer.files).filter((function(e){return n.test(e.type)}));c(l.concat(t)),p(!1)}})]})},Nx=function(){return e=void 0,n=void 0,r=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(e){switch(e.label){case 0:return[4,Rf("/api/check-auth")];case 1:return[2,e.sent().ok]}}))},new((t=void 0)||(t=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((r=r.apply(e,n||[])).next())}));var e,n,t,r},Rx=function(e){var n=X(),r=(0,o.useState)(!1),i=r[0],a=r[1];return Nx().then((function(t){return t?a(t):n(e.fallbackUrl)})),i&&(0,t.jsx)(t.Fragment,{children:e.children})},Dx=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Bx=ir.div(pm||(pm=Dx(["\n    display: flex;\n    gap: 5px;\n"],["\n    display: flex;\n    gap: 5px;\n"]))),Ix=ir.img(fm||(fm=Dx(["\n    width: 100px;\n    aspect-ratio: 1;\n    border: 1px solid #0000001A;\n    background: #FFFFFF;\n    \n    object-fit: contain;\n    object-position: center;\n    border-radius: 5px;\n"],["\n    width: 100px;\n    aspect-ratio: 1;\n    border: 1px solid #0000001A;\n    background: #FFFFFF;\n    \n    object-fit: contain;\n    object-position: center;\n    border-radius: 5px;\n"]))),Vx=ir.div(hm||(hm=Dx(["\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n"],["\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n"]))),$x=ir.div(gm||(gm=Dx(["\n    text-align: left;\n    font-family: var(--montserrat-regular);\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 17px;\n    color: #000;\n\n"],["\n    text-align: left;\n    font-family: var(--montserrat-regular);\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 17px;\n    color: #000;\n\n"]))),Ux=function(e){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(Bx,{children:[(0,t.jsx)(Ix,{src:e.imageSrc}),(0,t.jsxs)(Vx,{children:[(0,t.jsxs)($x,{children:["PHYSICAL"===e.type?"ФИО: ":"ООО "," ",e.title]}),(0,t.jsxs)($x,{children:["email: ",e.email]}),(0,t.jsxs)($x,{children:["Телефон: ",e.phone]}),(0,t.jsxs)($x,{children:["Место жительства: ",e.address]})]})]})})},qx=(0,o.createContext)(null),Hx=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},Wx=ir.div(mm||(mm=Hx(["\n    margin: 70px 0 30px 0;\n    display: flex;\n    align-items: center;\n    gap: 36px;\n"],["\n    margin: 70px 0 30px 0;\n    display: flex;\n    align-items: center;\n    gap: 36px;\n"]))),Gx=ir.h1(xm||(xm=Hx(["\n    font-family: var(--montserrat-bold);\n    font-size: 50px;\n    font-weight: 800;\n    line-height: 61px;\n    text-align: left;\n"],["\n    font-family: var(--montserrat-bold);\n    font-size: 50px;\n    font-weight: 800;\n    line-height: 61px;\n    text-align: left;\n"]))),Yx=ir(Pr)(vm||(vm=Hx(["\n    font-family: var(--montserrat-bold);\n    font-size: 16px;\n    font-weight: 800;\n    line-height: 20px;\n    text-align: left;\n    text-decoration: none;\n    color: #0047FF;\n"],["\n    font-family: var(--montserrat-bold);\n    font-size: 16px;\n    font-weight: 800;\n    line-height: 20px;\n    text-align: left;\n    text-decoration: none;\n    color: #0047FF;\n"]))),Qx=ir.div(ym||(ym=Hx(["\n    display: flex;\n    align-items: start;\n    gap: 20px;\n    \n    & > * {\n        width: 50%;\n    }\n"],["\n    display: flex;\n    align-items: start;\n    gap: 20px;\n    \n    & > * {\n        width: 50%;\n    }\n"]))),Xx=ir.div(bm||(bm=Hx(["\n    background: #FFFFFF;\n    border: 1px solid #B8B8B8;\n    border-radius: 10px;\n    display: flex;\n    gap: 10px;\n    flex-direction: column;\n    padding: 20px;\n    height: 641px;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    box-shadow: \n         0 10px 16px 0 #0000000D,\n         0 14px 29px 0 #0000000A,\n         0 37px 40px 0 #00000008,\n         0 84px 47px 0 #00000003;\n\n"],["\n    background: #FFFFFF;\n    border: 1px solid #B8B8B8;\n    border-radius: 10px;\n    display: flex;\n    gap: 10px;\n    flex-direction: column;\n    padding: 20px;\n    height: 641px;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    box-shadow: \n         0 10px 16px 0 #0000000D,\n         0 14px 29px 0 #0000000A,\n         0 37px 40px 0 #00000008,\n         0 84px 47px 0 #00000003;\n\n"]))),Kx=ir.div(wm||(wm=Hx(["\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 20px;\n"],["\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 20px;\n"]))),Jx=ir.div(km||(km=Hx(["\n    padding: 20px;\n    border-radius: 10px;\n    background-color: ",";\n    border: 1px solid ",";\n    box-shadow:\n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n\n    & > * {\n        color: ","; \n    }\n"],["\n    padding: 20px;\n    border-radius: 10px;\n    background-color: ",";\n    border: 1px solid ",";\n    box-shadow:\n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n\n    & > * {\n        color: ","; \n    }\n"])),(function(e){return e.blue?"#0047FF":"#FFF"}),(function(e){return e.blue?"#0047FF":"#B8B8B8"}),(function(e){return e.blue?"#FFF":"#202020"})),Zx=ir.h3(Sm||(Sm=Hx(["\n    font-family: var(--montserrat-bold);\n    font-size: 20px;\n    font-weight: 800;\n    line-height: 24px;\n    text-align: center;\n"],["\n    font-family: var(--montserrat-bold);\n    font-size: 20px;\n    font-weight: 800;\n    line-height: 24px;\n    text-align: center;\n"]))),ev=ir(Zx)(jm||(jm=Hx(["\n    text-align: left;\n    margin-bottom: 20px;\n"],["\n    text-align: left;\n    margin-bottom: 20px;\n"]))),nv=function(){var e=new Date;e.setDate(e.getDate()-1);var n=(0,o.useState)([]),r=n[0],i=n[1];(0,o.useEffect)((function(){var e,n,t,r;(e=void 0,n=void 0,t=void 0,r=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(e){switch(e.label){case 0:return[4,Rf("/api/order")];case 1:return[2,e.sent()]}}))},new(t||(t=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((r=r.apply(e,n||[])).next())}))).then((function(e){return e.json()})).then((function(e){return i(e)}))}),[]);var a=(0,o.useState)(0),s=a[0],l=a[1],c=(0,o.useState)(0),u=c[0],d=c[1],p=(0,o.useContext)(qx);p.on("get-active-connections",(function(e){l(e)})),p.on("get-yesterday-connections",(function(e){d(e)}));var f=(0,o.useState)([]),h=f[0],g=f[1];(0,o.useEffect)((function(){ka().then((function(e){return e.json()})).then((function(e){return g(e)}))}),[]);var m=r.filter((function(n){return new Date(n.created_at).toLocaleDateString()===e.toLocaleDateString()}));return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(gr,{children:[(0,t.jsxs)(Wx,{children:[(0,t.jsx)(Gx,{children:"Статистика"}),(0,t.jsx)(Yx,{to:"/admin/catalog",children:"Изменить каталог"})]}),(0,t.jsxs)(Qx,{children:[(0,t.jsxs)(Xx,{children:[(0,t.jsx)(ev,{children:"Кто и что заказывал"}),r.map((function(e){return(0,t.jsx)(Ux,{imageSrc:Oa(e.products[0].product),type:e.type,title:"PHYSICAL"===e.type?"".concat(e.surname," ").concat(e.name," ").concat(e.patronymic):e.organization,email:e.email,phone:e.phone,address:"".concat(e.region,", ").concat(e.city,", ").concat(e.address)})}))]}),(0,t.jsxs)(Kx,{children:[(0,t.jsxs)(Jx,{children:[(0,t.jsx)(Zx,{children:"Сколько заказали (вчера)"}),(0,t.jsxs)(Zx,{children:[m.length," человек"]})]}),(0,t.jsxs)(Jx,{blue:!0,children:[(0,t.jsx)(Zx,{children:"Самая популярная станция"}),(0,t.jsx)(Zx,{children:h.length>0?h[0].model:"неизвестно"})]}),(0,t.jsxs)(Jx,{children:[(0,t.jsx)(Zx,{children:"Сколько сейчас на сайте"}),(0,t.jsxs)(Zx,{children:[s," человек"]})]}),(0,t.jsxs)(Jx,{blue:!0,children:[(0,t.jsxs)(Zx,{children:["Сколько зашло за ",e.toLocaleDateString("ru-RU")]}),(0,t.jsxs)(Zx,{children:[u," человек"]})]})]})]})]})})},tv=function(e,n,t){for(var r="",i=0;i<n-e.length;i++)r+=t;return r+e},rv=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},iv=function(){return iv=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},iv.apply(this,arguments)},ov=function(e,n,t,r){return new(t||(t=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){e.done?i(e.value):function(e){return e instanceof t?e:new t((function(n){n(e)}))}(e.value).then(a,s)}l((r=r.apply(e,n||[])).next())}))},av=function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},sv=ir.div(Em||(Em=rv(["\n    padding: 70px 0;\n"],["\n    padding: 70px 0;\n"]))),lv=ir.h2(Cm||(Cm=rv(["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    color: #202020;\n    padding-bottom: 40px;\n"],["\n    font-family: var(--montserrat-extrabold);\n    font-weight: 800;\n    font-size: 50px;\n    line-height: 61px;\n    color: #202020;\n    padding-bottom: 40px;\n"]))),cv=ir.div(_m||(_m=rv(["\n    display: flex;\n    padding: 20px;\n    gap: 20px;\n    border-radius: 10px;\n    border: 1px solid #B8B8B8;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n    .swiper-slide {\n        width: 210px!important;\n        margin-right: 20px;\n    }\n    \n    .swiper {\n        margin: 0;\n    }\n"],["\n    display: flex;\n    padding: 20px;\n    gap: 20px;\n    border-radius: 10px;\n    border: 1px solid #B8B8B8;\n    box-shadow: \n            0 10px 16px 0 #0000000D,\n            0 14px 29px 0 #0000000A,\n            0 37px 40px 0 #00000008,\n            0 84px 47px 0 #00000003;\n    \n    .swiper-slide {\n        width: 210px!important;\n        margin-right: 20px;\n    }\n    \n    .swiper {\n        margin: 0;\n    }\n"]))),uv=ir.div(Om||(Om=rv(["\n    margin-top: 40px;\n"],["\n    margin-top: 40px;\n"]))),dv=ir.div(Fm||(Fm=rv(["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 5px;\n    border-bottom: 1px solid ",";\n    \n    & > :first-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 600;\n        font-size: 14px;\n        line-height: 16px;\n        color: #202020;\n        flex-shrink: 0;\n        text-wrap: wrap;\n        width: 30%;\n    }\n    \n    & > *:last-child {\n        box-shadow: none;\n        border-radius: 0;\n        line-height: normal;\n        height: auto;\n        width: 70%;\n        border: none;\n        flex-shrink: 0;\n        outline: none;\n        background-color: transparent;\n        text-align: end;\n        font-size: 14px;\n        font-family: var(--montserrat-regular);\n        padding: 0;\n        \n        & input {\n            outline: none;\n            border: none;\n            background-color: transparent;\n            padding: 0;\n            text-align: end;\n            font-size: 14px;\n            text-wrap: wrap;\n        }\n    }\n"],["\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 5px;\n    border-bottom: 1px solid ",";\n    \n    & > :first-child {\n        font-family: var(--montserrat-regular);\n        font-weight: 600;\n        font-size: 14px;\n        line-height: 16px;\n        color: #202020;\n        flex-shrink: 0;\n        text-wrap: wrap;\n        width: 30%;\n    }\n    \n    & > *:last-child {\n        box-shadow: none;\n        border-radius: 0;\n        line-height: normal;\n        height: auto;\n        width: 70%;\n        border: none;\n        flex-shrink: 0;\n        outline: none;\n        background-color: transparent;\n        text-align: end;\n        font-size: 14px;\n        font-family: var(--montserrat-regular);\n        padding: 0;\n        \n        & input {\n            outline: none;\n            border: none;\n            background-color: transparent;\n            padding: 0;\n            text-align: end;\n            font-size: 14px;\n            text-wrap: wrap;\n        }\n    }\n"])),(function(e){return e.$errored?"#FF0000":"transparent"})),pv=ir.div(Pm||(Pm=rv(["\n    width: 250px;\n"],["\n    width: 250px;\n"]))),fv=ir.form(Tm||(Tm=rv(["\n    display: flex;\n    gap: 20px;\n    align-items: start;\n"],["\n    display: flex;\n    gap: 20px;\n    align-items: start;\n"]))),hv=ir.button(zm||(zm=rv(["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n"],["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n"]))),gv=ir.button(Am||(Am=rv(["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n    \n    & > * {\n        background-color: #FF0000;\n        border-color: #FF0000;\n        width: 100%;\n    }\n"],["\n    border: none;\n    width: auto;\n    height: min-content;\n    padding: 0;\n    border-radius: 23px;\n    \n    & > * {\n        background-color: #FF0000;\n        border-color: #FF0000;\n        width: 100%;\n    }\n"]))),mv=ir.div(Lm||(Lm=rv(["\n    align-self: end;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n"],["\n    align-self: end;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n"]))),xv=function(){var e=X(),n=Ks(),r=J().id;isNaN(+r)&&e("404");var i=(0,o.useState)([]),a=i[0],s=i[1],l=(0,o.useState)([]),c=l[0],u=l[1];(0,o.useEffect)((function(){(function(e){return n=void 0,t=void 0,i=function(){return function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(t=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=n.call(e,a)}catch(e){s=[6,e],r=0}finally{t=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(n){switch(n.label){case 0:return[4,Rf("/api/product/".concat(e,"/with-stopped"))];case 1:return[2,n.sent()]}}))},new((r=void 0)||(r=Promise))((function(e,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(n){n.done?e(n.value):function(e){return e instanceof r?e:new r((function(n){n(e)}))}(n.value).then(a,s)}l((i=i.apply(n,t||[])).next())}));var n,t,r,i})(+r).then((function(e){return e.json()})).then((function(e){n.setValue("model",e.model),n.setValue("capacity",e.capacity),n.setValue("rated_power",tv(e.rated_power.toString(),5,"0")+" Вт"),n.setValue("peak_power",tv(e.peak_power.toString(),5,"0")+" Вт"),n.setValue("battery_type",e.battery_type),n.setValue("adapter",e.adapter),n.setValue("car_charge_input",e.car_charge_input),n.setValue("sun_charge",e.sun_charge),n.setValue("work_temp",e.work_temp),n.setValue("ac_output",e.ac_output),n.setValue("usb_output",e.usb_output),n.setValue("output",e.output),n.setValue("dc_output",e.dc_output),n.setValue("type_c_output",e.type_c_output),n.setValue("output_signal",e.output_signal),n.setValue("gross_weight",e.gross_weight),n.setValue("size","".concat(e.height,"x").concat(e.length,"x").concat(e.width)),n.setValue("price",e.price.toString());var t=[],r=function(n){return ov(void 0,void 0,void 0,(function(){var i,o,a;return av(this,(function(s){switch(s.label){case 0:return n<e.photos.length?[4,fetch("/api/public/"+e.photos[n].source)]:[3,3];case 1:return[4,s.sent().blob()];case 2:i=s.sent(),o=i.type.split("/")[1],a=new File([i],"tmp."+o,{type:i.type}),t.push(a),s.label=3;case 3:return n===e.photos.length?(u(t),[2]):[4,r(n+1)];case 4:return s.sent(),[2]}}))}))};r(0)}))}),[]);var d=(0,o.useState)(!1),p=d[0],f=d[1];return(0,o.useEffect)((function(){var e=new FileReader,n=[],t=function(r){r<c.length?(e.readAsDataURL(c[r]),e.onload=function(e){n.push(e.target.result.toString()),t(r+1)}):r===c.length&&s(n)};t(0)}),[c]),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(sv,{children:(0,t.jsxs)(gr,{children:[(0,t.jsx)(lv,{children:"Галерея"}),(0,t.jsx)(cv,{children:(0,t.jsxs)(wp,{slidesPerView:5,children:[a.map((function(e,n){return(0,t.jsx)(kp,{children:(0,t.jsx)("div",{onDoubleClick:function(){return u(c.filter((function(e,t){return t!==n})))},children:(0,t.jsx)(fx,{src:e},n)})})})),(0,t.jsx)(kp,{children:(0,t.jsx)(xx,{onChange:function(e){var n=e.currentTarget.files[0];u(c.concat(n))}})})]})}),(0,t.jsxs)(uv,{children:[(0,t.jsx)(lv,{children:"Характеристики"}),(0,t.jsx)(is,iv({},n,{children:(0,t.jsxs)(fv,{onSubmit:n.handleSubmit((function(n,t){return ov(void 0,void 0,void 0,(function(){var i;return av(this,(function(o){switch(o.label){case 0:return t.preventDefault(),i=new FormData,Object.entries(n).forEach((function(e){var n=e[0],t=e[1];i.set(n,t)})),c.forEach((function(e){i.append("photos",e)})),[4,Rf("/api/product/".concat(r),{method:"PUT",body:i})];case 1:return o.sent().ok&&e("/admin/catalog"),[2]}}))}))})),children:[(0,t.jsxs)(pv,{children:[(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.model),children:[(0,t.jsx)("div",{children:"Модель"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"model",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.capacity),children:[(0,t.jsx)("div",{children:"Емкость батареи"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"capacity",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.rated_power),children:[(0,t.jsx)("div",{children:"Номинальная мощность"}),(0,t.jsx)(wl(),iv({mask:"99999 Вт",type:"text",placeholder:"Нет инфо"},n.register("rated_power",{required:!0})))]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.peak_power),children:[(0,t.jsx)("div",{children:"Пиковая мощность"}),(0,t.jsx)(wl(),iv({mask:"99999 Вт",type:"text",placeholder:"Нет инфо"},n.register("peak_power",{required:!0})))]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.battery_type),children:[(0,t.jsx)("div",{children:"Тип батареи"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"battery_type",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.adapter),children:[(0,t.jsx)("div",{children:"Адаптер"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"adapter",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.car_charge_input),children:[(0,t.jsx)("div",{children:"Вход для зарядки авто"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"car_charge_input",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.sun_charge),children:[(0,t.jsx)("div",{children:"Солнечная зарядка"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"sun_charge",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.work_temp),children:[(0,t.jsx)("div",{children:"Рабочая температура"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"work_temp",options:{required:!0}}})]})]}),(0,t.jsxs)(pv,{children:[(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.ac_output),children:[(0,t.jsx)("div",{children:"Выход переменного тока"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"ac_output",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.usb_output),children:[(0,t.jsx)("div",{children:"USB-выход"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"usb_output",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.output),children:[(0,t.jsx)("div",{children:"Выход"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"output",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.dc_output),children:[(0,t.jsx)("div",{children:"Выход постоянного тока"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"dc_output",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.type_c_output),children:[(0,t.jsx)("div",{children:"Выход type-c"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"type_c_output",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.output_signal),children:[(0,t.jsx)("div",{children:"Выходной сигнал"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"output_signal",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.gross_weight),children:[(0,t.jsx)("div",{children:"Вес брутто"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"gross_weight",options:{required:!0}}})]}),(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.size),children:[(0,t.jsx)("div",{children:"Размер"}),(0,t.jsx)(wl(),iv({type:"text",mask:"999x999x999",placeholder:"Нет инфо"},n.register("size",{required:!0})))]})]}),(0,t.jsx)(pv,{children:(0,t.jsxs)(dv,{$errored:Boolean(n.formState.errors.price),children:[(0,t.jsx)("div",{children:"Цена"}),(0,t.jsx)(al,{type:"text",placeholder:"Нет инфо",registerOpts:{name:"price",options:{required:!0}}})]})}),(0,t.jsxs)(mv,{children:[(0,t.jsx)(hv,{type:"submit",children:(0,t.jsx)(xr,{text:"Сохранить"})}),(0,t.jsx)(gv,{type:"button",onClick:function(){return e(-1)},children:(0,t.jsx)(xr,{text:"Назад"})})]})]})}))]})]})}),(0,t.jsx)(kx,{open:p,setOpen:f,onDrop:function(e){e.preventDefault();var n=/image\/[a-z]*/,t=Array.from(e.dataTransfer.files).filter((function(e){return n.test(e.type)}));u(c.concat(t)),f(!1)}})]})},vv=function(e){var n=X(),r=(0,o.useState)(!1),i=r[0],a=r[1];return Nx().then((function(t){return t?n(e.fallbackUrl):a(!0)})),i&&(0,t.jsx)(t.Fragment,{children:e.children})};const yv=Object.create(null);yv.open="0",yv.close="1",yv.ping="2",yv.pong="3",yv.message="4",yv.upgrade="5",yv.noop="6";const bv=Object.create(null);Object.keys(yv).forEach((e=>{bv[yv[e]]=e}));const wv={type:"error",data:"parser error"},kv="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),Sv="function"==typeof ArrayBuffer,jv=e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer instanceof ArrayBuffer,Ev=({type:e,data:n},t,r)=>kv&&n instanceof Blob?t?r(n):Cv(n,r):Sv&&(n instanceof ArrayBuffer||jv(n))?t?r(n):Cv(new Blob([n]),r):r(yv[e]+(n||"")),Cv=(e,n)=>{const t=new FileReader;return t.onload=function(){const e=t.result.split(",")[1];n("b"+(e||""))},t.readAsDataURL(e)};function _v(e){return e instanceof Uint8Array?e:e instanceof ArrayBuffer?new Uint8Array(e):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}let Ov;const Fv="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<64;e++)Fv["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(e)]=e;const Pv="function"==typeof ArrayBuffer,Tv=(e,n)=>{if("string"!=typeof e)return{type:"message",data:Av(e,n)};const t=e.charAt(0);return"b"===t?{type:"message",data:zv(e.substring(1),n)}:bv[t]?e.length>1?{type:bv[t],data:e.substring(1)}:{type:bv[t]}:wv},zv=(e,n)=>{if(Pv){const t=(e=>{let n,t,r,i,o,a=.75*e.length,s=e.length,l=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);const c=new ArrayBuffer(a),u=new Uint8Array(c);for(n=0;n<s;n+=4)t=Fv[e.charCodeAt(n)],r=Fv[e.charCodeAt(n+1)],i=Fv[e.charCodeAt(n+2)],o=Fv[e.charCodeAt(n+3)],u[l++]=t<<2|r>>4,u[l++]=(15&r)<<4|i>>2,u[l++]=(3&i)<<6|63&o;return c})(e);return Av(t,n)}return{base64:!0,data:e}},Av=(e,n)=>"blob"===n?e instanceof Blob?e:new Blob([e]):e instanceof ArrayBuffer?e:e.buffer,Lv=String.fromCharCode(30);let Mv;function Nv(e){return e.reduce(((e,n)=>e+n.length),0)}function Rv(e,n){if(e[0].length===n)return e.shift();const t=new Uint8Array(n);let r=0;for(let i=0;i<n;i++)t[i]=e[0][r++],r===e[0].length&&(e.shift(),r=0);return e.length&&r<e[0].length&&(e[0]=e[0].slice(r)),t}function Dv(e){if(e)return function(e){for(var n in Dv.prototype)e[n]=Dv.prototype[n];return e}(e)}Dv.prototype.on=Dv.prototype.addEventListener=function(e,n){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(n),this},Dv.prototype.once=function(e,n){function t(){this.off(e,t),n.apply(this,arguments)}return t.fn=n,this.on(e,t),this},Dv.prototype.off=Dv.prototype.removeListener=Dv.prototype.removeAllListeners=Dv.prototype.removeEventListener=function(e,n){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var t,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<r.length;i++)if((t=r[i])===n||t.fn===n){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},Dv.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var n=new Array(arguments.length-1),t=this._callbacks["$"+e],r=1;r<arguments.length;r++)n[r-1]=arguments[r];if(t){r=0;for(var i=(t=t.slice(0)).length;r<i;++r)t[r].apply(this,n)}return this},Dv.prototype.emitReserved=Dv.prototype.emit,Dv.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},Dv.prototype.hasListeners=function(e){return!!this.listeners(e).length};const Bv="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function Iv(e,...n){return n.reduce(((n,t)=>(e.hasOwnProperty(t)&&(n[t]=e[t]),n)),{})}const Vv=Bv.setTimeout,$v=Bv.clearTimeout;function Uv(e,n){n.useNativeTimers?(e.setTimeoutFn=Vv.bind(Bv),e.clearTimeoutFn=$v.bind(Bv)):(e.setTimeoutFn=Bv.setTimeout.bind(Bv),e.clearTimeoutFn=Bv.clearTimeout.bind(Bv))}class qv extends Error{constructor(e,n,t){super(e),this.description=n,this.context=t,this.type="TransportError"}}class Hv extends Dv{constructor(e){super(),this.writable=!1,Uv(this,e),this.opts=e,this.query=e.query,this.socket=e.socket}onError(e,n,t){return super.emitReserved("error",new qv(e,n,t)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState&&this.write(e)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const n=Tv(e,this.socket.binaryType);this.onPacket(n)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}pause(e){}createUri(e,n={}){return e+"://"+this._hostname()+this._port()+this.opts.path+this._query(n)}_hostname(){const e=this.opts.hostname;return-1===e.indexOf(":")?e:"["+e+"]"}_port(){return this.opts.port&&(this.opts.secure&&Number(443!==this.opts.port)||!this.opts.secure&&80!==Number(this.opts.port))?":"+this.opts.port:""}_query(e){const n=function(e){let n="";for(let t in e)e.hasOwnProperty(t)&&(n.length&&(n+="&"),n+=encodeURIComponent(t)+"="+encodeURIComponent(e[t]));return n}(e);return n.length?"?"+n:""}}const Wv="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),Gv=64,Yv={};let Qv,Xv=0,Kv=0;function Jv(e){let n="";do{n=Wv[e%Gv]+n,e=Math.floor(e/Gv)}while(e>0);return n}function Zv(){const e=Jv(+new Date);return e!==Qv?(Xv=0,Qv=e):e+"."+Jv(Xv++)}for(;Kv<Gv;Kv++)Yv[Wv[Kv]]=Kv;let ey=!1;try{ey="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}const ny=ey;function ty(e){const n=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!n||ny))return new XMLHttpRequest}catch(e){}if(!n)try{return new(Bv[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}function ry(){}const iy=null!=new ty({xdomain:!1}).responseType;class oy extends Dv{constructor(e,n){super(),Uv(this,n),this.opts=n,this.method=n.method||"GET",this.uri=e,this.data=void 0!==n.data?n.data:null,this.create()}create(){var e;const n=Iv(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");n.xdomain=!!this.opts.xd;const t=this.xhr=new ty(n);try{t.open(this.method,this.uri,!0);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}null===(e=this.opts.cookieJar)||void 0===e||e.addCookies(t),"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{var e;3===t.readyState&&(null===(e=this.opts.cookieJar)||void 0===e||e.parseCookies(t)),4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=oy.requestsCount++,oy.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=ry,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete oy.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}function ay(){for(let e in oy.requests)oy.requests.hasOwnProperty(e)&&oy.requests[e].abort()}oy.requestsCount=0,oy.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",ay):"function"==typeof addEventListener&&addEventListener("onpagehide"in Bv?"pagehide":"unload",ay,!1));const sy="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,n)=>n(e,0),ly=Bv.WebSocket||Bv.MozWebSocket,cy="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),uy={websocket:class extends Hv{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),n=this.opts.protocols,t=cy?{}:Iv(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(t.headers=this.opts.extraHeaders);try{this.ws=cy?new ly(e,n,t):n?new ly(e,n):new ly(e)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let n=0;n<e.length;n++){const t=e[n],r=n===e.length-1;Ev(t,this.supportsBinary,(e=>{try{this.ws.send(e)}catch(e){}r&&sy((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){const e=this.opts.secure?"wss":"ws",n=this.query||{};return this.opts.timestampRequests&&(n[this.opts.timestampParam]=Zv()),this.supportsBinary||(n.b64=1),this.createUri(e,n)}check(){return!!ly}},webtransport:class extends Hv{get name(){return"webtransport"}doOpen(){"function"==typeof WebTransport&&(this.transport=new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name]),this.transport.closed.then((()=>{this.onClose()})).catch((e=>{this.onError("webtransport error",e)})),this.transport.ready.then((()=>{this.transport.createBidirectionalStream().then((e=>{const n=function(e,n){Mv||(Mv=new TextDecoder);const t=[];let r=0,i=-1,o=!1;return new TransformStream({transform(a,s){for(t.push(a);;){if(0===r){if(Nv(t)<1)break;const e=Rv(t,1);o=!(128&~e[0]),i=127&e[0],r=i<126?3:126===i?1:2}else if(1===r){if(Nv(t)<2)break;const e=Rv(t,2);i=new DataView(e.buffer,e.byteOffset,e.length).getUint16(0),r=3}else if(2===r){if(Nv(t)<8)break;const e=Rv(t,8),n=new DataView(e.buffer,e.byteOffset,e.length),o=n.getUint32(0);if(o>Math.pow(2,21)-1){s.enqueue(wv);break}i=o*Math.pow(2,32)+n.getUint32(4),r=3}else{if(Nv(t)<i)break;const e=Rv(t,i);s.enqueue(Tv(o?e:Mv.decode(e),n)),r=0}if(0===i||i>e){s.enqueue(wv);break}}}})}(Number.MAX_SAFE_INTEGER,this.socket.binaryType),t=e.readable.pipeThrough(n).getReader(),r=new TransformStream({transform(e,n){!function(e,n){kv&&e.data instanceof Blob?e.data.arrayBuffer().then(_v).then(n):Sv&&(e.data instanceof ArrayBuffer||jv(e.data))?n(_v(e.data)):Ev(e,!1,(e=>{Ov||(Ov=new TextEncoder),n(Ov.encode(e))}))}(e,(t=>{const r=t.length;let i;if(r<126)i=new Uint8Array(1),new DataView(i.buffer).setUint8(0,r);else if(r<65536){i=new Uint8Array(3);const e=new DataView(i.buffer);e.setUint8(0,126),e.setUint16(1,r)}else{i=new Uint8Array(9);const e=new DataView(i.buffer);e.setUint8(0,127),e.setBigUint64(1,BigInt(r))}e.data&&"string"!=typeof e.data&&(i[0]|=128),n.enqueue(i),n.enqueue(t)}))}});r.readable.pipeTo(e.writable),this.writer=r.writable.getWriter();const i=()=>{t.read().then((({done:e,value:n})=>{e||(this.onPacket(n),i())})).catch((e=>{}))};i();const o={type:"open"};this.query.sid&&(o.data=`{"sid":"${this.query.sid}"}`),this.writer.write(o).then((()=>this.onOpen()))}))})))}write(e){this.writable=!1;for(let n=0;n<e.length;n++){const t=e[n],r=n===e.length-1;this.writer.write(t).then((()=>{r&&sy((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){var e;null===(e=this.transport)||void 0===e||e.close()}},polling:class extends Hv{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){const n="https:"===location.protocol;let t=location.port;t||(t=n?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||t!==e.port}const n=e&&e.forceBase64;this.supportsBinary=iy&&!n,this.opts.withCredentials&&(this.cookieJar=void 0)}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const n=()=>{this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(e++,this.once("pollComplete",(function(){--e||n()}))),this.writable||(e++,this.once("drain",(function(){--e||n()})))}else n()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){((e,n)=>{const t=e.split(Lv),r=[];for(let e=0;e<t.length;e++){const i=Tv(t[e],n);if(r.push(i),"error"===i.type)break}return r})(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const e=()=>{this.write([{type:"close"}])};"open"===this.readyState?e():this.once("open",e)}write(e){this.writable=!1,((e,n)=>{const t=e.length,r=new Array(t);let i=0;e.forEach(((e,o)=>{Ev(e,!1,(e=>{r[o]=e,++i===t&&n(r.join(Lv))}))}))})(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){const e=this.opts.secure?"https":"http",n=this.query||{};return!1!==this.opts.timestampRequests&&(n[this.opts.timestampParam]=Zv()),this.supportsBinary||n.sid||(n.b64=1),this.createUri(e,n)}request(e={}){return Object.assign(e,{xd:this.xd,cookieJar:this.cookieJar},this.opts),new oy(this.uri(),e)}doWrite(e,n){const t=this.request({method:"POST",data:e});t.on("success",n),t.on("error",((e,n)=>{this.onError("xhr post error",e,n)}))}doPoll(){const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",((e,n)=>{this.onError("xhr poll error",e,n)})),this.pollXhr=e}}},dy=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,py=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function fy(e){if(e.length>2e3)throw"URI too long";const n=e,t=e.indexOf("["),r=e.indexOf("]");-1!=t&&-1!=r&&(e=e.substring(0,t)+e.substring(t,r).replace(/:/g,";")+e.substring(r,e.length));let i=dy.exec(e||""),o={},a=14;for(;a--;)o[py[a]]=i[a]||"";return-1!=t&&-1!=r&&(o.source=n,o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":"),o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":"),o.ipv6uri=!0),o.pathNames=function(e,n){const t=n.replace(/\/{2,9}/g,"/").split("/");return"/"!=n.slice(0,1)&&0!==n.length||t.splice(0,1),"/"==n.slice(-1)&&t.splice(t.length-1,1),t}(0,o.path),o.queryKey=function(e,n){const t={};return n.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,n,r){n&&(t[n]=r)})),t}(0,o.query),o}class hy extends Dv{constructor(e,n={}){super(),this.binaryType="arraybuffer",this.writeBuffer=[],e&&"object"==typeof e&&(n=e,e=null),e?(e=fy(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=fy(n.host).host),Uv(this,n),this.secure=null!=n.secure?n.secure:"undefined"!=typeof location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.hostname=n.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=n.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=n.transports||["polling","websocket","webtransport"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},n),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(e){let n={},t=e.split("&");for(let e=0,r=t.length;e<r;e++){let r=t[e].split("=");n[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return n}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){const n=Object.assign({},this.opts.query);n.EIO=4,n.transport=e,this.id&&(n.sid=this.id);const t=Object.assign({},this.opts,{query:n,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[e]);return new uy[e](t)}open(){let e;if(this.opts.rememberUpgrade&&hy.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(e=>this.onClose("transport close",e)))}probe(e){let n=this.createTransport(e),t=!1;hy.priorWebsocketSuccess=!1;const r=()=>{t||(n.send([{type:"ping",data:"probe"}]),n.once("packet",(e=>{if(!t)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",n),!n)return;hy.priorWebsocketSuccess="websocket"===n.name,this.transport.pause((()=>{t||"closed"!==this.readyState&&(c(),this.setTransport(n),n.send([{type:"upgrade"}]),this.emitReserved("upgrade",n),n=null,this.upgrading=!1,this.flush())}))}else{const e=new Error("probe error");e.transport=n.name,this.emitReserved("upgradeError",e)}})))};function i(){t||(t=!0,c(),n.close(),n=null)}const o=e=>{const t=new Error("probe error: "+e);t.transport=n.name,i(),this.emitReserved("upgradeError",t)};function a(){o("transport closed")}function s(){o("socket closed")}function l(e){n&&e.name!==n.name&&i()}const c=()=>{n.removeListener("open",r),n.removeListener("error",o),n.removeListener("close",a),this.off("close",s),this.off("upgrading",l)};n.once("open",r),n.once("error",o),n.once("close",a),this.once("close",s),this.once("upgrading",l),-1!==this.upgrades.indexOf("webtransport")&&"webtransport"!==e?this.setTimeoutFn((()=>{t||n.open()}),200):n.open()}onOpen(){if(this.readyState="open",hy.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let e=0;const n=this.upgrades.length;for(;e<n;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",e),this.emitReserved("heartbeat"),this.resetPingTimeout(),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const n=new Error("server error");n.code=e.data,this.onError(n);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let t=0;t<this.writeBuffer.length;t++){const r=this.writeBuffer[t].data;if(r&&(e+="string"==typeof(n=r)?function(e){let n=0,t=0;for(let r=0,i=e.length;r<i;r++)n=e.charCodeAt(r),n<128?t+=1:n<2048?t+=2:n<55296||n>=57344?t+=3:(r++,t+=4);return t}(n):Math.ceil(1.33*(n.byteLength||n.size))),t>0&&e>this.maxPayload)return this.writeBuffer.slice(0,t);e+=2}var n;return this.writeBuffer}write(e,n,t){return this.sendPacket("message",e,n,t),this}send(e,n,t){return this.sendPacket("message",e,n,t),this}sendPacket(e,n,t,r){if("function"==typeof n&&(r=n,n=void 0),"function"==typeof t&&(r=t,t=null),"closing"===this.readyState||"closed"===this.readyState)return;(t=t||{}).compress=!1!==t.compress;const i={type:e,data:n,options:t};this.emitReserved("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),this.transport.close()},n=()=>{this.off("upgrade",n),this.off("upgradeError",n),e()},t=()=>{this.once("upgrade",n),this.once("upgradeError",n)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?t():e()})):this.upgrading?t():e()),this}onError(e){hy.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,n){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",e,n),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const n=[];let t=0;const r=e.length;for(;t<r;t++)~this.transports.indexOf(e[t])&&n.push(e[t]);return n}}hy.protocol=4,hy.protocol;const gy="function"==typeof ArrayBuffer,my=e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer,xy=Object.prototype.toString,vy="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===xy.call(Blob),yy="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===xy.call(File);function by(e){return gy&&(e instanceof ArrayBuffer||my(e))||vy&&e instanceof Blob||yy&&e instanceof File}function wy(e,n){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let n=0,t=e.length;n<t;n++)if(wy(e[n]))return!0;return!1}if(by(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return wy(e.toJSON(),!0);for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&wy(e[n]))return!0;return!1}function ky(e){const n=[],t=e.data,r=e;return r.data=Sy(t,n),r.attachments=n.length,{packet:r,buffers:n}}function Sy(e,n){if(!e)return e;if(by(e)){const t={_placeholder:!0,num:n.length};return n.push(e),t}if(Array.isArray(e)){const t=new Array(e.length);for(let r=0;r<e.length;r++)t[r]=Sy(e[r],n);return t}if("object"==typeof e&&!(e instanceof Date)){const t={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=Sy(e[r],n));return t}return e}function jy(e,n){return e.data=Ey(e.data,n),delete e.attachments,e}function Ey(e,n){if(!e)return e;if(e&&!0===e._placeholder){if("number"==typeof e.num&&e.num>=0&&e.num<n.length)return n[e.num];throw new Error("illegal attachments")}if(Array.isArray(e))for(let t=0;t<e.length;t++)e[t]=Ey(e[t],n);else if("object"==typeof e)for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(e[t]=Ey(e[t],n));return e}const Cy=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"],_y=5;var Oy;!function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(Oy||(Oy={}));class Fy{constructor(e){this.replacer=e}encode(e){return e.type!==Oy.EVENT&&e.type!==Oy.ACK||!wy(e)?[this.encodeAsString(e)]:this.encodeAsBinary({type:e.type===Oy.EVENT?Oy.BINARY_EVENT:Oy.BINARY_ACK,nsp:e.nsp,data:e.data,id:e.id})}encodeAsString(e){let n=""+e.type;return e.type!==Oy.BINARY_EVENT&&e.type!==Oy.BINARY_ACK||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data&&(n+=JSON.stringify(e.data,this.replacer)),n}encodeAsBinary(e){const n=ky(e),t=this.encodeAsString(n.packet),r=n.buffers;return r.unshift(t),r}}function Py(e){return"[object Object]"===Object.prototype.toString.call(e)}class Ty extends Dv{constructor(e){super(),this.reviver=e}add(e){let n;if("string"==typeof e){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");n=this.decodeString(e);const t=n.type===Oy.BINARY_EVENT;t||n.type===Oy.BINARY_ACK?(n.type=t?Oy.EVENT:Oy.ACK,this.reconstructor=new zy(n),0===n.attachments&&super.emitReserved("decoded",n)):super.emitReserved("decoded",n)}else{if(!by(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");n=this.reconstructor.takeBinaryData(e),n&&(this.reconstructor=null,super.emitReserved("decoded",n))}}decodeString(e){let n=0;const t={type:Number(e.charAt(0))};if(void 0===Oy[t.type])throw new Error("unknown packet type "+t.type);if(t.type===Oy.BINARY_EVENT||t.type===Oy.BINARY_ACK){const r=n+1;for(;"-"!==e.charAt(++n)&&n!=e.length;);const i=e.substring(r,n);if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");t.attachments=Number(i)}if("/"===e.charAt(n+1)){const r=n+1;for(;++n&&","!==e.charAt(n)&&n!==e.length;);t.nsp=e.substring(r,n)}else t.nsp="/";const r=e.charAt(n+1);if(""!==r&&Number(r)==r){const r=n+1;for(;++n;){const t=e.charAt(n);if(null==t||Number(t)!=t){--n;break}if(n===e.length)break}t.id=Number(e.substring(r,n+1))}if(e.charAt(++n)){const r=this.tryParse(e.substr(n));if(!Ty.isPayloadValid(t.type,r))throw new Error("invalid payload");t.data=r}return t}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,n){switch(e){case Oy.CONNECT:return Py(n);case Oy.DISCONNECT:return void 0===n;case Oy.CONNECT_ERROR:return"string"==typeof n||Py(n);case Oy.EVENT:case Oy.BINARY_EVENT:return Array.isArray(n)&&("number"==typeof n[0]||"string"==typeof n[0]&&-1===Cy.indexOf(n[0]));case Oy.ACK:case Oy.BINARY_ACK:return Array.isArray(n)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class zy{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=jy(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function Ay(e,n,t){return e.on(n,t),function(){e.off(n,t)}}const Ly=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class My extends Dv{constructor(e,n,t){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=n,t&&t.auth&&(this.auth=t.auth),this._opts=Object.assign({},t),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[Ay(e,"open",this.onopen.bind(this)),Ay(e,"packet",this.onpacket.bind(this)),Ay(e,"error",this.onerror.bind(this)),Ay(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...n){if(Ly.hasOwnProperty(e))throw new Error('"'+e.toString()+'" is a reserved event name');if(n.unshift(e),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(n),this;const t={type:Oy.EVENT,data:n,options:{}};if(t.options.compress=!1!==this.flags.compress,"function"==typeof n[n.length-1]){const e=this.ids++,r=n.pop();this._registerAckCallback(e,r),t.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!r||!this.connected)||(this.connected?(this.notifyOutgoingListeners(t),this.packet(t)):this.sendBuffer.push(t)),this.flags={},this}_registerAckCallback(e,n){var t;const r=null!==(t=this.flags.timeout)&&void 0!==t?t:this._opts.ackTimeout;if(void 0===r)return void(this.acks[e]=n);const i=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let n=0;n<this.sendBuffer.length;n++)this.sendBuffer[n].id===e&&this.sendBuffer.splice(n,1);n.call(this,new Error("operation has timed out"))}),r),o=(...e)=>{this.io.clearTimeoutFn(i),n.apply(this,e)};o.withError=!0,this.acks[e]=o}emitWithAck(e,...n){return new Promise(((t,r)=>{const i=(e,n)=>e?r(e):t(n);i.withError=!0,n.push(i),this.emit(e,...n)}))}_addToQueue(e){let n;"function"==typeof e[e.length-1]&&(n=e.pop());const t={id:this._queueSeq++,tryCount:0,pending:!1,args:e,flags:Object.assign({fromQueue:!0},this.flags)};e.push(((e,...r)=>{if(t===this._queue[0])return null!==e?t.tryCount>this._opts.retries&&(this._queue.shift(),n&&n(e)):(this._queue.shift(),n&&n(null,...r)),t.pending=!1,this._drainQueue()})),this._queue.push(t),this._drainQueue()}_drainQueue(e=!1){if(!this.connected||0===this._queue.length)return;const n=this._queue[0];n.pending&&!e||(n.pending=!0,n.tryCount++,this.flags=n.flags,this.emit.apply(this,n.args))}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){"function"==typeof this.auth?this.auth((e=>{this._sendConnectPacket(e)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(e){this.packet({type:Oy.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},e):e})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,n){this.connected=!1,delete this.id,this.emitReserved("disconnect",e,n),this._clearAcks()}_clearAcks(){Object.keys(this.acks).forEach((e=>{if(!this.sendBuffer.some((n=>String(n.id)===e))){const n=this.acks[e];delete this.acks[e],n.withError&&n.call(this,new Error("socket has been disconnected"))}}))}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case Oy.CONNECT:e.data&&e.data.sid?this.onconnect(e.data.sid,e.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Oy.EVENT:case Oy.BINARY_EVENT:this.onevent(e);break;case Oy.ACK:case Oy.BINARY_ACK:this.onack(e);break;case Oy.DISCONNECT:this.ondisconnect();break;case Oy.CONNECT_ERROR:this.destroy();const n=new Error(e.data.message);n.data=e.data.data,this.emitReserved("connect_error",n)}}onevent(e){const n=e.data||[];null!=e.id&&n.push(this.ack(e.id)),this.connected?this.emitEvent(n):this.receiveBuffer.push(Object.freeze(n))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const n=this._anyListeners.slice();for(const t of n)t.apply(this,e)}super.emit.apply(this,e),this._pid&&e.length&&"string"==typeof e[e.length-1]&&(this._lastOffset=e[e.length-1])}ack(e){const n=this;let t=!1;return function(...r){t||(t=!0,n.packet({type:Oy.ACK,id:e,data:r}))}}onack(e){const n=this.acks[e.id];"function"==typeof n&&(delete this.acks[e.id],n.withError&&e.data.unshift(null),n.apply(this,e.data))}onconnect(e,n){this.id=e,this.recovered=n&&this._pid===n,this._pid=n,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>{this.notifyOutgoingListeners(e),this.packet(e)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Oy.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const n=this._anyListeners;for(let t=0;t<n.length;t++)if(e===n[t])return n.splice(t,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const n=this._anyOutgoingListeners;for(let t=0;t<n.length;t++)if(e===n[t])return n.splice(t,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const n=this._anyOutgoingListeners.slice();for(const t of n)t.apply(this,e.data)}}}function Ny(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Ny.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var n=Math.random(),t=Math.floor(n*this.jitter*e);e=1&Math.floor(10*n)?e+t:e-t}return 0|Math.min(e,this.max)},Ny.prototype.reset=function(){this.attempts=0},Ny.prototype.setMin=function(e){this.ms=e},Ny.prototype.setMax=function(e){this.max=e},Ny.prototype.setJitter=function(e){this.jitter=e};class Ry extends Dv{constructor(n,t){var r;super(),this.nsps={},this.subs=[],n&&"object"==typeof n&&(t=n,n=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,Uv(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(r=t.randomizationFactor)&&void 0!==r?r:.5),this.backoff=new Ny({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=n;const i=t.parser||e;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var n;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(n=this.backoff)||void 0===n||n.setMin(e),this)}randomizationFactor(e){var n;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(n=this.backoff)||void 0===n||n.setJitter(e),this)}reconnectionDelayMax(e){var n;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(n=this.backoff)||void 0===n||n.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(~this._readyState.indexOf("open"))return this;this.engine=new hy(this.uri,this.opts);const n=this.engine,t=this;this._readyState="opening",this.skipReconnect=!1;const r=Ay(n,"open",(function(){t.onopen(),e&&e()})),i=n=>{this.cleanup(),this._readyState="closed",this.emitReserved("error",n),e?e(n):this.maybeReconnectOnOpen()},o=Ay(n,"error",i);if(!1!==this._timeout){const e=this._timeout,t=this.setTimeoutFn((()=>{r(),i(new Error("timeout")),n.close()}),e);this.opts.autoUnref&&t.unref(),this.subs.push((()=>{this.clearTimeoutFn(t)}))}return this.subs.push(r),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(Ay(e,"ping",this.onping.bind(this)),Ay(e,"data",this.ondata.bind(this)),Ay(e,"error",this.onerror.bind(this)),Ay(e,"close",this.onclose.bind(this)),Ay(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){try{this.decoder.add(e)}catch(e){this.onclose("parse error",e)}}ondecoded(e){sy((()=>{this.emitReserved("packet",e)}),this.setTimeoutFn)}onerror(e){this.emitReserved("error",e)}socket(e,n){let t=this.nsps[e];return t?this._autoConnect&&!t.active&&t.connect():(t=new My(this,e,n),this.nsps[e]=t),t}_destroy(e){const n=Object.keys(this.nsps);for(const e of n)if(this.nsps[e].active)return;this._close()}_packet(e){const n=this.encoder.encode(e);for(let t=0;t<n.length;t++)this.engine.write(n[t],e.options)}cleanup(){this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,n){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,n),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const n=this.backoff.duration();this._reconnecting=!0;const t=this.setTimeoutFn((()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((n=>{n?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",n)):e.onreconnect()})))}),n);this.opts.autoUnref&&t.unref(),this.subs.push((()=>{this.clearTimeoutFn(t)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const Dy={};function By(e,n){"object"==typeof e&&(n=e,e=void 0);const t=function(e,n="",t){let r=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(e=void 0!==t?t.protocol+"//"+e:"https://"+e),r=fy(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const i=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+i+":"+r.port+n,r.href=r.protocol+"://"+i+(t&&t.port===r.port?"":":"+r.port),r}(e,(n=n||{}).path||"/socket.io"),r=t.source,i=t.id,o=t.path,a=Dy[i]&&o in Dy[i].nsps;let s;return n.forceNew||n["force new connection"]||!1===n.multiplex||a?s=new Ry(r,n):(Dy[i]||(Dy[i]=new Ry(r,n)),s=Dy[i]),t.query&&!n.query&&(n.query=t.queryKey),s.socket(t.path,n)}Object.assign(By,{Manager:Ry,Socket:My,io:By,connect:By});var Iy=document.getElementById("root");Iy||console.log("root is not found");var Vy=(0,r.H)(Iy),$y=By("/",{autoConnect:!0,path:"/api/socket.io"});$y.on("connection",(function(){console.log($y.connected)})),Vy.render((0,t.jsx)(o.StrictMode,{children:(0,t.jsx)(qx.Provider,{value:$y,children:(0,t.jsx)((function(e){let{basename:t,children:r,future:i,window:a}=e,u=o.useRef();var h;null==u.current&&(u.current=(void 0===(h={window:a,v5Compat:!0})&&(h={}),function(e,t,r,i){void 0===i&&(i={});let{window:o=document.defaultView,v5Compat:a=!1}=i,u=o.history,h=n.Pop,g=null,m=x();function x(){return(u.state||{idx:null}).idx}function v(){h=n.Pop;let e=x(),t=null==e?null:e-m;m=e,g&&g({action:h,location:b.location,delta:t})}function y(e){let n="null"!==o.location.origin?o.location.origin:o.location.href,t="string"==typeof e?e:f(e);return t=t.replace(/ $/,"%20"),c(n,"No window.location.(origin|href) available to create URL for href: "+t),new URL(t,n)}null==m&&(m=0,u.replaceState(s({},u.state,{idx:m}),""));let b={get action(){return h},get location(){return e(o,u)},listen(e){if(g)throw new Error("A history only accepts one active listener");return o.addEventListener(l,v),g=e,()=>{o.removeEventListener(l,v),g=null}},createHref:e=>t(o,e),createURL:y,encodeLocation(e){let n=y(e);return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(e,t){h=n.Push;let i=p(b.location,e,t);r&&r(i,e),m=x()+1;let s=d(i,m),l=b.createHref(i);try{u.pushState(s,"",l)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(l)}a&&g&&g({action:h,location:b.location,delta:1})},replace:function(e,t){h=n.Replace;let i=p(b.location,e,t);r&&r(i,e),m=x();let o=d(i,m),s=b.createHref(i);u.replaceState(o,"",s),a&&g&&g({action:h,location:b.location,delta:0})},go:e=>u.go(e)};return b}((function(e,n){let{pathname:t,search:r,hash:i}=e.location;return p("",{pathname:t,search:r,hash:i},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}),(function(e,n){return"string"==typeof n?n:f(n)}),null,h)));let g=u.current,[m,x]=o.useState({action:g.action,location:g.location}),{v7_startTransition:v}=i||{},y=o.useCallback((e=>{v&&_r?_r((()=>x(e))):x(e)}),[x,v]);return o.useLayoutEffect((()=>g.listen(y)),[g,y]),o.createElement(pe,{basename:t,children:r,location:m.location,navigationType:m.action,navigator:g,future:i})}),{children:(0,t.jsx)((function(){return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)(fe,{children:[(0,t.jsx)(de,{index:!0,element:(0,t.jsx)(Lc,{})}),(0,t.jsxs)(de,{path:"admin",element:(0,t.jsx)(vg,{}),children:[(0,t.jsx)(de,{index:!0,element:(0,t.jsx)(ce,{to:"/admin/login"})}),(0,t.jsx)(de,{path:"catalog",element:(0,t.jsx)(Rx,{fallbackUrl:"/admin/login",children:(0,t.jsx)(cx,{})})}),(0,t.jsx)(de,{path:"product",element:(0,t.jsx)(Rx,{fallbackUrl:"/admin/login",children:(0,t.jsx)(Mx,{})})}),(0,t.jsx)(de,{path:"product/:id/edit",element:(0,t.jsx)(Rx,{fallbackUrl:"/admin/login",children:(0,t.jsx)(xv,{})})}),(0,t.jsx)(de,{path:"stat",element:(0,t.jsx)(Rx,{fallbackUrl:"/admin/login",children:(0,t.jsx)(nv,{})})}),(0,t.jsx)(de,{path:"login",element:(0,t.jsx)(vv,{fallbackUrl:"/admin/catalog",children:(0,t.jsx)(mg,{})})})]}),(0,t.jsxs)(de,{element:(0,t.jsx)(qc,{}),children:[(0,t.jsx)(de,{path:"catalog",element:(0,t.jsx)(ad,{})}),(0,t.jsx)(de,{path:"product/:id",element:(0,t.jsx)(Ff,{})}),(0,t.jsx)(de,{path:"order",element:(0,t.jsx)(rh,{})}),(0,t.jsx)(de,{path:"cart",element:(0,t.jsx)(lg,{})})]}),(0,t.jsx)(de,{path:"*",element:(0,t.jsx)(lu,{})})]})})}),{})})})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,